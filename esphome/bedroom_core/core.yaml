esp32:
  board: m5stack-fire
  framework:
    type: arduino

time:
  - platform: homeassistant
    id: homeassistant_time

script:
  - id: reset_command
    then:
      - delay: 1s
      - if:
          condition:
            lambda: 'return id(current_command).state != "none";'
          then:
            - select.set:
                id: current_command
                option: 'none'
    mode: queued

select:
  - platform: template
    name: 'Current View'
    id: current_view
    options:
      - current_time
      - lights
      - fan
      - ac
    initial_option: current_time
    optimistic: true
  - platform: template
    name: 'Current Command'
    id: current_command
    options:
      - 'none'
      - lights_on
      - lights_off
      - lights_brighten
      - lights_darken
      - set_recommended_room_scene
      - turn_off_room
      - fan_on
      - fan_off
      - fan_speed_up
      - fan_slow_down
      - fan_reverse
      - fan_forward
      - ac_on
      - ac_off
      - ac_warmer
      - ac_colder
      - cooling_auto_control
      - cooling_manual_control
    initial_option: 'none'
    optimistic: true
    on_value:
      - script.execute: 
          id: reset_command
  - platform: template
    name: Ringtone
    id: ringtone
    icon: "mdi:music"
    optimistic: true
    options:
      - 'elis_song:d=8,o=5,b=140:8a,8p,8g,8a,8g,8f,8p,8f,8p,8e,8d,8e,8g,8p,8p,8c6,8p,8g,8p,8a,8f,8p,8p,8p,8p,8e,8d,8e,8g,8p,8p,8c6,8p,8g,8p,8a,8f,8p,8p,8p,8p,8c,8a,8f,8f,8f,8p,8c,8p,8p,8c,8d,8c,8a4,8p,8f'
      - 'beep:d=4,o=5,b=200:8c,4c'
      - 'positive_beep:d=4,o=5,b=200:4c4,8c,4c'
      - 'negative_beep:d=4,o=5,b=200:8c,4c,4c4'
    initial_option: 'elis_song:d=8,o=5,b=140:8a,8p,8g,8a,8g,8f,8p,8f,8p,8e,8d,8e,8g,8p,8p,8c6,8p,8g,8p,8a,8f,8p,8p,8p,8p,8e,8d,8e,8g,8p,8p,8c6,8p,8g,8p,8a,8f,8p,8p,8p,8p,8c,8a,8f,8f,8f,8p,8c,8p,8p,8c,8d,8c,8a4,8p,8f'

text_sensor:
  - platform: homeassistant
    id: fan_direction
    entity_id: fan.${core_room}_fan
    attribute: direction
  - platform: homeassistant
    id: ac_mode
    entity_id: climate.${core_room}_ac
  - platform: homeassistant
    id: next_alarm_timing
    entity_id: binary_sensor.next_alarm_imminent
    attribute: ${core_room}_next_alarm_time

sensor:
  - platform: homeassistant
    id: lights_brightness
    entity_id: light.${core_room}_lights
    attribute: brightness
  - platform: homeassistant
    id: fan_speed
    entity_id: fan.${core_room}_fan
    attribute: percentage
  - platform: homeassistant
    id: ac_temp
    entity_id: climate.${core_room}_ac
    attribute: temperature
  - platform: homeassistant
    id: room_temp
    entity_id: sensor.${core_room}_temperature
  - platform: homeassistant
    id: room_hum
    entity_id: sensor.${core_room}_humidity
  - platform: homeassistant
    id: room_lux
    entity_id: sensor.${core_room}_lux

binary_sensor:
  - platform: homeassistant
    id: lights_power
    entity_id: light.${core_room}_lights
  - platform: homeassistant
    id: fan_power
    entity_id: fan.${core_room}_fan
  - platform: homeassistant
    id: fan_auto_control
    entity_id: automation.${core_room}_fan_auto_control
  - platform: homeassistant
    id: ac_auto_control
    entity_id: automation.${core_room}_ac_auto_control
  - platform: homeassistant
    id: room_next_alarm_imminent
    entity_id: sensor.next_alarm_timings
    attribute: ${next_alarm_imminent_attribute}
  - platform: homeassistant
    id: room_next_alarm_dismissable
    entity_id: sensor.next_alarm_timings
    attribute: ${next_alarm_dismissable_attribute}
  - platform: homeassistant
    id: room_next_alarm_dismissed
    entity_id: input_boolean.${core_room}_next_alarm_dismissed
  - platform: gpio
    pin: 39
    name: 'Left Button'
    id: left_button
    filters:
      - invert:
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - if:
              condition:
                rtttl.is_playing
              then:
                - rtttl.stop
          - if:
              condition:
                light.is_on: backlight
              then:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "current_time";'
                    then:
                      - if:
                          condition:
                            lambda: 'return id(room_next_alarm_dismissable).state;'
                          then:
                            - homeassistant.service:
                                service: input_boolean.turn_off
                                data:
                                  entity_id: input_boolean.${core_room}_next_alarm_dismissed
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - select.set:
                          id: current_command
                          option: lights_on
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "fan";'
                    then:
                      - select.set:
                          id: current_command
                          option: fan_on
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "ac";'
                    then:
                      - select.set:
                          id: current_command
                          option: ac_on
      - timing:
          - ON for at least 1.5s
        then:
          - if:
              condition:
                rtttl.is_playing
              then:
                - rtttl.stop
          - if:
              condition:
                light.is_on: backlight
              then:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - while:
                          condition:
                            binary_sensor.is_on: left_button
                          then:
                            - select.set:
                                id: current_command
                                option: lights_brighten
                            - delay: 1.5s
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "fan";'
                    then:
                      - while:
                          condition:
                            binary_sensor.is_on: left_button
                          then:
                            - select.set:
                                id: current_command
                                option: fan_speed_up
                            - delay: 1.5s
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "ac";'
                    then:
                      - while:
                          condition:
                            binary_sensor.is_on: left_button
                          then:
                            - select.set:
                                id: current_command
                                option: ac_warmer
                            - delay: 1.5s
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - if:
              condition:
                rtttl.is_playing
              then:
                - rtttl.stop
          - if:
              condition:
                light.is_on: backlight
              then:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - select.set:
                          id: current_command
                          option: set_recommended_room_scene
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "fan";'
                    then:
                      - select.set:
                          id: current_command
                          option: fan_reverse
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "ac";'
                    then:
                      - select.set:
                          id: current_command
                          option: cooling_auto_control
  - platform: gpio
    pin: 38
    name: 'Middle Button'
    filters:
      - invert:
    on_click:
      then:
        - if:
            condition:
              rtttl.is_playing
            then:
              - rtttl.stop
        - if:
            condition:
              light.is_on: backlight
            then:
              - select.next: current_view
              - display.page.show_next: interface_display
  - platform: gpio
    pin: 37
    name: 'Right Button'
    id: right_button
    filters:
      - invert:
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - if:
              condition:
                rtttl.is_playing
              then:
                - rtttl.stop
          - if:
              condition:
                light.is_on: backlight
              then:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "current_time";'
                    then:
                      - if:
                          condition:
                            lambda: 'return id(room_next_alarm_dismissable).state;'
                          then:
                            - homeassistant.service:
                                service: input_boolean.turn_on
                                data:
                                  entity_id: input_boolean.${core_room}_next_alarm_dismissed
                          else:
                            - light.turn_off: backlight
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - select.set:
                          id: current_command
                          option: lights_off
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "fan";'
                    then:
                      - select.set:
                          id: current_command
                          option: fan_off
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "ac";'
                    then:
                      - select.set:
                          id: current_command
                          option: ac_off
      - timing:
          - ON for at least 1.5s
        then:
          - if:
              condition:
                rtttl.is_playing
              then:
                - rtttl.stop
          - if:
              condition:
                light.is_on: backlight
              then:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - while:
                          condition:
                            binary_sensor.is_on: right_button
                          then:
                            - select.set:
                                id: current_command
                                option: lights_darken
                            - delay: 1.5s
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "fan";'
                    then:
                      - while:
                          condition:
                            binary_sensor.is_on: right_button
                          then:
                            - select.set:
                                id: current_command
                                option: fan_slow_down
                            - delay: 1.5s
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "ac";'
                    then:
                      - while:
                          condition:
                            binary_sensor.is_on: right_button
                          then:
                            - select.set:
                                id: current_command
                                option: ac_colder
                            - delay: 1.5s
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - if:
              condition:
                rtttl.is_playing
              then:
                - rtttl.stop
          - if:
              condition:
                light.is_on: backlight
              then:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - select.set:
                          id: current_command
                          option: turn_off_room
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "fan";'
                    then:
                      - select.set:
                          id: current_command
                          option: fan_forward
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "ac";'
                    then:
                      - select.set:
                          id: current_command
                          option: cooling_manual_control

button:
  - platform: template
    name: Play Ringtone
    id: play_ringtone
    icon: "mdi:timer"
    on_press:
      then:
        - rtttl.play: !lambda 'return id(ringtone).state;'

i2c:
  sda: 21
  scl: 22
  scan: true
  id: bus_a

output:
  - platform: ledc
    pin: 32
    id: backlight_pwm
  - platform: ledc
    pin: 25
    id: core_speaker

rtttl:
  output: core_speaker
  id: rtttl_speaker

color:
  - id: border
    red: 50%
    green: 50%
    blue: 50%
  - id: device_on
    hex: FFC107
  - id: device_off
    hex: 4D729D
  - id: slider
    hex: 41A7F2
  - id: auto_control
    hex: F2900F
  - id: alarm_dismissable
    hex: '990000'

font:
  - file: 
      type: gfonts
      family: Roboto
      weight: bold
    id: main_time
    size: 80
  - file: 
      type: gfonts
      family: Roboto
    id: small_time
    size: 30
  - file: 
      type: gfonts
      family: Roboto
      weight: light
    id: status_bar
    size: 20
  - file: 
      type: gfonts
      family: Roboto
      weight: bold
    id: auto_control_indicator
    size: 50

image:
  - file: mdi:thermometer
    id: status_temp
    resize: 20x20
  - file: mdi:water-percent
    id: status_hum
    resize: 20x20
  - file: mdi:brightness-5
    id: status_lux
    resize: 20x20
  - file: mdi:clock-outline
    id: tab_current_time
    resize: 30x30
  - file: mdi:lightbulb-group
    id: tab_lights
    resize: 30x30
  - file: mdi:fan
    id: tab_fan
    resize: 30x30
  - file: mdi:snowflake
    id: tab_ac
    resize: 30x30
  - file: mdi:alarm
    id: main_alarm
    resize: 30x30
  - file: mdi:alarm-off
    id: main_alarm_off
    resize: 30x30
  - file: mdi:lightbulb-group
    id: main_lights
    resize: 160x160
  - file: mdi:fan-chevron-down
    id: main_fan_forward
    resize: 160x160
  - file: mdi:fan-chevron-up
    id: main_fan_reverse
    resize: 160x160
  - file: mdi:snowflake
    id: main_ac
    resize: 160x160

spi:
  clk_pin: 18
  mosi_pin: 23
  miso_pin: 23

light:
  - platform: monochromatic
    output: backlight_pwm
    name: "Display Backlight"
    id: backlight
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_off:
      - display.page.show: current_time
      - select.set:
          id: current_view
          option: current_time
  - platform: neopixelbus
    type: GRB
    variant: SK6812
    pin: GPIO15
    num_leds: 10
    name: "LED Strips"
    id: led_strips
    effects:
      - pulse:
          name: Alarm
          transition_length: 1s
          update_interval: 2s
          min_brightness: 15%
          max_brightness: 100%
      - pulse:
          name: Slow Pulse
          transition_length: 2s
          update_interval: 2s
          min_brightness: 15%
          max_brightness: 100%
      - addressable_color_wipe:
          name: Alarm Imminent
          colors:
            - red: 0%
              green: 0%
              blue: 0%
              num_leds: 8
            - red: 100%
              green: 81.6%
              blue: 71%
              num_leds: 2
      - addressable_color_wipe:
          name: Thinking
          colors:
            - red: 0%
              green: 0%
              blue: 0%
              num_leds: 8
            - red: 0%
              green: 0%
              blue: 100%
              num_leds: 2

display:
  - platform: ili9xxx
    id: interface_display
    model: m5stack
    dc_pin: 27
    reset_pin: 33
    cs_pin: 14
    rotation: ${display_rotation}
    pages:
      - id: current_time
        lambda: |-
          int width = it.get_width();
          int height = it.get_height();

          // tabs
          it.image(width * 0.375, height * 0.825, id(tab_lights), ImageAlign::CENTER);
          it.image(width * 0.625, height * 0.825, id(tab_fan), ImageAlign::CENTER);
          it.image(width * 0.875, height * 0.825, id(tab_ac), ImageAlign::CENTER);
          it.line(width * 0.25, height * 0.75, width, height * 0.75, border);

          // borders
          it.rectangle(0, 0, width, height, border);
          it.line(width * 0.25, height * 0.75, width * 0.25, height * 0.9, border);
          it.line(width * 0.5, height * 0.75, width * 0.5, height * 0.9, border);
          it.line(width * 0.75, height * 0.75, width * 0.75, height * 0.9, border);
          
          // bottom status bar
          it.line(0, height * 0.9, width, height * 0.9, border);
          it.image(0,height * 0.92, id(status_temp));
          it.printf(20, height * 0.92, id(status_bar), "%.1f°C", id(room_temp).state);
          it.image(80,height * 0.92,id(status_hum));
          it.printf(100, height * 0.92, id(status_bar), "%.1f%%", id(room_hum).state);
          it.image(160,height * 0.92,id(status_lux));
          it.printf(183, height * 0.92, id(status_bar), "%.0flx", id(room_lux).state);

          // display alarm
          if (id(room_next_alarm_imminent).state) {
            if (id(room_next_alarm_dismissable).state) {
              if (id(room_next_alarm_dismissed).state) {
                it.image(width * 0.325, height * 0.125, id(main_alarm_off), ImageAlign::CENTER);            
                it.printf(width * 0.575, height * 0.125, id(small_time), TextAlign::CENTER, "%s", id(next_alarm_timing).state.substr(0,5).c_str());
              } else {
                if (id(homeassistant_time).now().second % 2 == 0) {
                  it.image(width * 0.325, height * 0.125, id(main_alarm), ImageAlign::CENTER, id(alarm_dismissable));
                }
                it.printf(width * 0.575, height * 0.125, id(small_time), id(alarm_dismissable), TextAlign::CENTER, "%s", id(next_alarm_timing).state.substr(0,5).c_str());
              }
            } else {
              it.image(width * 0.325, height * 0.125, id(main_alarm), ImageAlign::CENTER);            
              it.printf(width * 0.575, height * 0.125, id(small_time), TextAlign::CENTER, "%s", id(next_alarm_timing).state.substr(0,5).c_str());
            }
          }

          // display time
          it.strftime(width * 0.25, height * 0.35, id(main_time), TextAlign::CENTER, "%H", id(homeassistant_time).now());
          it.strftime(width * 0.75, height * 0.35, id(main_time), TextAlign::CENTER, "%M", id(homeassistant_time).now());
          if (id(homeassistant_time).now().second % 2 == 0) {
            it.print(width * 0.5, height * 0.325, id(main_time), TextAlign::CENTER, ":");
          }

          // display date
          it.strftime(width * 0.5, height * 0.6, id(small_time), TextAlign::CENTER, "%a %d %b %Y", id(homeassistant_time).now());
      - id: lights
        lambda: |-
          int width = it.get_width();
          int height = it.get_height();

          // tabs
          it.image(width * 0.125, height * 0.825, id(tab_current_time), ImageAlign::CENTER);
          if (id(lights_power).state) {
            it.filled_rectangle(width * 0.25, height * 0.75, width * 0.25, height * 0.15, id(slider));
          }
          it.image(width * 0.625, height * 0.825, id(tab_fan), ImageAlign::CENTER);
          it.image(width * 0.875, height * 0.825, id(tab_ac), ImageAlign::CENTER);
          it.line(0, height * 0.75, width * 0.25, height * 0.75, border);
          it.line(width * 0.5, height * 0.75, width, height * 0.75, border);

          // borders
          it.rectangle(0, 0, width, height, border);
          it.line(width * 0.25, height * 0.75, width * 0.25, height * 0.9, border);
          it.line(width * 0.5, height * 0.75, width * 0.5, height * 0.9, border);
          it.line(width * 0.75, height * 0.75, width * 0.75, height * 0.9, border);

          // bottom status bar
          it.line(0, height * 0.9, width, height * 0.9, border);
          it.image(0,height * 0.92, id(status_temp));
          it.printf(20, height * 0.92, id(status_bar), "%.1f°C", id(room_temp).state);
          it.image(80,height * 0.92,id(status_hum));
          it.printf(100, height * 0.92, id(status_bar), "%.1f%%", id(room_hum).state);
          it.image(160,height * 0.92,id(status_lux));
          it.printf(183, height * 0.92, id(status_bar), "%.0flx", id(room_lux).state);

          // main display
          if (id(lights_power).state) {
            it.filled_rectangle(0, height * (0.75 - (0.75 * (id(lights_brightness).state) / 255)), width, height * (0.75 * (id(lights_brightness).state) / 255), id(slider));
            it.image(width * 0.5, height * 0.375, id(main_lights), ImageAlign::CENTER, id(device_on));
          } else {
            it.image(width * 0.5, height * 0.375, id(main_lights), ImageAlign::CENTER, id(device_off));
          }
      - id: fan
        lambda: |-
          int width = it.get_width();
          int height = it.get_height();

          // tabs
          it.image(width * 0.125, height * 0.825, id(tab_current_time), ImageAlign::CENTER);
          it.image(width * 0.375, height * 0.825, id(tab_lights), ImageAlign::CENTER);
          if (id(fan_power).state) {
            it.filled_rectangle(width * 0.5, height * 0.75, width * 0.25, height * 0.15, id(slider));
          }
          it.image(width * 0.875, height * 0.825, id(tab_ac), ImageAlign::CENTER);
          it.line(0, height * 0.75, width * 0.5, height * 0.75, border);
          it.line(width * 0.75, height * 0.75, width, height * 0.75, border);

          // borders
          it.rectangle(0, 0, width, height, border);
          it.line(width * 0.25, height * 0.75, width * 0.25, height * 0.9, border);
          it.line(width * 0.5, height * 0.75, width * 0.5, height * 0.9, border);
          it.line(width * 0.75, height * 0.75, width * 0.75, height * 0.9, border);

          // bottom status bar
          it.line(0, height * 0.9, width, height * 0.9, border);
          it.image(0,height * 0.92, id(status_temp));
          it.printf(20, height * 0.92, id(status_bar), "%.1f°C", id(room_temp).state);
          it.image(80,height * 0.92,id(status_hum));
          it.printf(100, height * 0.92, id(status_bar), "%.1f%%", id(room_hum).state);
          it.image(160,height * 0.92,id(status_lux));
          it.printf(183, height * 0.92, id(status_bar), "%.0flx", id(room_lux).state);

          // main display
          if (id(fan_power).state) {
            it.filled_rectangle(0, height * (0.75 - (0.75 * id(fan_speed).state / 100)), width, height * (0.75 * id(fan_speed).state / 100), id(slider));
            if (id(fan_direction).state == "forward") {
              it.image(width * 0.5, height * 0.375, id(main_fan_forward), ImageAlign::CENTER, id(device_on));
            } else {
              it.image(width * 0.5, height * 0.375, id(main_fan_reverse), ImageAlign::CENTER, id(device_on));
            }
          } else {
            if (id(fan_direction).state == "forward") {
              it.image(width * 0.5, height * 0.375, id(main_fan_forward), ImageAlign::CENTER, id(device_off));
            } else {
              it.image(width * 0.5, height * 0.375, id(main_fan_reverse), ImageAlign::CENTER, id(device_off));
            }
          }
          if (id(fan_auto_control).state) {
            it.print(width * 0.85, height * 0.23, id(auto_control_indicator), id(auto_control), TextAlign::CENTER, "A");
          }
      - id: ac
        lambda: |-
          int width = it.get_width();
          int height = it.get_height();

          // tabs
          it.image(width * 0.125, height * 0.825, id(tab_current_time), ImageAlign::CENTER);
          it.image(width * 0.375, height * 0.825, id(tab_lights), ImageAlign::CENTER);
          it.image(width * 0.625, height * 0.825, id(tab_fan), ImageAlign::CENTER);
          if (id(ac_mode).state == "cool") {
            it.filled_rectangle(width * 0.75, height * 0.75, width * 0.25, height * 0.15, id(slider));
          }
          it.line(0, height * 0.75, width * 0.75, height * 0.75, border);

          // borders
          it.rectangle(0, 0, width, height, border);
          it.line(width * 0.25, height * 0.75, width * 0.25, height * 0.9, border);
          it.line(width * 0.5, height * 0.75, width * 0.5, height * 0.9, border);
          it.line(width * 0.75, height * 0.75, width * 0.75, height * 0.9, border);

          // bottom status bar
          it.line(0, height * 0.9, width, height * 0.9, border);
          it.image(0,height * 0.92, id(status_temp));
          it.printf(20, height * 0.92, id(status_bar), "%.1f°C", id(room_temp).state);
          it.image(80,height * 0.92,id(status_hum));
          it.printf(100, height * 0.92, id(status_bar), "%.1f%%", id(room_hum).state);
          it.image(160,height * 0.92,id(status_lux));
          it.printf(183, height * 0.92, id(status_bar), "%.0flx", id(room_lux).state);

          // main display
          if (id(ac_mode).state == "cool") {
            it.filled_rectangle(0, height * (0.75 - (0.75 * (id(ac_temp).state - 23) / 4)), width, height * (0.75 * (id(ac_temp).state - 23) / 4), id(slider));
            it.image(width * 0.5, height * 0.375, id(main_ac), ImageAlign::CENTER, id(device_on));
          } else {
            it.image(width * 0.5, height * 0.375, id(main_ac), ImageAlign::CENTER, id(device_off));
          }
          if (id(ac_auto_control).state) {
            it.print(width * 0.85, height * 0.23, id(auto_control_indicator), id(auto_control), TextAlign::CENTER, "A");
          }