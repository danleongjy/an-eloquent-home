substitutions:
  core_room: study_room
  hostname_room: study-room
  capitalised_room_name: Study Room
  alarm_room: parents_room
  blinds_entity: cover.study_room_blinds
  display_rotation: 270°
  volume: "0.003" # 0.005 generally loud enough
  
esp32:
  board: esp32dev
  framework:
    type: arduino
    
esphome:
  name: ${hostname_room}-core
  friendly_name: ${capitalised_room_name} Core

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "zWKpL7mXSOOs0IxjaQyLT6LqlNd8GpZtk6+HWvY2f6U="

ota:
  password: "0db07cbca96c027ecaa08d3bab77a931"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  manual_ip:
    static_ip: 192.168.18.17
    gateway: 192.168.18.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Study-Room-Core Fallback Hotspot"
    password: "wgvG2Ifd6sZp"

captive_portal:

packages:
  core: !include room_core/core.yaml

light:
  - id: !remove led_strips

i2c: !remove

sensor:  
  - platform: homeassistant
    id: room_temp
    entity_id: sensor.${core_room}_temperature
  - platform: homeassistant
    id: room_hum
    entity_id: sensor.${core_room}_humidity
  - platform: homeassistant
    id: blinds_position
    entity_id: ${blinds_entity}
    attribute: current_position

select:
  - id: !extend current_view
    options:
      - blinds
  - id: !extend current_command
    options:
      - blinds_open
      - blinds_close
      - blinds_stop
      - blinds_auto_control
      - blinds_manual_control

binary_sensor:
  - platform: homeassistant
    id: blinds_auto_control
    entity_id: automation.south_facing_blinds_auto_control

display:
  - id: !extend interface_display
    pages:
      - id: !extend lights
        lambda: |-
          int width = it.get_width();
          int height = it.get_height();

          // tabs
          if (id(lights_power).state) {
            it.filled_rectangle(0, height * 0.75, width * 0.25, height * 0.15, id(slider));
            it.line(0, height * 0.75, width * 0.25, height * 0.75, id(slider));
          }
          it.image(width * 0.375, height * 0.825, id(tab_fan), ImageAlign::CENTER);
          it.image(width * 0.625, height * 0.825, id(tab_ac), ImageAlign::CENTER);
          it.image(width * 0.875, height * 0.825, id(tab_blinds), ImageAlign::CENTER);
          it.line(width * 0.25, height * 0.75, width, height * 0.75, id(border));

          // borders
          it.rectangle(0, 0, width, height, id(border));
          it.line(width * 0.25, height * 0.75, width * 0.25, height * 0.9, id(border));
          it.line(width * 0.5, height * 0.75, width * 0.5, height * 0.9, id(border));
          it.line(width * 0.75, height * 0.75, width * 0.75, height * 0.9, id(border));

          // bottom status bar
          it.line(0, height * 0.9, width, height * 0.9, id(border));
          it.image(0,height * 0.92, id(status_temp));
          it.printf(20, height * 0.92, id(status_bar), "%.1f°C", id(room_temp).state);
          it.image(80,height * 0.92,id(status_hum));
          it.printf(100, height * 0.92, id(status_bar), "%.1f%%", id(room_hum).state);
          it.image(160,height * 0.92,id(status_lux));
          it.printf(183, height * 0.92, id(status_bar), "%.0flx", id(room_lux).state);

          // main display
          if (id(lights_power).state) {
            it.filled_rectangle(0, height * (0.75 - (0.75 * (id(lights_brightness).state) / 255)), width, height * (0.75 * (id(lights_brightness).state) / 255), id(slider));
            it.image(width * 0.5, height * 0.375, id(main_lights), ImageAlign::CENTER, id(device_on));
          } else {
            it.image(width * 0.5, height * 0.375, id(main_lights), ImageAlign::CENTER, id(device_off));
          }
      - id: !extend fan
        lambda: |-
          int width = it.get_width();
          int height = it.get_height();

          // tabs
          if (id(fan_power).state) {
            it.filled_rectangle(0, height * 0.75, width * 0.25, height * 0.15, id(slider));
            it.line(0, height * 0.75, width * 0.25, height * 0.75, id(slider));
          }
          it.image(width * 0.375, height * 0.825, id(tab_ac), ImageAlign::CENTER);
          it.image(width * 0.625, height * 0.825, id(tab_blinds), ImageAlign::CENTER);
          it.image(width * 0.875, height * 0.825, id(tab_current_time), ImageAlign::CENTER);
          it.line(width * 0.25, height * 0.75, width, height * 0.75, id(border));

          // borders
          it.rectangle(0, 0, width, height, id(border));
          it.line(width * 0.25, height * 0.75, width * 0.25, height * 0.9, id(border));
          it.line(width * 0.5, height * 0.75, width * 0.5, height * 0.9, id(border));
          it.line(width * 0.75, height * 0.75, width * 0.75, height * 0.9, id(border));

          // bottom status bar
          it.line(0, height * 0.9, width, height * 0.9, id(border));
          it.image(0,height * 0.92, id(status_temp));
          it.printf(20, height * 0.92, id(status_bar), "%.1f°C", id(room_temp).state);
          it.image(80,height * 0.92,id(status_hum));
          it.printf(100, height * 0.92, id(status_bar), "%.1f%%", id(room_hum).state);
          it.image(160,height * 0.92,id(status_lux));
          it.printf(183, height * 0.92, id(status_bar), "%.0flx", id(room_lux).state);

          // main display
          if (id(fan_power).state) {
            it.filled_rectangle(0, height * (0.75 - (0.75 * id(fan_speed).state / 100)), width, height * (0.75 * id(fan_speed).state / 100), id(slider));
            if (id(fan_direction).state == "forward") {
              it.image(width * 0.5, height * 0.375, id(main_fan_forward), ImageAlign::CENTER, id(device_on));
            } else {
              it.image(width * 0.5, height * 0.375, id(main_fan_reverse), ImageAlign::CENTER, id(device_on));
            }
          } else {
            if (id(fan_direction).state == "forward") {
              it.image(width * 0.5, height * 0.375, id(main_fan_forward), ImageAlign::CENTER, id(device_off));
            } else {
              it.image(width * 0.5, height * 0.375, id(main_fan_reverse), ImageAlign::CENTER, id(device_off));
            }
          }
          if (id(fan_auto_control).state) {
            it.print(width * 0.85, height * 0.23, id(auto_control_indicator), id(auto_control), TextAlign::CENTER, "A");
          }
      - id: !extend ac
        lambda: |-
          int width = it.get_width();
          int height = it.get_height();

          // tabs
          if (id(ac_mode).state == "cool") {
            it.filled_rectangle(0, height * 0.75, width * 0.25, height * 0.15, id(slider));
            it.line(0, height * 0.75, width * 0.25, height * 0.75, id(slider));
          }
          it.image(width * 0.375, height * 0.825, id(tab_blinds), ImageAlign::CENTER);
          it.image(width * 0.625, height * 0.825, id(tab_current_time), ImageAlign::CENTER);
          it.image(width * 0.875, height * 0.825, id(tab_lights), ImageAlign::CENTER);
          it.line(width * 0.25, height * 0.75, width, height * 0.75, id(border));

          // borders
          it.rectangle(0, 0, width, height, id(border));
          it.line(width * 0.25, height * 0.75, width * 0.25, height * 0.9, id(border));
          it.line(width * 0.5, height * 0.75, width * 0.5, height * 0.9, id(border));
          it.line(width * 0.75, height * 0.75, width * 0.75, height * 0.9, id(border));

          // bottom status bar
          it.line(0, height * 0.9, width, height * 0.9, id(border));
          it.image(0,height * 0.92, id(status_temp));
          it.printf(20, height * 0.92, id(status_bar), "%.1f°C", id(room_temp).state);
          it.image(80,height * 0.92,id(status_hum));
          it.printf(100, height * 0.92, id(status_bar), "%.1f%%", id(room_hum).state);
          it.image(160,height * 0.92,id(status_lux));
          it.printf(183, height * 0.92, id(status_bar), "%.0flx", id(room_lux).state);

          // main display
          if (id(ac_mode).state == "cool") {
            it.filled_rectangle(0, height * (0.75 - (0.75 * (id(ac_temp).state - 23) / 4)), width, height * (0.75 * (id(ac_temp).state - 23) / 4), id(slider));
            it.image(width * 0.5, height * 0.375, id(main_ac), ImageAlign::CENTER, id(device_on));
          } else {
            it.image(width * 0.5, height * 0.375, id(main_ac), ImageAlign::CENTER, id(device_off));
          }
          if (id(ac_auto_control).state) {
            it.print(width * 0.85, height * 0.23, id(auto_control_indicator), id(auto_control), TextAlign::CENTER, "A");
          }
      - id: blinds
        lambda: |-
          int width = it.get_width();
          int height = it.get_height();

          // tabs
          if (id(blinds_position).state > 0) {
            it.filled_rectangle(0, height * 0.75, width * 0.25, height * 0.15, id(slider));
            it.line(0, height * 0.75, width * 0.25, height * 0.75, id(slider));
          }
          it.image(width * 0.375, height * 0.825, id(tab_current_time), ImageAlign::CENTER);
          it.image(width * 0.625, height * 0.825, id(tab_lights), ImageAlign::CENTER);
          it.image(width * 0.875, height * 0.825, id(tab_fan), ImageAlign::CENTER);
          it.line(width * 0.25, height * 0.75, width, height * 0.75, id(border));

          // borders
          it.rectangle(0, 0, width, height, id(border));
          it.line(width * 0.25, height * 0.75, width * 0.25, height * 0.9, id(border));
          it.line(width * 0.5, height * 0.75, width * 0.5, height * 0.9, id(border));
          it.line(width * 0.75, height * 0.75, width * 0.75, height * 0.9, id(border));

          // bottom status bar
          it.line(0, height * 0.9, width, height * 0.9, id(border));
          it.image(0,height * 0.92, id(status_temp));
          it.printf(20, height * 0.92, id(status_bar), "%.1f°C", id(room_temp).state);
          it.image(80,height * 0.92,id(status_hum));
          it.printf(100, height * 0.92, id(status_bar), "%.1f%%", id(room_hum).state);
          it.image(160,height * 0.92,id(status_lux));
          it.printf(183, height * 0.92, id(status_bar), "%.0flx", id(room_lux).state);

          // main display
          if (id(blinds_state).state == "open") {
            it.filled_rectangle(0, height * (0.75 - (0.75 * id(blinds_position).state) / 100), width, height * (0.75 * id(blinds_position).state / 100), id(slider));
            it.image(width * 0.5, height * 0.375, id(main_blinds), ImageAlign::CENTER, id(device_on));
          } else {
            it.image(width * 0.5, height * 0.375, id(main_blinds), ImageAlign::CENTER, id(device_off));
          }
          if (id(blinds_auto_control).state) {
            it.print(width * 0.85, height * 0.23, id(auto_control_indicator), id(auto_control), TextAlign::CENTER, "A");
          }