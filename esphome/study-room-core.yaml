substitutions:
  core_room: study_room
  hostname_room: study-room
  capitalised_room_name: Study Room
  alarm_room: parents_room
  blinds_entity: cover.study_room_blinds
  display_rotation: 270Â°
  volume: "0.003" # 0.005 generally loud enough
  
esp32:
  board: esp32dev
  framework:
    type: arduino
    
esphome:
  name: ${hostname_room}-core
  friendly_name: ${capitalised_room_name} Core

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "zWKpL7mXSOOs0IxjaQyLT6LqlNd8GpZtk6+HWvY2f6U="

ota:
  - platform: esphome
    password: "0db07cbca96c027ecaa08d3bab77a931"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  manual_ip:
    static_ip: 192.168.18.17
    gateway: 192.168.18.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Study-Room-Core Fallback Hotspot"
    password: "wgvG2Ifd6sZp"

captive_portal:

packages:
  core: !include packages/room_core.yaml
  kitchen_blind: !include packages/kitchen_blind.yaml

light:
  - id: !remove led_strips

i2c: !remove

sensor:  
  - platform: homeassistant
    id: room_temp
    entity_id: sensor.${core_room}_temperature
  - platform: homeassistant
    id: room_hum
    entity_id: sensor.${core_room}_humidity
  - id: !extend room_lux
    entity_id: sensor.study_room_radar_lux_calibrated
  - platform: homeassistant
    id: blinds_position
    entity_id: ${blinds_entity}
    attribute: current_position

binary_sensor:
  - platform: homeassistant
    id: blinds_auto_control
    entity_id: automation.south_facing_blinds_auto_control

display:
  - id: !extend interface_display
    on_page_change:
      - to: blinds
        then:
          lambda: 'id(current_view).publish_state("blinds");'
    pages:
      - id: !extend lights
        lambda: |-
          // tabs
          if (id(lights_power).state) {
            it.filled_rectangle(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.15, id(slider));
            it.line(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.75, id(slider));
          }
          it.image(id(width) * 0.375, id(height) * 0.825, id(tab_fan), ImageAlign::CENTER);
          it.image(id(width) * 0.625, id(height) * 0.825, id(tab_ac), ImageAlign::CENTER);
          it.image(id(width) * 0.875, id(height) * 0.825, id(tab_blinds), ImageAlign::CENTER);

          id(draw_display_borders).execute();
          id(draw_display_bottom_status_bar).execute();

          // main display
          if (id(lights_power).state) {
            it.filled_rectangle(0, id(height) * (0.75 - (0.75 * (id(lights_brightness).state) / 255)), id(width), id(height) * (0.75 * (id(lights_brightness).state) / 255), id(slider));
            it.image(id(width) * 0.5, id(height) * 0.375, id(main_lights), ImageAlign::CENTER, id(device_on));
          } else {
            it.image(id(width) * 0.5, id(height) * 0.375, id(main_lights), ImageAlign::CENTER, id(device_off));
          }
      - id: !extend fan
        lambda: |-
          // tabs
          if (id(fan_power).state) {
            it.filled_rectangle(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.15, id(slider));
            it.line(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.75, id(slider));
          }
          it.image(id(width) * 0.375, id(height) * 0.825, id(tab_ac), ImageAlign::CENTER);
          it.image(id(width) * 0.625, id(height) * 0.825, id(tab_blinds), ImageAlign::CENTER);
          it.image(id(width) * 0.875, id(height) * 0.825, id(tab_current_time), ImageAlign::CENTER);

          id(draw_display_borders).execute();
          id(draw_display_bottom_status_bar).execute();

          // main display
          if (id(fan_power).state) {
            it.filled_rectangle(0, id(height) * (0.75 - (0.75 * id(fan_speed).state / 100)), id(width), id(height) * (0.75 * id(fan_speed).state / 100), id(slider));
            if (id(fan_direction).state == "forward") {
              it.image(id(width) * 0.5, id(height) * 0.375, id(main_fan_forward), ImageAlign::CENTER, id(device_on));
            } else {
              it.image(id(width) * 0.5, id(height) * 0.375, id(main_fan_reverse), ImageAlign::CENTER, id(device_on));
            }
          } else {
            if (id(fan_direction).state == "forward") {
              it.image(id(width) * 0.5, id(height) * 0.375, id(main_fan_forward), ImageAlign::CENTER, id(device_off));
            } else {
              it.image(id(width) * 0.5, id(height) * 0.375, id(main_fan_reverse), ImageAlign::CENTER, id(device_off));
            }
          }
          if (id(fan_auto_control).state) {
            it.print(id(width) * 0.85, id(height) * 0.23, id(auto_control_indicator), id(auto_control), TextAlign::CENTER, "A");
          }
      - id: !extend ac
        lambda: |-
          // tabs
          if (id(ac_mode).state == "cool") {
            it.filled_rectangle(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.15, id(slider));
            it.line(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.75, id(slider));
          }
          it.image(id(width) * 0.375, id(height) * 0.825, id(tab_blinds), ImageAlign::CENTER);
          it.image(id(width) * 0.625, id(height) * 0.825, id(tab_current_time), ImageAlign::CENTER);
          it.image(id(width) * 0.875, id(height) * 0.825, id(tab_lights), ImageAlign::CENTER);

          id(draw_display_borders).execute();
          id(draw_display_bottom_status_bar).execute();

          // main display
          if (id(ac_mode).state == "cool") {
            it.filled_rectangle(0, id(height) * (0.75 - (0.75 * (id(ac_temp).state - 23) / 4)), id(width), id(height) * (0.75 * (id(ac_temp).state - 23) / 4), id(slider));
            it.image(id(width) * 0.5, id(height) * 0.375, id(main_ac), ImageAlign::CENTER, id(device_on));
          } else {
            it.image(id(width) * 0.5, id(height) * 0.375, id(main_ac), ImageAlign::CENTER, id(device_off));
          }
          if (id(ac_auto_control).state) {
            it.print(id(width) * 0.85, id(height) * 0.23, id(auto_control_indicator), id(auto_control), TextAlign::CENTER, "A");
          }
      - id: blinds
        lambda: |-
          // tabs
          if (id(blinds_position).state > 0) {
            it.filled_rectangle(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.15, id(slider));
            it.line(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.75, id(slider));
          }
          it.image(id(width) * 0.375, id(height) * 0.825, id(tab_current_time), ImageAlign::CENTER);
          it.image(id(width) * 0.625, id(height) * 0.825, id(tab_lights), ImageAlign::CENTER);
          it.image(id(width) * 0.875, id(height) * 0.825, id(tab_fan), ImageAlign::CENTER);

          id(draw_display_borders).execute();
          id(draw_display_bottom_status_bar).execute();

          // main display
          if (id(blinds_state).state == "open") {
            it.filled_rectangle(0, id(height) * (0.75 - (0.75 * id(blinds_position).state) / 100), id(width), id(height) * (0.75 * id(blinds_position).state / 100), id(slider));
            it.image(id(width) * 0.5, id(height) * 0.375, id(main_blinds), ImageAlign::CENTER, id(device_on));
          } else {
            it.image(id(width) * 0.5, id(height) * 0.375, id(main_blinds), ImageAlign::CENTER, id(device_off));
          }
          if (id(blinds_auto_control).state) {
            it.print(id(width) * 0.85, id(height) * 0.23, id(auto_control_indicator), id(auto_control), TextAlign::CENTER, "A");
          }