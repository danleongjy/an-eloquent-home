substitutions:
  core_room: study_room
  hostname_room: study-room
  capitalised_room_name: Study Room
  alarm_room: parents_room
  window_cover_type: roller-shade
  cover_entity: cover.study_room_blinds
  cover_auto_control_automation: automation.south_facing_blinds_auto_control
  lamp: floor_lamp
  lamp_type: floor-lamp
  display_rotation: 270Â°
  rtttl_output_pin: GPIO25
  volume: "0.003" # 0.005 generally loud enough

esp32:
  board: esp32dev
  framework:
    type: esp-idf
    
esphome:
  name: ${hostname_room}-core
  friendly_name: ${capitalised_room_name} Core

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret study_room_core_api_key

ota:
  - platform: esphome
    id: my_ota
    password: !secret study_room_core_ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  manual_ip:
    static_ip: 192.168.18.17
    gateway: 192.168.18.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Study-Room-Core Fallback Hotspot"
    password: !secret ap_password

captive_portal:

packages:
  core: !include packages/room_core.yaml
  rtttl: !include packages/room_core_rtttl.yaml
  
script:
  - id: !remove doorbell
  - id: doorbell
    then:
      - select.set:
          id: ringtone
          option: Doorbell
      - button.press: play_ringtone
      - display.page.show: main_door
      - delay: 10s
      - display.page.show: current_time

light:
  - id: !remove led_strips

i2c: !remove

sensor:  
  - platform: homeassistant
    id: room_temp
    entity_id: sensor.${core_room}_temperature
  - platform: homeassistant
    id: room_hum
    entity_id: sensor.${core_room}_humidity
  - platform: homeassistant
    id: va_timers_running
    entity_id: sensor.study_room_voice_assistant_timers_running
  - platform: homeassistant
    id: va_first_timer_seconds_left
    entity_id: sensor.study_room_voice_assistant_first_timer_seconds_left
  - platform: homeassistant
    id: va_first_timer_total_seconds
    entity_id: sensor.study_room_voice_assistant_first_timer_total_seconds
  - id: !extend room_lux
    entity_id: sensor.study_walkway_lux

display:
  - id: !extend interface_display
    color_palette: 8BIT
    pages:
      - id: !extend current_time
        lambda: |-
          // tabs
          it.image(id(width) * 0.375, id(height) * 0.825, id(tab_lights), ImageAlign::CENTER);
          it.image(id(width) * 0.625, id(height) * 0.825, id(tab_lamp), ImageAlign::CENTER);
          it.image(id(width) * 0.875, id(height) * 0.825, id(tab_fan), ImageAlign::CENTER);

          id(draw_display_borders).execute();
          id(draw_display_bottom_status_bar).execute();

          if (id(va_timers_running).state > 0){
            // display timer
            if (id(va_first_timer_seconds_left).state > 15 * 60) {
              id(interface_display).printf(id(width) * 0.5, id(height) * 0.6, id(small_time), TextAlign::CENTER, "\U0000e425 x %.0f", id(va_timers_running).state);
            }  else {
              // display timer progress
              id(interface_display).filled_rectangle(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.15, id(device_off));
              id(interface_display).line(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.75, id(device_off));
              id(interface_display).filled_rectangle(0, id(height) * (0.75 - (0.75 * (id(va_first_timer_seconds_left).state) / id(va_first_timer_total_seconds).state)), id(width), id(height) * (0.75 * (id(va_first_timer_seconds_left).state) / id(va_first_timer_total_seconds).state), id(device_off));

              int minutes_left = floor(id(va_first_timer_seconds_left).state / 60);
              int seconds_left = id(va_first_timer_seconds_left).state - minutes_left * 60 ;
              auto display_minutes = (minutes_left < 10 ? "0" : "") + std::to_string(minutes_left);
              auto display_seconds = (seconds_left  < 10 ? "0" : "") + std::to_string(seconds_left) ;

              id(interface_display).printf(id(width) * 0.5, id(height) * 0.6, id(small_time), TextAlign::CENTER, "%s:%s \U0000e425 x %.0f", display_minutes.c_str(), display_seconds.c_str(), id(va_timers_running).state);
            }
          } else {
            // display date
            id(interface_display).strftime(id(width) * 0.5, id(height) * 0.6, id(small_time), TextAlign::CENTER, "%a %d %b %Y", id(homeassistant_time).now());
          }
          id(draw_display_main_time).execute();