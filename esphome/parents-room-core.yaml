substitutions:
  core_room: parents_room
  hostname_room: parents-room
  capitalised_room_name: Parents' Room
  alarm_room: parents_room
  blinds_entity: cover.master_bathroom_blind
  display_rotation: 270Â°
  volume: "0.001" # 0.005 generally loud enough

esp32:
  board: m5stack-fire
  flash_size: 16MB
  framework:
    type: arduino
    
esphome:
  name: ${hostname_room}-core
  friendly_name: ${capitalised_room_name} Core

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "3NQFmL4Y0QyJt7MFvqt9s3Wjq5nLpHTSIcG6mdgFYOM="

ota:
  - platform: esphome
    password: "1aaafe04f74a3080a6d01d10b4280023"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  manual_ip:
    static_ip: 192.168.18.14
    gateway: 192.168.18.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${hostname_room}-core"
    password: "IyN9nZcVuCzJ"

captive_portal:
    
packages:
  core: !include packages/room_core.yaml
  env3: !include packages/env3.yaml
  
sensor:
  - platform: homeassistant
    id: blinds_position
    entity_id: ${blinds_entity}
    attribute: current_position
      
binary_sensor:
  - platform: homeassistant
    id: blinds_auto_control
    entity_id: automation.master_bathroom_blind_auto_control

display:
  - id: !extend interface_display
    on_page_change:
      - to: blinds
        then:
          lambda: 'id(current_view).publish_state("blinds");'
    pages:
      - id: !extend lights
        lambda: |-
          // tabs
          if (id(lights_power).state) {
            it.filled_rectangle(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.15, id(slider));
            it.line(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.75, id(slider));
          }
          it.image(id(width) * 0.375, id(height) * 0.825, id(tab_fan), ImageAlign::CENTER);
          it.image(id(width) * 0.625, id(height) * 0.825, id(tab_ac), ImageAlign::CENTER);
          it.image(id(width) * 0.875, id(height) * 0.825, id(tab_blinds), ImageAlign::CENTER);
          it.line(id(width) * 0.25, id(height) * 0.75, id(width), id(height) * 0.75, id(border));

          id(draw_display_borders).execute();
          id(draw_display_bottom_status_bar).execute();

          // main display
          if (id(lights_power).state) {
            it.filled_rectangle(0, id(height) * (0.75 - (0.75 * (id(lights_brightness).state) / 255)), id(width), id(height) * (0.75 * (id(lights_brightness).state) / 255), id(slider));
            it.image(id(width) * 0.5, id(height) * 0.375, id(main_lights), ImageAlign::CENTER, id(device_on));
          } else {
            it.image(id(width) * 0.5, id(height) * 0.375, id(main_lights), ImageAlign::CENTER, id(device_off));
          }
      - id: !extend fan
        lambda: |-
          // tabs
          if (id(fan_power).state) {
            it.filled_rectangle(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.15, id(slider));
            it.line(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.75, id(slider));
          }
          it.image(id(width) * 0.375, id(height) * 0.825, id(tab_ac), ImageAlign::CENTER);
          it.image(id(width) * 0.625, id(height) * 0.825, id(tab_blinds), ImageAlign::CENTER);
          it.image(id(width) * 0.875, id(height) * 0.825, id(tab_current_time), ImageAlign::CENTER);
          it.line(id(width) * 0.25, id(height) * 0.75, id(width), id(height) * 0.75, id(border));

          id(draw_display_borders).execute();
          id(draw_display_bottom_status_bar).execute();

          // main display
          if (id(fan_power).state) {
            it.filled_rectangle(0, id(height) * (0.75 - (0.75 * id(fan_speed).state / 100)), id(width), id(height) * (0.75 * id(fan_speed).state / 100), id(slider));
            if (id(fan_direction).state == "forward") {
              it.image(id(width) * 0.5, id(height) * 0.375, id(main_fan_forward), ImageAlign::CENTER, id(device_on));
            } else {
              it.image(id(width) * 0.5, id(height) * 0.375, id(main_fan_reverse), ImageAlign::CENTER, id(device_on));
            }
          } else {
            if (id(fan_direction).state == "forward") {
              it.image(id(width) * 0.5, id(height) * 0.375, id(main_fan_forward), ImageAlign::CENTER, id(device_off));
            } else {
              it.image(id(width) * 0.5, id(height) * 0.375, id(main_fan_reverse), ImageAlign::CENTER, id(device_off));
            }
          }
          if (id(fan_auto_control).state) {
            it.print(id(width) * 0.85, id(height) * 0.23, id(auto_control_indicator), id(auto_control), TextAlign::CENTER, "A");
          }
      - id: !extend ac
        lambda: |-
          // tabs
          if (id(ac_mode).state == "cool") {
            it.filled_rectangle(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.15, id(slider));
            it.line(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.75, id(slider));
          }
          it.image(id(width) * 0.375, id(height) * 0.825, id(tab_blinds), ImageAlign::CENTER);
          it.image(id(width) * 0.625, id(height) * 0.825, id(tab_current_time), ImageAlign::CENTER);
          it.image(id(width) * 0.875, id(height) * 0.825, id(tab_lights), ImageAlign::CENTER);
          it.line(id(width) * 0.25, id(height) * 0.75, id(width), id(height) * 0.75, id(border));

          id(draw_display_borders).execute();
          id(draw_display_bottom_status_bar).execute();

          // main display
          if (id(ac_mode).state == "cool") {
            it.filled_rectangle(0, id(height) * (0.75 - (0.75 * (id(ac_temp).state - 23) / 4)), id(width), id(height) * (0.75 * (id(ac_temp).state - 23) / 4), id(slider));
            it.image(id(width) * 0.5, id(height) * 0.375, id(main_ac), ImageAlign::CENTER, id(device_on));
          } else {
            it.image(id(width) * 0.5, id(height) * 0.375, id(main_ac), ImageAlign::CENTER, id(device_off));
          }
          if (id(ac_auto_control).state) {
            it.print(id(width) * 0.85, id(height) * 0.23, id(auto_control_indicator), id(auto_control), TextAlign::CENTER, "A");
          }
      - id: blinds
        lambda: |-
          // tabs
          if (id(blinds_position).state > 0) {
            it.filled_rectangle(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.15, id(slider));
            it.line(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.75, id(slider));
          }
          it.image(id(width) * 0.375, id(height) * 0.825, id(tab_current_time), ImageAlign::CENTER);
          it.image(id(width) * 0.625, id(height) * 0.825, id(tab_lights), ImageAlign::CENTER);
          it.image(id(width) * 0.875, id(height) * 0.825, id(tab_fan), ImageAlign::CENTER);
          it.line(id(width) * 0.25, id(height) * 0.75, id(width), id(height) * 0.75, id(border));

          id(draw_display_borders).execute();
          id(draw_display_bottom_status_bar).execute();

          // main display
          if (id(blinds_position).state > 0) {
            it.filled_rectangle(0, id(height) * (0.75 - (0.75 * id(blinds_position).state) / 100), id(width), id(height) * (0.75 * id(blinds_position).state / 100), id(slider));
            it.image(id(width) * 0.5, id(height) * 0.375, id(main_blinds), ImageAlign::CENTER, id(device_on));
          } else {
            it.image(id(width) * 0.5, id(height) * 0.375, id(main_blinds), ImageAlign::CENTER, id(device_off));
          }
          if (id(blinds_auto_control).state) {
            it.print(id(width) * 0.85, id(height) * 0.23, id(auto_control_indicator), id(auto_control), TextAlign::CENTER, "A");
          }