substitutions:
  core_room: kitchen
  hostname_room: kitchen
  capitalised_room_name: Kitchen
  blinds_entity: cover.kitchen_blind
  mic_i2s_din_pin: GPIO34
  voice_assistant_media_player: media_player.kitchen_speaker

esphome:
  name: ${hostname_room}-core
  friendly_name: ${capitalised_room_name} Core

esp32:
  board: esp32dev
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret kitchen_core_api_key

ota:
  - platform: esphome
    password: !secret kitchen_core_ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${hostname_room}-core"
    password: !secret ap_password
  
  manual_ip:
    static_ip: 192.168.18.18
    gateway: 192.168.18.1
    subnet: 255.255.255.0

  on_connect:
    - lambda: 'id(current_view).publish_state("current_time");'
    - lambda: 'id(current_command).publish_state("none");'

captive_portal:

packages:
  local_voice_assistant: !include packages/voice_assistant.yaml
  kitchen_blind: !include packages/kitchen_blind.yaml

external_components:
  - source: github://airy10/esphome-m5stickC/
    components: 
      - axp192

globals:
  - id: height
    type: int
    initial_value: '240'
  - id: width
    type: int
    initial_value: '135'

script:
  - id: reset_view
    mode: restart
    then:
      - delay: 120s
      - display.page.show: current_time
  - id: reset_command
    then:
      - delay: 1s
      - if:
          condition:
            lambda: 'return id(current_command).state != "none";'
          then:
            - lambda: 'id(current_command).publish_state("none");'
    mode: queued
  - id: activate_screensaver
    mode: restart
    then:
      - delay: 300s
      - display.page.show: screensaver
  - id: doorbell
    then:
      - display.page.show: main_door
      - delay: 60s
      - display.page.show: current_time
  - id: draw_display_borders
    then:
      - lambda: |
          id(interface_display).rectangle(0, 0, id(width), id(height), id(border));
          id(interface_display).line(id(width) * 0.3333, id(height) * 0.7, id(width) * 0.3333, id(height) * 0.9, id(border));
          id(interface_display).line(id(width) * 0.6667, id(height) * 0.7, id(width) * 0.6667, id(height) * 0.9, id(border));
          id(interface_display).line(id(width) * 0.3333, id(height) * 0.7, id(width), id(height) * 0.7, id(border));
          id(interface_display).line(0, id(height) * 0.9, id(width), id(height) * 0.9, id(border));
  - id: draw_display_bottom_status_bar
    then:
      - lambda: |
          if (id(env_value_display).state == "temperature") {
            id(interface_display).printf(id(width) * 0.5, id(height) * 0.95, id(status_bar), TextAlign::CENTER, "\U0000e846 %.1fÂ°C", id(room_temp).state);
          } else if (id(env_value_display).state == "humidity") {
            id(interface_display).printf(id(width) * 0.5, id(height) * 0.95, id(status_bar), TextAlign::CENTER, "\U0000f164 %.1f%%", id(room_hum).state);
          } else if (id(env_value_display).state == "lux") {
            id(interface_display).printf(id(width) * 0.5, id(height) * 0.95, id(status_bar), TextAlign::CENTER, "\U0000f7e8 %.0flx", id(room_lux).state);
          }

button:
  - platform: template
    name: Ring Doorbell
    id: ring_doorbell
    icon: "mdi:bell-ring-outline"
    on_press:
      then:
        - script.execute: doorbell

spi:
  - clk_pin: 13
    mosi_pin: 15

i2c:
  - id: i2c_internal
    sda: 21
    scl: 22
  
i2s_audio:
  - i2s_lrclk_pin: 0

time:
  - platform: homeassistant
    id: homeassistant_time

select:
  - platform: template
    id: env_value_display
    options:
      - temperature
      - humidity
      - lux
    optimistic: True
    on_value: 
      then:
        - delay: 5s
        - select.next: env_value_display

text_sensor:
  - platform: template
    id: current_view
    name: 'Current View'
  - platform: template
    id: current_command
    name: 'Current Command'
    on_value: 
      then:
        script.execute: reset_command

binary_sensor:
  - platform: homeassistant
    id: lights_power
    entity_id: light.${core_room}_lights
  - platform: homeassistant
    id: blinds_auto_control
    entity_id: automation.kitchen_blind_auto_control
  - platform: homeassistant
    id: kitchen_presence
    entity_id: binary_sensor.kitchen_presence
    on_state:
      then:
        if:
          condition:
            binary_sensor.is_on: kitchen_presence
          then:
            - script.stop: activate_screensaver
            - display.page.show: current_time
          else:
            script.execute: activate_screensaver
  - platform: gpio
    pin: 37
    name: Front Button
    id: front_button
    filters: 
      - invert:
    on_click:
      - if:
          condition:
            display.is_displaying_page: blinds
          then:
            - script.execute: reset_view
            - display.page.show: current_time
          else:
            - script.execute: reset_view
            - display.page.show_next: interface_display
  - platform: gpio
    pin: 33
    name: Blue Button
    id: blue_button
    filters: 
      - invert:
    setup_priority: 490
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - script.execute: reset_view
          - if:
              condition:
                display.is_displaying_page: screensaver
              then:
                display.page.show: current_time
              else:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - lambda: 'id(current_command).publish_state("lights_on");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "blinds";'
                    then:
                      - lambda: 'id(current_command).publish_state("blinds_open");'
      - timing:
          - ON for at least 1.5s
        then:
          - script.execute: reset_view
          - if:
              condition:
                display.is_displaying_page: screensaver
              then:
                display.page.show: current_time
              else:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - while:
                          condition:
                            binary_sensor.is_on: blue_button
                          then:
                            - lambda: 'id(current_command).publish_state("lights_brighten");'
                            - delay: 1.5s
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - script.execute: reset_view
          - if:
              condition:
                display.is_displaying_page: screensaver
              then:
                display.page.show: current_time
              else:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - lambda: 'id(current_command).publish_state("lights_on");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "blinds";'
                    then:
                      - lambda: 'id(current_command).publish_state("blinds_auto_control");'
  - platform: gpio
    pin: 32
    name: Red Button
    id: red_button
    filters: 
      - invert:
    setup_priority: 490
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - script.execute: reset_view
          - if:
              condition:
                display.is_displaying_page: screensaver
              then:
                display.page.show: current_time
              else:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "current_time";'
                    then:
                      display.page.show: screensaver
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - lambda: 'id(current_command).publish_state("lights_off");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "blinds";'
                    then:
                      - lambda: 'id(current_command).publish_state("blinds_close");'
      - timing:
          - ON for at least 1.5s
        then:
          - script.execute: reset_view
          - if:
              condition:
                display.is_displaying_page: screensaver
              then:
                display.page.show: current_time
              else:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - while:
                          condition:
                            binary_sensor.is_on: red_button
                          then:
                            - lambda: 'id(current_command).publish_state("lights_darken");'
                            - delay: 1.5s
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - script.execute: reset_view
          - if:
              condition:
                display.is_displaying_page: screensaver
              then:
                display.page.show: current_time
              else:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - lambda: 'id(current_command).publish_state("lights_off");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "blinds";'
                    then:
                      - lambda: 'id(current_command).publish_state("blinds_manual_control");'

sensor:
  - platform: axp192
    id: pmu
    address: 0x34
    i2c_id: i2c_internal
    update_interval: 30s
    brightness: 1
  - platform: homeassistant
    id: lights_brightness
    entity_id: light.${core_room}_lights
    attribute: brightness
  - platform: homeassistant
    id: room_temp
    entity_id: sensor.${core_room}_temperature
  - platform: homeassistant
    id: room_hum
    entity_id: sensor.${core_room}_humidity
  - platform: homeassistant
    id: room_lux
    entity_id: sensor.${core_room}_radar_lux
  - platform: homeassistant
    id: blinds_position
    entity_id: ${blinds_entity}
    attribute: current_position

output:
  - platform: ledc
    pin: 10
    inverted: true
    id: led_output

light:
  - platform: monochromatic
    output:  led_output
    name: ${capitalised_room_name} Core LED
    id: led
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 1000ms
          update_interval: 1000ms
          min_brightness: 50%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 50%
          max_brightness: 100%

color:
  - id: border
    red: 50%
    green: 50%
    blue: 50%
  - id: device_on
    hex: FFC107
  - id: device_off
    hex: 4D729D
  - id: slider
    hex: 4D729D #41A7F2
  - id: auto_control
    hex: F2900F

font:
  - file: 
      type: gfonts
      family: Roboto
      weight: bold
    id: main_time
    size: 80
  - file: 
      type: gfonts
      family: Roboto
    id: small_time
    size: 30
    extras:
      - file: "gfonts://Material+Symbols+Outlined"
        glyphs: ["\U0000e425"] # mdi-timer
  - file: 
      type: gfonts
      family: Roboto
      weight: light
    id: status_bar
    size: 20
    extras:
      - file: "gfonts://Material+Symbols+Outlined"
        glyphs: ["\U0000e846","\U0000f164","\U0000f7e8"] #mdi-thermometer, mdi-humidity, mdi-brightness
  - file: 
      type: gfonts
      family: Roboto
      weight: bold
    id: auto_control_indicator
    size: 50

image:
  - file: mdi:clock-outline
    id: tab_current_time
    resize: 30x30
  - file: mdi:lightbulb-group
    id: tab_lights
    resize: 30x30
  - file: mdi:roller-shade
    id: tab_blinds
    resize: 30x30
  - file: mdi:lightbulb-group
    id: main_lights
    resize: 120x120
  - file: mdi:roller-shade
    id: main_blinds
    resize: 120x120
  - file: mdi:bell-ring-outline
    id: main_doorbell
    resize: 120x120

display:
  - platform: ili9xxx
    id: interface_display
    model: ST7789V
    dc_pin: 23
    reset_pin: 18
    cs_pin: 5
    invert_colors: True
    dimensions:
      height: 240
      width: 135
      offset_height: 40
      offset_width: 52
    on_page_change: 
      - to: current_time
        then:
          lambda: 'id(current_view).publish_state("current_time");'
      - to: lights
        then:
          lambda: 'id(current_view).publish_state("lights");'
      - to: blinds
        then:
          lambda: 'id(current_view).publish_state("blinds");'
      - to: screensaver
        then:
          lambda: 'id(current_view).publish_state("screensaver");'
    pages:
      - id: current_time
        lambda: |-
          // tabs
          it.image(id(width) * 0.5, id(height) * 0.8, id(tab_lights), ImageAlign::CENTER);
          it.image(id(width) * 0.8333, id(height) * 0.8, id(tab_blinds), ImageAlign::CENTER);

          id(draw_display_borders).execute();
          id(draw_display_bottom_status_bar).execute();

          if (id(timers_running).state == 0 || id(first_timer_seconds_left).state > 15 * 60) {
            // display time
            it.strftime(id(width) * 0.5, id(height) * 0.175, id(main_time), TextAlign::CENTER, "%H", id(homeassistant_time).now());
            it.strftime(id(width) * 0.5, id(height) * 0.525, id(main_time), TextAlign::CENTER, "%M", id(homeassistant_time).now());
            if (id(homeassistant_time).now().second % 2 == 0) {
              it.print(id(width) * 0.5, id(height) * 0.26, id(main_time), TextAlign::CENTER, "..");
            }
          } else {
            // display timer progress
            it.filled_rectangle(0, id(height) * 0.7, id(width) * 0.3333, id(height) * 0.2, id(slider));
            it.line(0, id(height) * 0.7, id(width) * 0.3333, id(height) * 0.7, id(slider));
            it.filled_rectangle(0, id(height) * (0.7 - (0.7 * (id(first_timer_seconds_left).state) / id(first_timer_total_seconds).state)), id(width), id(height) * (0.7 * (id(first_timer_seconds_left).state) / id(first_timer_total_seconds).state), id(slider));

            // display timer
            int minutes_left = floor(id(first_timer_seconds_left).state / 60);
            int seconds_left = id(first_timer_seconds_left).state - minutes_left * 60 ;
            auto display_minutes = (minutes_left < 10 ? "0" : "") + std::to_string(minutes_left);
            auto display_seconds = (seconds_left  < 10 ? "0" : "") + std::to_string(seconds_left);

            it.printf(id(width) * 0.5, id(height) * 0.175, id(main_time), TextAlign::CENTER, "%s", display_minutes.c_str());
            it.printf(id(width) * 0.5, id(height) * 0.525, id(main_time), TextAlign::CENTER, "%s", display_seconds.c_str());
          }
          if (id(homeassistant_time).now().second % 2 == 0) {
            it.print(id(width) * 0.5, id(height) * 0.26, id(main_time), TextAlign::CENTER, "..");
          }
          
          // Update display brightness
          id(pmu).set_brightness(1);
          id(pmu).update();
      - id: lights
        lambda: |-
          // tabs
          if (id(lights_power).state) {
            it.filled_rectangle(0, id(height) * 0.7, id(width) * 0.3333, id(height) * 0.2, id(slider));
            it.line(0, id(height) * 0.7, id(width) * 0.3333, id(height) * 0.7, id(slider));
          }
          it.image(id(width) * 0.5, id(height) * 0.8, id(tab_blinds), ImageAlign::CENTER);
          it.image(id(width) * 0.8333, id(height) * 0.8, id(tab_current_time), ImageAlign::CENTER);

          id(draw_display_borders).execute();
          id(draw_display_bottom_status_bar).execute();

          // main display
          if (id(lights_power).state) {
            it.filled_rectangle(0, id(height) * (0.7 - (0.7 * (id(lights_brightness).state) / 255)), id(width), id(height) * (0.7 * (id(lights_brightness).state) / 255), id(slider));
            it.image(id(width) * 0.5, id(height) * 0.35, id(main_lights), ImageAlign::CENTER, id(device_on));
          } else {
            it.image(id(width) * 0.5, id(height) * 0.35, id(main_lights), ImageAlign::CENTER, id(device_off));
          }
          // Update display brightness
          id(pmu).set_brightness(1);
          id(pmu).update();
      - id: blinds
        lambda: |-
          // tabs
          if (id(blinds_position).state > 0) {
            it.filled_rectangle(0, id(height) * 0.7, id(width) * 0.3333, id(height) * 0.2, id(slider));
            it.line(0, id(height) * 0.7, id(width) * 0.3333, id(height) * 0.7, id(slider));
          }
          it.image(id(width) * 0.5, id(height) * 0.8, id(tab_current_time), ImageAlign::CENTER);
          it.image(id(width) * 0.8333, id(height) * 0.8, id(tab_lights), ImageAlign::CENTER);

          id(draw_display_borders).execute();
          id(draw_display_bottom_status_bar).execute();

          // main display
          if (id(blinds_position).state > 0) {
            it.filled_rectangle(0, id(height) * (0.7 - (0.7 * id(blinds_position).state) / 100), id(width), id(height) * (0.7 * id(blinds_position).state / 100), id(slider));
            it.image(id(width) * 0.5, id(height) * 0.35, id(main_blinds), ImageAlign::CENTER, id(device_on));
          } else {
            it.image(id(width) * 0.5, id(height) * 0.35, id(main_blinds), ImageAlign::CENTER, id(device_off));
          }
          if (id(blinds_auto_control).state) {
            it.print(id(width) * 0.85, id(height) * 0.2, id(auto_control_indicator), id(auto_control), TextAlign::CENTER, "A");
          }
          // Update display brightness
          id(pmu).set_brightness(1);
          id(pmu).update();
      - id: screensaver
        lambda: |-
          // Update display brightness
          id(pmu).set_brightness(0);
          id(pmu).update();
      - id: main_door
        lambda: |-
          // tabs
          it.image(id(width) * 0.5, id(height) * 0.8, id(tab_lights), ImageAlign::CENTER);
          it.image(id(width) * 0.8333, id(height) * 0.8, id(tab_blinds), ImageAlign::CENTER);

          id(draw_display_borders).execute();
          id(draw_display_bottom_status_bar).execute();
          it.image(id(width) * 0.5, id(height) * 0.35, id(main_doorbell), ImageAlign::CENTER);

          // Update display brightness
          id(pmu).set_brightness(1);
          id(pmu).update();
