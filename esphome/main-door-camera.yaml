esphome:
  name: main-door-camera
  friendly_name: Main Door Camera
#  libraries:
#    - Wire

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret main_door_camera_api_key

ota:
  - platform: esphome
    password: !secret main_door_camera_ota_password

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
      # bssid: 34:97:f6:22:df:28
  manual_ip:
    static_ip: 192.168.18.58
    gateway: 192.168.18.1
    subnet: 255.255.255.0

  #fast_connect: on
  #output_power: 8.5dB
  power_save_mode: none
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Main-Door-Camera"
    password: !secret ap_password

captive_portal:
    
output:
  - platform: ledc
    pin: 14
    inverted: true
    id: led_output

light:
  - platform: monochromatic
    output:  led_output
    name: LED
    id: led
    effects:
      - pulse:
          name: "Pulse"
          transition_length: 1000ms
          update_interval: 1000ms
          min_brightness: 10%
          max_brightness: 100%
  - platform: neopixelbus
    id: hex_light
    name: Hex Light
    type: GRB
    variant: ws2812x
    num_leds: 37
    pin: 4
    effects:
      - addressable_lambda:
          name: Right Arrow
          update_interval: 0.1s
          lambda: |-
            // set background
            it.all() = Color::WHITE;
            it.range(9,28) = Color(0, 0, 255);

            // animate
            static uint16_t progress = 0;
            if (progress > 6) {
              progress = 0;
            }

            if (progress == 6) {
              it[15] = Color::WHITE;
            } else {
              it[progress + 9] = Color::WHITE;
              it[progress + 16] = Color::WHITE;
              it[progress + 22] = Color::WHITE;
            }

            progress = progress + 1;
      - addressable_lambda:
          name: Wait
          update_interval: 0.25s
          lambda: |-
            // set background
            it.all() = Color::WHITE;
            int blue_ring[12] = {5,6,7,13,20,26,31,30,29,23,16,10};
            for (int i = 0; i < 12; i++) {
              it[blue_ring[i]] = Color(0,0,255);
            }

            // animate
            static uint16_t progress = 0;
            if (progress > 11) {
              progress = 0;
            }

            if (progress == 11) {
              it[blue_ring[progress]] = Color::WHITE;
              it[blue_ring[0]] = Color::WHITE;
            } else {
              it[blue_ring[progress]] = Color::WHITE;
              it[blue_ring[progress + 1]] = Color::WHITE;
            }

            progress = progress + 1;
      - addressable_lambda:
          name: Heart
          update_interval: 0.5s
          lambda: |-
            // set black background
            it.all() = Color::WHITE;
            // small heart
            it[5] = Color(255,0,0);
            it[7] = Color(255,0,0);
            it.range(10,14) = Color(255,0,0);
            it.range(17,20) = Color(255,0,0);
            it.range(24,26) = Color(255,0,0);
            it[30] = Color(255,0,0);
                                    
            //animate
            static uint16_t progress = 0;
            if (progress > 1) {
              progress = 0;
            }
            if (progress == 1) {
              // add pixels for big heart
              it[0] = Color(255,0,0);
              it[3] = Color(255,0,0);
              it[4] = Color(255,0,0);
              it[8] = Color(255,0,0);
              it[9] = Color(255,0,0);
              it[14] = Color(255,0,0);
              it[16] = Color(255,0,0);
              it[20] = Color(255,0,0);
              it[23] = Color(255,0,0);
              it[26] = Color(255,0,0);
              it[29] = Color(255,0,0);
              it[31] = Color(255,0,0);
              it[34] = Color(255,0,0);
              it[35] = Color(255,0,0);
            }
            progress = progress + 1;
            
esp32_camera:
  id: main_door_camera
  external_clock:
    pin: GPIO27
    frequency: 20MHz
  i2c_pins:
    sda: GPIO22
    scl: GPIO23
  data_pins: [GPIO32, GPIO35, GPIO34, GPIO5, GPIO39, GPIO18, GPIO36, GPIO19]
  vsync_pin: GPIO25
  href_pin: GPIO26
  pixel_clock_pin: GPIO21
  reset_pin: GPIO15
  max_framerate: 2 fps
  jpeg_quality: 20
  brightness: 2

esp32_camera_web_server:
  - port: 8080
    mode: stream
  - port: 8081
    mode: snapshot