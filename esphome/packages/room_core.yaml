wifi:
  on_connect:
    - lambda: 'id(current_view).publish_state("current_time");'
    - lambda: 'id(current_command).publish_state("none");'

time:
  - platform: homeassistant
    id: homeassistant_time

globals:
  - id: height
    type: int
    initial_value: '320'
  - id: width
    type: int
    initial_value: '240'
  - id: initial_volume
    type: double
    initial_value: ${volume}

script:
  - id: reset_command
    then:
      - delay: 1s
      - if:
          condition:
            lambda: 'return id(current_command).state != "none";'
          then:
            - lambda: 'id(current_command).publish_state("none");'
    mode: queued
  - id: reset_view
    mode: restart
    then:
      - if:
          condition:
            rtttl.is_playing
          then:
            - rtttl.stop
      - delay: 120s
      - display.page.show: current_time
  - id: doorbell
    mode: restart
    then:
      - number.set:
          id: speaker_volume
          value: 100
      - select.set:
          id: ringtone
          option: Doorbell
      - button.press: play_ringtone
      - display.page.show: main_door
      - light.turn_on:
          id: led_strips
          effect: Doorbell
      - delay: 10s
      - number.set:
          id: speaker_volume
          value: 10
      - light.turn_off: led_strips
      - display.page.show: current_time
  - id: draw_display_main_time
    then:
      - lambda: |
          // display alarm
          if (id(room_next_alarm_imminent).state) {
            if (id(room_next_alarm_dismissable).state) {
              if (id(room_next_alarm_dismissed).state) {
                id(interface_display).image(id(width) * 0.325, id(height) * 0.125, id(main_alarm_off), ImageAlign::CENTER);            
                id(interface_display).printf(id(width) * 0.575, id(height) * 0.125, id(small_time), TextAlign::CENTER, "%s", id(next_alarm_timing).state.substr(0,5).c_str());
              } else {
                if (id(homeassistant_time).now().second % 2 == 0) {
                  id(interface_display).image(id(width) * 0.325, id(height) * 0.125, id(main_alarm), ImageAlign::CENTER, id(alarm_dismissable));
                }
                id(interface_display).printf(id(width) * 0.575, id(height) * 0.125, id(small_time), id(alarm_dismissable), TextAlign::CENTER, "%s", id(next_alarm_timing).state.substr(0,5).c_str());
              }
            } else {
              id(interface_display).image(id(width) * 0.325, id(height) * 0.125, id(main_alarm), ImageAlign::CENTER);            
              id(interface_display).printf(id(width) * 0.575, id(height) * 0.125, id(small_time), TextAlign::CENTER, "%s", id(next_alarm_timing).state.substr(0,5).c_str());
            }
          }

          // display time
          id(interface_display).strftime(id(width) * 0.25, id(height) * 0.35, id(main_time), TextAlign::CENTER, "%H", id(homeassistant_time).now());
          id(interface_display).strftime(id(width) * 0.75, id(height) * 0.35, id(main_time), TextAlign::CENTER, "%M", id(homeassistant_time).now());
          if (id(homeassistant_time).now().second % 2 == 0) {
            id(interface_display).print(id(width) * 0.5, id(height) * 0.325, id(main_time), TextAlign::CENTER, ":");
          }
  - id: draw_display_main_lights
    then:
      - lambda: |
          // tab
          if (id(lights_power).state) {
            id(interface_display).filled_rectangle(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.15, id(slider));
            id(interface_display).line(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.75, id(slider));
          }
          // main display
          if (id(lights_power).state) {
            id(interface_display).filled_rectangle(0, id(height) * (0.75 - (0.75 * (id(lights_brightness).state) / 255)), id(width), id(height) * (0.75 * (id(lights_brightness).state) / 255), id(slider));
            id(interface_display).image(id(width) * 0.5, id(height) * 0.375, id(main_lights), ImageAlign::CENTER, id(device_on));
          } else {
            id(interface_display).image(id(width) * 0.5, id(height) * 0.375, id(main_lights), ImageAlign::CENTER, id(device_off));
          }
          // auto control indicator
          if (!id(lights_auto_control).state) {
            if (id(lights_power).state) {
              id(interface_display).image(id(width) * 0.85, id(height) * 0.23, id(manual_control), ImageAlign::CENTER, id(device_on));
            } else {
              id(interface_display).image(id(width) * 0.85, id(height) * 0.23, id(manual_control), ImageAlign::CENTER, id(device_off));
            }
          }

  - id: draw_display_main_fan
    then:
      - lambda: |
          // tab
          if (id(fan_power).state) {
            id(interface_display).filled_rectangle(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.15, id(slider));
            id(interface_display).line(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.75, id(slider));
          }
          // main display
          if (id(fan_power).state) {
            id(interface_display).filled_rectangle(0, id(height) * (0.75 - (0.75 * id(fan_speed).state / 100)), id(width), id(height) * (0.75 * id(fan_speed).state / 100), id(slider));
            if (id(fan_direction).state == "forward") {
              id(interface_display).image(id(width) * 0.5, id(height) * 0.375, id(main_fan_forward), ImageAlign::CENTER, id(device_on));
            } else {
              id(interface_display).image(id(width) * 0.5, id(height) * 0.375, id(main_fan_reverse), ImageAlign::CENTER, id(device_on));
            }
          } else {
            if (id(fan_direction).state == "forward") {
              id(interface_display).image(id(width) * 0.5, id(height) * 0.375, id(main_fan_forward), ImageAlign::CENTER, id(device_off));
            } else {
              id(interface_display).image(id(width) * 0.5, id(height) * 0.375, id(main_fan_reverse), ImageAlign::CENTER, id(device_off));
            }
            if (!id(fan_auto_control).state) {
              id(interface_display).image(id(width) * 0.85, id(height) * 0.23, id(manual_control), ImageAlign::CENTER, id(device_off));
            }
          }
          // auto control indicator
          if (!id(fan_auto_control).state) {
            if (id(fan_power).state) {
              id(interface_display).image(id(width) * 0.85, id(height) * 0.23, id(manual_control), ImageAlign::CENTER, id(device_on));
            } else {
              id(interface_display).image(id(width) * 0.85, id(height) * 0.23, id(manual_control), ImageAlign::CENTER, id(device_off));
            }
          }
          
  - id: draw_display_main_ac
    then:
      - lambda: |
          // tab
          if (id(ac_mode).state == "cool") {
            id(interface_display).filled_rectangle(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.15, id(slider));
            id(interface_display).line(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.75, id(slider));
          }
          // main display
          if (id(ac_mode).state == "cool") {
            id(interface_display).filled_rectangle(0, id(height) * (0.75 - (0.75 * (id(ac_temp).state - 23) / 4)), id(width), id(height) * (0.75 * (id(ac_temp).state - 23) / 4), id(slider));
            id(interface_display).image(id(width) * 0.5, id(height) * 0.375, id(main_ac), ImageAlign::CENTER, id(device_on));
          } else {
            id(interface_display).image(id(width) * 0.5, id(height) * 0.375, id(main_ac), ImageAlign::CENTER, id(device_off));
            if (!id(ac_auto_control).state) {
              id(interface_display).image(id(width) * 0.85, id(height) * 0.23, id(manual_control), ImageAlign::CENTER, id(device_off));
            }
          }
          // auto control indicator
          if (!id(ac_auto_control).state) {
            if (id(ac_mode).state == "cool") {
              id(interface_display).image(id(width) * 0.85, id(height) * 0.23, id(manual_control), ImageAlign::CENTER, id(device_on));
            } else {
              id(interface_display).image(id(width) * 0.85, id(height) * 0.23, id(manual_control), ImageAlign::CENTER, id(device_off));
            }
          }

  - id: draw_display_main_cover
    then:
      - lambda: |
          // tab
          if (id(cover_position).state > 0) {
            id(interface_display).filled_rectangle(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.15, id(slider));
            id(interface_display).line(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.75, id(slider));
          }
          // main display
          if (id(cover_position).state > 0) {
            id(interface_display).filled_rectangle(0, id(height) * (0.75 - (0.75 * id(cover_position).state) / 100), id(width), id(height) * (0.75 * id(cover_position).state / 100), id(slider));
            id(interface_display).image(id(width) * 0.5, id(height) * 0.375, id(main_cover), ImageAlign::CENTER, id(device_on));
          } else {
            id(interface_display).image(id(width) * 0.5, id(height) * 0.375, id(main_cover), ImageAlign::CENTER, id(device_off));
            if (!id(cover_auto_control).state) {
              id(interface_display).image(id(width) * 0.85, id(height) * 0.23, id(manual_control), ImageAlign::CENTER, id(device_off));
            }
          }
          // auto control indicator
          if (!id(cover_auto_control).state) {
            if (id(cover_position).state > 0) {
              id(interface_display).image(id(width) * 0.85, id(height) * 0.23, id(manual_control), ImageAlign::CENTER, id(device_on));
            } else {
              id(interface_display).image(id(width) * 0.85, id(height) * 0.23, id(manual_control), ImageAlign::CENTER, id(device_off));
            }
          }
  - id: draw_display_main_doorbell
    then:
      - lambda: |
          id(interface_display).image(id(width) * 0.5, id(height) * 0.375, id(main_doorbell), ImageAlign::CENTER, id(device_on));
  - id: draw_display_borders
    then:
      - lambda: |
          id(interface_display).rectangle(0, 0, id(width), id(height), id(border));
          id(interface_display).line(id(width) * 0.25, id(height) * 0.75, id(width) * 0.25, id(height) * 0.9, id(border));
          id(interface_display).line(id(width) * 0.5, id(height) * 0.75, id(width) * 0.5, id(height) * 0.9, id(border));
          id(interface_display).line(id(width) * 0.75, id(height) * 0.75, id(width) * 0.75, id(height) * 0.9, id(border));
          id(interface_display).line(id(width) * 0.25, id(height) * 0.75, id(width), id(height) * 0.75, id(border));
          id(interface_display).line(0, id(height) * 0.9, id(width), id(height) * 0.9, id(border));
  - id: draw_display_bottom_status_bar
    then:
      - lambda: |
          id(interface_display).printf(id(width) * 0.5, id(height) * 0.95, id(status_bar), TextAlign::CENTER, "\U0000e846%.1f°C \U0000f164%.1f%% \U0000f7e8%.0flx", id(room_temp).state, id(room_hum).state, id(room_lux).state);

text_sensor:
  - platform: homeassistant
    id: fan_direction
    entity_id: fan.${core_room}_fan
    attribute: direction
  - platform: homeassistant
    id: ac_mode
    entity_id: climate.${core_room}_ac
  - platform: homeassistant
    id: next_alarm_timing
    entity_id: binary_sensor.next_alarm_imminent
    attribute: ${alarm_room}_next_alarm_time
  - platform: template
    id: current_view
    name: 'Current View'
  - platform: template
    id: current_command
    name: 'Current Command'
    on_value:
      - script.execute: 
          id: reset_command

sensor:
  - platform: homeassistant
    id: lights_brightness
    entity_id: light.${core_room}_lights
    attribute: brightness
  - platform: homeassistant
    id: fan_speed
    entity_id: fan.${core_room}_fan
    attribute: percentage
  - platform: homeassistant
    id: ac_temp
    entity_id: climate.${core_room}_ac
    attribute: temperature
  - platform: homeassistant
    id: room_lux
    entity_id: sensor.${core_room}_lux
  - platform: homeassistant
    id: cover_position
    entity_id: ${cover_entity}
    attribute: current_position

binary_sensor:
  - platform: homeassistant
    id: lights_power
    entity_id: light.${core_room}_lights
  - platform: homeassistant
    id: lights_auto_control
    entity_id: automation.${core_room}_motion_lights
  - platform: homeassistant
    id: fan_power
    entity_id: fan.${core_room}_fan
  - platform: homeassistant
    id: fan_auto_control
    entity_id: automation.${core_room}_fan_auto_control
  - platform: homeassistant
    id: ac_auto_control
    entity_id: automation.${core_room}_motion_ac
  - platform: homeassistant
    id: cover_auto_control
    entity_id: ${cover_auto_control_automation}
  - platform: homeassistant
    id: room_next_alarm_imminent
    entity_id: sensor.next_alarm_timings
    attribute: ${alarm_room}_next_alarm_imminent
  - platform: homeassistant
    id: room_next_alarm_dismissable
    entity_id: sensor.next_alarm_timings
    attribute: ${alarm_room}_next_alarm_dismissable
  - platform: homeassistant
    id: room_next_alarm_dismissed
    entity_id: input_boolean.${alarm_room}_next_alarm_dismissed
  - platform: gpio
    pin: 39
    name: 'Left Button'
    id: left_button
    filters:
      - invert:
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - script.execute: reset_view
          - if:
              condition:
                light.is_on: backlight
              then:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - lambda: 'id(current_command).publish_state("lights_on");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "fan";'
                    then:
                      - lambda: 'id(current_command).publish_state("fan_on");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "ac";'
                    then:
                      - lambda: 'id(current_command).publish_state("ac_on");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "cover";'
                    then:
                      - lambda: 'id(current_command).publish_state("cover_open");'
      - timing:
          - ON for at least 1.5s
        then:
          - script.execute: reset_view
          - if:
              condition:
                light.is_on: backlight
              then:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - while:
                          condition:
                            binary_sensor.is_on: left_button
                          then:
                            - lambda: 'id(current_command).publish_state("lights_brighten");'
                            - delay: 1.5s
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "fan";'
                    then:
                      - while:
                          condition:
                            binary_sensor.is_on: left_button
                          then:
                            - lambda: 'id(current_command).publish_state("fan_speed_up");'
                            - delay: 1.5s
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "ac";'
                    then:
                      - while:
                          condition:
                            binary_sensor.is_on: left_button
                          then:
                            - lambda: 'id(current_command).publish_state("ac_warmer");'
                            - delay: 1.5s
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - script.execute: reset_view
          - if:
              condition:
                light.is_on: backlight
              then:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "current_time";'
                    then:
                      - if:
                          condition:
                            lambda: 'return id(room_next_alarm_dismissable).state;'
                          then:
                            - homeassistant.service:
                                service: input_boolean.turn_off
                                data:
                                  entity_id: input_boolean.${alarm_room}_next_alarm_dismissed
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - lambda: 'id(current_command).publish_state("set_recommended_room_scene");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "fan";'
                    then:
                      - lambda: 'id(current_command).publish_state("fan_reverse");'
  - platform: gpio
    pin: 38
    name: 'Middle Button'
    filters:
      - invert:
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - script.execute: reset_view
          - if:
              condition:
                light.is_on: backlight
              then:
                - if:
                    condition:
                      display.is_displaying_page: current_time
                    then:
                      display.page.show: lights
                    else:
                      display.page.show_next: interface_display
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - script.execute: reset_view
          - if:
              condition:
                light.is_on: backlight
              then:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - if:
                          condition:
                            lambda: 'return id(lights_auto_control).state;'
                          then:
                            lambda: 'id(current_command).publish_state("lights_manual_control");'
                          else:
                            lambda: 'id(current_command).publish_state("lights_auto_control");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "fan";'
                    then:
                      - if:
                          condition:
                            lambda: 'return id(fan_auto_control).state;'
                          then:
                            lambda: 'id(current_command).publish_state("fan_manual_control");'
                          else:
                            lambda: 'id(current_command).publish_state("fan_auto_control");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "ac";'
                    then:
                      - if:
                          condition:
                            lambda: 'return id(ac_auto_control).state;'
                          then:
                            lambda: 'id(current_command).publish_state("cooling_manual_control");'
                          else:
                            lambda: 'id(current_command).publish_state("cooling_auto_control");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "cover";'
                    then:
                      - if:
                          condition:
                            lambda: 'return id(cover_auto_control).state;'
                          then:
                            lambda: 'id(current_command).publish_state("cover_manual_control");'
                          else:
                            lambda: 'id(current_command).publish_state("cover_auto_control");'
  - platform: gpio
    pin: 37
    name: 'Right Button'
    id: right_button
    filters:
      - invert:
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - script.execute: reset_view
          - if:
              condition:
                light.is_on: backlight
              then:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "current_time";'
                    then:
                      - light.turn_off: backlight
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - lambda: 'id(current_command).publish_state("lights_off");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "fan";'
                    then:
                      - lambda: 'id(current_command).publish_state("fan_off");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "ac";'
                    then:
                      - lambda: 'id(current_command).publish_state("ac_off");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "cover";'
                    then:
                      - lambda: 'id(current_command).publish_state("cover_close");'
      - timing:
          - ON for at least 1.5s
        then:
          - script.execute: reset_view
          - if:
              condition:
                light.is_on: backlight
              then:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - while:
                          condition:
                            binary_sensor.is_on: right_button
                          then:
                            - lambda: 'id(current_command).publish_state("lights_darken");'
                            - delay: 1.5s
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "fan";'
                    then:
                      - while:
                          condition:
                            binary_sensor.is_on: right_button
                          then:
                            - lambda: 'id(current_command).publish_state("fan_slow_down");'
                            - delay: 1.5s
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "ac";'
                    then:
                      - while:
                          condition:
                            binary_sensor.is_on: right_button
                          then:
                            - lambda: 'id(current_command).publish_state("ac_colder");'
                            - delay: 1.5s
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - script.execute: reset_view
          - if:
              condition:
                light.is_on: backlight
              then:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "current_time";'
                    then:
                      - if:
                          condition:
                            lambda: 'return id(room_next_alarm_dismissable).state && !id(room_next_alarm_dismissed).state;'
                          then:
                            - homeassistant.service:
                                service: input_boolean.turn_on
                                data:
                                  entity_id: input_boolean.${alarm_room}_next_alarm_dismissed
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - lambda: 'id(current_command).publish_state("turn_off_room");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "fan";'
                    then:
                      - lambda: 'id(current_command).publish_state("fan_forward");'

button:
  - platform: template
    name: Ring Doorbell
    id: ring_doorbell
    icon: "mdi:bell-ring-outline"
    on_press:
      then:
        - script.execute: doorbell

i2c:
  sda: 21
  scl: 22
  scan: true
  id: bus_a

output:
  - platform: ledc
    pin: 32
    id: backlight_pwm

color:
  - id: border
    red: 50%
    green: 50%
    blue: 50%
  - id: device_on
    hex: FFC107
  - id: device_off
    hex: 4D729D
  - id: slider
    hex: 4D729D #41A7F2
  - id: alarm_dismissable
    hex: F2900F
  - id: black
    hex: '000000'

font:
  - file: 
      type: gfonts
      family: Roboto
      weight: bold
    id: main_time
    size: 80
  - file: 
      type: gfonts
      family: Roboto
    id: small_time
    size: 30
    extras:
      - file: "gfonts://Material+Symbols+Outlined"
        glyphs: ["\U0000e425"] # mdi-timer
  - file: 
      type: gfonts
      family: Roboto
      weight: light
    id: status_bar
    size: 20
    extras:
      - file: "gfonts://Material+Symbols+Outlined"
        glyphs: ["\U0000e846","\U0000f164","\U0000f7e8"] #mdi-thermometer, mdi-humidity, mdi-brightness

image:
  binary:
    chroma_key:
      - file: mdi:clock-outline
        id: tab_current_time
        resize: 30x30
      - file: mdi:lightbulb-group
        id: tab_lights
        resize: 30x30
      - file: mdi:fan
        id: tab_fan
        resize: 30x30
      - file: mdi:snowflake
        id: tab_ac
        resize: 30x30
      - file: mdi:${window_cover_type}
        id: tab_cover
        resize: 30x30
      - file: mdi:alarm
        id: main_alarm
        resize: 30x30
      - file: mdi:alarm-off
        id: main_alarm_off
        resize: 30x30
      - file: mdi:lightbulb-group
        id: main_lights
        resize: 160x160
      - file: mdi:fan-chevron-down
        id: main_fan_forward
        resize: 160x160
      - file: mdi:fan-chevron-up
        id: main_fan_reverse
        resize: 160x160
      - file: mdi:snowflake
        id: main_ac
        resize: 160x160
      - file: mdi:${window_cover_type}
        id: main_cover
        resize: 160x160
      - file: mdi:bell-ring-outline
        id: main_doorbell
        resize: 160x160
      - file: mdi:alpha-m-box
        id: manual_control
        resize: 50x50

spi:
  clk_pin: 18
  mosi_pin: 23

light:
  - platform: monochromatic
    output: backlight_pwm
    name: "Display Backlight"
    id: backlight
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_off:
      - display.page.show: current_time
  - platform: neopixelbus
    type: GRB
    variant: SK6812
    pin: 15
    num_leds: 10
    name: "LED Strips"
    id: led_strips
    effects:
      - pulse:
          name: Alarm
          transition_length: 1s
          update_interval: 2s
          min_brightness: 15%
          max_brightness: 100%
      - pulse:
          name: Slow Pulse
          transition_length: 2s
          update_interval: 2s
          min_brightness: 15%
          max_brightness: 100%
      - addressable_color_wipe:
          name: Doorbell
          colors:
            - red: 0%
              green: 0%
              blue: 0%
              num_leds: 8
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 2

display:
  - platform: ili9xxx
    id: interface_display
    model: m5stack
    dc_pin: 27
    reset_pin: 33
    cs_pin: 14
    invert_colors: true
    color_palette: 8BIT
    rotation: ${display_rotation}
    on_page_change:
      - to: current_time
        then:
          lambda: 'id(current_view).publish_state("current_time");'
      - to: main_door
        then:
          lambda: 'id(current_view).publish_state("main_door");'
      - to: lights
        then:
          lambda: 'id(current_view).publish_state("lights");'
      - to: fan
        then:
          lambda: 'id(current_view).publish_state("fan");'
      - to: ac
        then:
          lambda: 'id(current_view).publish_state("ac");'
      - to: cover
        then:
          lambda: 'id(current_view).publish_state("cover");'
    pages:
      - id: current_time
        lambda: |-
          // tabs
          it.image(id(width) * 0.375, id(height) * 0.825, id(tab_lights), ImageAlign::CENTER);
          it.image(id(width) * 0.625, id(height) * 0.825, id(tab_ac), ImageAlign::CENTER);
          it.image(id(width) * 0.875, id(height) * 0.825, id(tab_fan), ImageAlign::CENTER);

          id(draw_display_bottom_status_bar).execute();
          id(draw_display_main_time).execute();
          id(draw_display_borders).execute();
          
          // display date
          id(interface_display).strftime(id(width) * 0.5, id(height) * 0.6, id(small_time), TextAlign::CENTER, "%a %d %b %Y", id(homeassistant_time).now());
      - id: main_door
        lambda: |-
          // tabs
          it.image(id(width) * 0.375, id(height) * 0.825, id(tab_lights), ImageAlign::CENTER);
          it.image(id(width) * 0.625, id(height) * 0.825, id(tab_ac), ImageAlign::CENTER);
          it.image(id(width) * 0.875, id(height) * 0.825, id(tab_fan), ImageAlign::CENTER);

          id(draw_display_bottom_status_bar).execute();
          id(draw_display_main_doorbell).execute();
          id(draw_display_borders).execute();
      - id: lights
        lambda: |-
          // tabs
          it.image(id(width) * 0.375, id(height) * 0.825, id(tab_fan), ImageAlign::CENTER);
          it.image(id(width) * 0.625, id(height) * 0.825, id(tab_ac), ImageAlign::CENTER);
          it.image(id(width) * 0.875, id(height) * 0.825, id(tab_cover), ImageAlign::CENTER);

          id(draw_display_bottom_status_bar).execute();
          id(draw_display_main_lights).execute();
          id(draw_display_borders).execute();
      - id: fan
        lambda: |-
          // tabs
          it.image(id(width) * 0.375, id(height) * 0.825, id(tab_ac), ImageAlign::CENTER);
          it.image(id(width) * 0.625, id(height) * 0.825, id(tab_cover), ImageAlign::CENTER);
          it.image(id(width) * 0.875, id(height) * 0.825, id(tab_current_time), ImageAlign::CENTER);

          id(draw_display_bottom_status_bar).execute();
          id(draw_display_main_fan).execute();
          id(draw_display_borders).execute();
      - id: ac
        lambda: |-
          // tabs
          it.image(id(width) * 0.375, id(height) * 0.825, id(tab_cover), ImageAlign::CENTER);
          it.image(id(width) * 0.625, id(height) * 0.825, id(tab_current_time), ImageAlign::CENTER);
          it.image(id(width) * 0.875, id(height) * 0.825, id(tab_lights), ImageAlign::CENTER);

          id(draw_display_bottom_status_bar).execute();
          id(draw_display_main_ac).execute();
          id(draw_display_borders).execute();
      - id: cover
        lambda: |-
          // tabs
          it.image(id(width) * 0.375, id(height) * 0.825, id(tab_current_time), ImageAlign::CENTER);
          it.image(id(width) * 0.625, id(height) * 0.825, id(tab_lights), ImageAlign::CENTER);
          it.image(id(width) * 0.875, id(height) * 0.825, id(tab_fan), ImageAlign::CENTER);

          id(draw_display_bottom_status_bar).execute();
          id(draw_display_main_cover).execute();
          id(draw_display_borders).execute();