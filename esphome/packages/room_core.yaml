wifi:
  on_connect:
    - lambda: 'id(current_view).publish_state("current_time");'
    - lambda: 'id(current_command).publish_state("none");'

time:
  - platform: homeassistant
    id: homeassistant_time

globals:
  - id: height
    type: int
    initial_value: '320'
  - id: width
    type: int
    initial_value: '240'
  - id: initial_volume
    type: double
    initial_value: ${volume}

script:
  - id: reset_command
    then:
      - delay: 1s
      - if:
          condition:
            lambda: 'return id(current_command).state != "none";'
          then:
            - lambda: 'id(current_command).publish_state("none");'
    mode: queued
  - id: reset_view
    mode: restart
    then:
      - delay: 120s
      - display.page.show: current_time
  - id: doorbell
    mode: restart
    then:
      - number.set:
          id: speaker_volume
          value: 100
      - select.set:
          id: ringtone
          option: Doorbell
      - button.press: play_ringtone
      - display.page.show: main_door
      - light.turn_on:
          id: led_strips
          effect: Doorbell
      - delay: 5s
      - number.set:
          id: speaker_volume
          value: 10
      - delay: 5s
      - light.turn_off: led_strips
      - display.page.show: current_time
  - id: draw_display_main_time
    then:
      - lambda: |
          // display alarm
          if (id(room_next_alarm_imminent).state) {
            if (id(room_next_alarm_dismissable).state) {
              if (id(room_next_alarm_dismissed).state) {
                id(interface_display).image(id(width) * 0.325, id(height) * 0.125, id(main_alarm_off), ImageAlign::CENTER);            
                id(interface_display).printf(id(width) * 0.575, id(height) * 0.125, id(small_time), TextAlign::CENTER, "%s", id(next_alarm_timing).state.substr(0,5).c_str());
              } else {
                if (id(homeassistant_time).now().second % 2 == 0) {
                  id(interface_display).image(id(width) * 0.325, id(height) * 0.125, id(main_alarm), ImageAlign::CENTER, id(alarm_dismissable));
                }
                id(interface_display).printf(id(width) * 0.575, id(height) * 0.125, id(small_time), id(alarm_dismissable), TextAlign::CENTER, "%s", id(next_alarm_timing).state.substr(0,5).c_str());
              }
            } else {
              id(interface_display).image(id(width) * 0.325, id(height) * 0.125, id(main_alarm), ImageAlign::CENTER);            
              id(interface_display).printf(id(width) * 0.575, id(height) * 0.125, id(small_time), TextAlign::CENTER, "%s", id(next_alarm_timing).state.substr(0,5).c_str());
            }
          }

          // display time
          id(interface_display).strftime(id(width) * 0.25, id(height) * 0.35, id(main_time), TextAlign::CENTER, "%H", id(homeassistant_time).now());
          id(interface_display).strftime(id(width) * 0.75, id(height) * 0.35, id(main_time), TextAlign::CENTER, "%M", id(homeassistant_time).now());
          if (id(homeassistant_time).now().second % 2 == 0) {
            id(interface_display).print(id(width) * 0.5, id(height) * 0.325, id(main_time), TextAlign::CENTER, ":");
          }
  - id: draw_display_main_lights
    then:
      - lambda: |
          // tab
          if (id(lights_power).state) {
            id(interface_display).filled_rectangle(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.15, id(slider));
            id(interface_display).line(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.75, id(slider));
          }
          // main display
          if (id(lights_power).state) {
            id(interface_display).filled_rectangle(0, id(height) * (0.75 - (0.75 * (id(lights_brightness).state) / 255)), id(width), id(height) * (0.75 * (id(lights_brightness).state) / 255), id(slider));
            id(interface_display).image(id(width) * 0.5, id(height) * 0.375, id(main_lights), ImageAlign::CENTER, id(device_on));
          } else {
            id(interface_display).image(id(width) * 0.5, id(height) * 0.375, id(main_lights), ImageAlign::CENTER, id(device_off));
          }
  - id: draw_display_main_fan
    then:
      - lambda: |
          // tab
          if (id(fan_power).state) {
            id(interface_display).filled_rectangle(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.15, id(slider));
            id(interface_display).line(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.75, id(slider));
          }
          // main display
          if (id(fan_power).state) {
            id(interface_display).filled_rectangle(0, id(height) * (0.75 - (0.75 * id(fan_speed).state / 100)), id(width), id(height) * (0.75 * id(fan_speed).state / 100), id(slider));
            if (id(fan_direction).state == "forward") {
              id(interface_display).image(id(width) * 0.5, id(height) * 0.375, id(main_fan_forward), ImageAlign::CENTER, id(device_on));
            } else {
              id(interface_display).image(id(width) * 0.5, id(height) * 0.375, id(main_fan_reverse), ImageAlign::CENTER, id(device_on));
            }
          } else {
            if (id(fan_direction).state == "forward") {
              id(interface_display).image(id(width) * 0.5, id(height) * 0.375, id(main_fan_forward), ImageAlign::CENTER, id(device_off));
            } else {
              id(interface_display).image(id(width) * 0.5, id(height) * 0.375, id(main_fan_reverse), ImageAlign::CENTER, id(device_off));
            }
          }
          if (id(fan_auto_control).state) {
            id(interface_display).print(id(width) * 0.85, id(height) * 0.23, id(auto_control_indicator), id(auto_control), TextAlign::CENTER, "A");
          }
  - id: draw_display_main_ac
    then:
      - lambda: |
          // tab
          if (id(ac_mode).state == "cool") {
            id(interface_display).filled_rectangle(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.15, id(slider));
            id(interface_display).line(0, id(height) * 0.75, id(width) * 0.25, id(height) * 0.75, id(slider));
          }
          // main display
          if (id(ac_mode).state == "cool") {
            id(interface_display).filled_rectangle(0, id(height) * (0.75 - (0.75 * (id(ac_temp).state - 23) / 4)), id(width), id(height) * (0.75 * (id(ac_temp).state - 23) / 4), id(slider));
            id(interface_display).image(id(width) * 0.5, id(height) * 0.375, id(main_ac), ImageAlign::CENTER, id(device_on));
          } else {
            id(interface_display).image(id(width) * 0.5, id(height) * 0.375, id(main_ac), ImageAlign::CENTER, id(device_off));
          }
          if (id(fan_auto_control).state) {
            id(interface_display).image(id(width) * 0.85, id(height) * 0.23, id(fan_auto), ImageAlign::CENTER, id(auto_control));
          }
  - id: draw_display_main_doorbell
    then:
      - lambda: |
          id(interface_display).image(id(width) * 0.5, id(height) * 0.375, id(main_doorbell), ImageAlign::CENTER, id(device_on));
  - id: draw_display_borders
    then:
      - lambda: |
          id(interface_display).rectangle(0, 0, id(width), id(height), id(border));
          id(interface_display).line(id(width) * 0.25, id(height) * 0.75, id(width) * 0.25, id(height) * 0.9, id(border));
          id(interface_display).line(id(width) * 0.5, id(height) * 0.75, id(width) * 0.5, id(height) * 0.9, id(border));
          id(interface_display).line(id(width) * 0.75, id(height) * 0.75, id(width) * 0.75, id(height) * 0.9, id(border));
          id(interface_display).line(id(width) * 0.25, id(height) * 0.75, id(width), id(height) * 0.75, id(border));
          id(interface_display).line(0, id(height) * 0.9, id(width), id(height) * 0.9, id(border));
  - id: draw_display_bottom_status_bar
    then:
      - lambda: |
          id(interface_display).printf(id(width) * 0.5, id(height) * 0.95, id(status_bar), TextAlign::CENTER, "\U0000e846%.1fÂ°C \U0000f164%.1f%% \U0000f7e8%.0flx", id(room_temp).state, id(room_hum).state, id(room_lux).state);

select:
  - platform: template
    name: Ringtone
    id: ringtone
    icon: "mdi:music"
    optimistic: true
    options:
      - Beep
      - Positive Beep
      - Negative Beep
      - Doorbell
      - "Eli's Song"
      - Pokemon
      - Under the Sea
      - Take On Me
      - Mario
    initial_option: "Eli's Song"
    on_value:
      - text_sensor.template.publish:
          id: rtttl_string
          state: !lambda 'return id(ringtone).state;'
          
text_sensor:
  - platform: homeassistant
    id: fan_direction
    entity_id: fan.${core_room}_fan
    attribute: direction
  - platform: homeassistant
    id: ac_mode
    entity_id: climate.${core_room}_ac
  - platform: homeassistant
    id: next_alarm_timing
    entity_id: binary_sensor.next_alarm_imminent
    attribute: ${alarm_room}_next_alarm_time
  - platform: template
    id: current_view
    name: 'Current View'
  - platform: template
    id: current_command
    name: 'Current Command'
    on_value:
      - script.execute: 
          id: reset_command
  - platform: template
    id: rtttl_string
    filters:
      - map:
        - "Eli's Song -> elis_song:d=8,o=5,b=140:8a,8p,8g,8a,8g,8f,8p,8f,8p,8e,8d,8e,8g,8p,8p,8c6,8p,8g,8p,8a,8f,8p,8p,8p,8p,8e,8d,8e,8g,8p,8p,8c6,8p,8g,8p,8a,8f,8p,8p,8p,8p,8c,8a,8f,8f,8f,8p,8c,8p,8p,8c,8d,8c,8a4,8p,8f"
        - 'Beep -> beep:d=4,o=5,b=200:8c,4c'
        - 'Positive Beep -> positive_beep:d=4,o=5,b=200:4c4,8c,4c'
        - 'Negative Beep -> negative_beep:d=4,o=5,b=200:8c,4c,2c4'
        - 'Doorbell -> doorbell:d=4,o=5,b=200:8c4,4c4,4c'
        - 'Pokemon -> pokemon:d=4,o=5,b=180:8d6,8d6,8d6,8d6,8p,8d6,c6,8a#,f,p,8a#,d6,d6,8c6,8a#,c.6,1p, 8a#,8d#6,8d#6,d#6,8f6,d6,c6,a#,p,8a#,d6,8d6,c6,8a#,2d.6,p,8d6,8f6,8g6,8p,8d,8d,8 f,8g,8f,g,8p,8d,8f,8g'
        - 'Under the Sea -> under_the_sea:d=4,o=4,b=200:32p,8e6,8p,8d6,8c6,8p,1a5,8p,8d6,8p,8d6,8c6,8p,1e6,8p,8e6,8p,8d6,8c6,8p,8c6,f5,8e6,8p,8d6,8c6,8p,8b5,g5,8e6,8p,8d6,8c6,8p,2e6,p,8p,8e6,8p,8d6,8c6,8p,8a5,8c6,8p,8c6,8p,8a5,2d6,8p,8d6,8p,8c6,8d6,8p,8e6,8e6,8p,8d6,8p,8d6,c6'
        - 'Take On Me -> take_on_me:d=32,o=5,b=40:p,g,g,g,16d#,16c,16f,16f,f,a,a,a#,c6,a#,a#,a#,16f,16d#,16g,16g,g,f,f,g,f,g,g,g,16d#,16c,16f,16f,f,a,a,a#,c6,a#,a#,a#,16f,16d#,16g,16g,g,f,f,g,f'
        - 'Mario -> mario:d=4,o=5,b=100:16e6,16e6,32p,8e6,16c6,8e6,8g6,8p,8g,8p,8c6,16p,8g,16p,8e,16p,8a,8b,16a#,8a,16g.,16e6,16g6,8a6,16f6,8g6,8e6,16c6,16d6,8b,16p,8c6,16p,8g,16p,8e,16p,8a,8b,16a#,8a,16g.,16e6,16g6,8a6,16f6,8g6,8e6,16c6,16d6,8b,8p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16g#,16a,16c6,16p,16a,16c6,16d6,8p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16c7,16p,16c7,16c7,p,16g6,16f#6,16f6,16d#6,16p,16e6,16p,16g#,16a,16c6,16p,16a,16c6,16d6,8p,16d#6,8p,16d6,8p,16c6'

sensor:
  - platform: homeassistant
    id: lights_brightness
    entity_id: light.${core_room}_lights
    attribute: brightness
  - platform: homeassistant
    id: fan_speed
    entity_id: fan.${core_room}_fan
    attribute: percentage
  - platform: homeassistant
    id: ac_temp
    entity_id: climate.${core_room}_ac
    attribute: temperature
  - platform: homeassistant
    id: room_lux
    entity_id: sensor.${core_room}_lux

binary_sensor:
  - platform: homeassistant
    id: lights_power
    entity_id: light.${core_room}_lights
  - platform: homeassistant
    id: fan_power
    entity_id: fan.${core_room}_fan
  - platform: homeassistant
    id: fan_auto_control
    entity_id: automation.${core_room}_fan_auto_control
  - platform: homeassistant
    id: room_next_alarm_imminent
    entity_id: sensor.next_alarm_timings
    attribute: ${alarm_room}_next_alarm_imminent
  - platform: homeassistant
    id: room_next_alarm_dismissable
    entity_id: sensor.next_alarm_timings
    attribute: ${alarm_room}_next_alarm_dismissable
  - platform: homeassistant
    id: room_next_alarm_dismissed
    entity_id: input_boolean.${alarm_room}_next_alarm_dismissed
  - platform: gpio
    pin: 39
    name: 'Left Button'
    id: left_button
    filters:
      - invert:
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - script.execute: reset_view
          - if:
              condition:
                rtttl.is_playing
              then:
                - rtttl.stop
          - if:
              condition:
                light.is_on: backlight
              then:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - lambda: 'id(current_command).publish_state("lights_on");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "fan";'
                    then:
                      - lambda: 'id(current_command).publish_state("fan_on");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "ac";'
                    then:
                      - lambda: 'id(current_command).publish_state("ac_on");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "blinds";'
                    then:
                      - lambda: 'id(current_command).publish_state("blinds_open");'
      - timing:
          - ON for at least 1.5s
        then:
          - script.execute: reset_view
          - if:
              condition:
                rtttl.is_playing
              then:
                - rtttl.stop
          - if:
              condition:
                light.is_on: backlight
              then:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - while:
                          condition:
                            binary_sensor.is_on: left_button
                          then:
                            - lambda: 'id(current_command).publish_state("lights_brighten");'
                            - delay: 1.5s
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "fan";'
                    then:
                      - while:
                          condition:
                            binary_sensor.is_on: left_button
                          then:
                            - lambda: 'id(current_command).publish_state("fan_speed_up");'
                            - delay: 1.5s
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "ac";'
                    then:
                      - while:
                          condition:
                            binary_sensor.is_on: left_button
                          then:
                            - lambda: 'id(current_command).publish_state("ac_warmer");'
                            - delay: 1.5s
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - script.execute: reset_view
          - if:
              condition:
                rtttl.is_playing
              then:
                - rtttl.stop
          - if:
              condition:
                light.is_on: backlight
              then:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "current_time";'
                    then:
                      - if:
                          condition:
                            lambda: 'return id(room_next_alarm_dismissable).state;'
                          then:
                            - homeassistant.service:
                                service: input_boolean.turn_off
                                data:
                                  entity_id: input_boolean.${alarm_room}_next_alarm_dismissed
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - lambda: 'id(current_command).publish_state("set_recommended_room_scene");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "fan";'
                    then:
                      - lambda: 'id(current_command).publish_state("fan_reverse");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "ac";'
                    then:
                      - lambda: 'id(current_command).publish_state("cooling_auto_control");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "blinds";'
                    then:
                      - lambda: 'id(current_command).publish_state("blinds_auto_control");'
  - platform: gpio
    pin: 38
    name: 'Middle Button'
    filters:
      - invert:
    on_click:
      - script.execute: reset_view
      - if:
          condition:
            rtttl.is_playing
          then:
            - rtttl.stop
      - if:
          condition:
            light.is_on: backlight
          then:
            - if:
                condition:
                  display.is_displaying_page: current_time
                then:
                  display.page.show: lights
                else:
                  display.page.show_next: interface_display
  - platform: gpio
    pin: 37
    name: 'Right Button'
    id: right_button
    filters:
      - invert:
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - script.execute: reset_view
          - if:
              condition:
                rtttl.is_playing
              then:
                - rtttl.stop
          - if:
              condition:
                light.is_on: backlight
              then:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "current_time";'
                    then:
                      - light.turn_off: backlight
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - lambda: 'id(current_command).publish_state("lights_off");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "fan";'
                    then:
                      - lambda: 'id(current_command).publish_state("fan_off");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "ac";'
                    then:
                      - lambda: 'id(current_command).publish_state("ac_off");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "blinds";'
                    then:
                      - lambda: 'id(current_command).publish_state("blinds_close");'
      - timing:
          - ON for at least 1.5s
        then:
          - script.execute: reset_view
          - if:
              condition:
                rtttl.is_playing
              then:
                - rtttl.stop
          - if:
              condition:
                light.is_on: backlight
              then:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - while:
                          condition:
                            binary_sensor.is_on: right_button
                          then:
                            - lambda: 'id(current_command).publish_state("lights_darken");'
                            - delay: 1.5s
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "fan";'
                    then:
                      - while:
                          condition:
                            binary_sensor.is_on: right_button
                          then:
                            - lambda: 'id(current_command).publish_state("fan_slow_down");'
                            - delay: 1.5s
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "ac";'
                    then:
                      - while:
                          condition:
                            binary_sensor.is_on: right_button
                          then:
                            - lambda: 'id(current_command).publish_state("ac_colder");'
                            - delay: 1.5s
      - timing:
          - ON for at most 1s
          - OFF for at most 1s
          - ON for at most 1s
          - OFF for at least 0.5s
        then:
          - script.execute: reset_view
          - if:
              condition:
                rtttl.is_playing
              then:
                - rtttl.stop
          - if:
              condition:
                light.is_on: backlight
              then:
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "current_time";'
                    then:
                      - if:
                          condition:
                            lambda: 'return id(room_next_alarm_dismissable).state && !id(room_next_alarm_dismissed).state;'
                          then:
                            - homeassistant.service:
                                service: input_boolean.turn_on
                                data:
                                  entity_id: input_boolean.${alarm_room}_next_alarm_dismissed
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "lights";'
                    then:
                      - lambda: 'id(current_command).publish_state("turn_off_room");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "fan";'
                    then:
                      - lambda: 'id(current_command).publish_state("fan_forward");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "ac";'
                    then:
                      - lambda: 'id(current_command).publish_state("cooling_manual_control");'
                - if:
                    condition:
                      lambda: 'return id(current_view).state == "blinds";'
                    then:
                      - lambda: 'id(current_command).publish_state("blinds_manual_control");'

number:
  - platform: template
    id: speaker_volume
    name: Speaker Volume
    icon: mdi:volume-high
    unit_of_measurement: '%'
    min_value: 0
    max_value: 100
    step: 1
    optimistic: true
    initial_value: 10
    on_value:
      then:
        lambda: "return id(core_speaker).set_max_power(id(initial_volume) * x / 10);"

button:
  - platform: template
    name: Play Ringtone
    id: play_ringtone
    icon: "mdi:timer"
    on_press:
      then:
        - rtttl.play: !lambda 'return id(rtttl_string).state;'
  - platform: template
    name: Ring Doorbell
    id: ring_doorbell
    icon: "mdi:bell-ring-outline"
    on_press:
      then:
        - script.execute: doorbell

i2c:
  sda: 21
  scl: 22
  scan: true
  id: bus_a

output:
  - platform: ledc
    pin: 32
    id: backlight_pwm
  - platform: ledc
    pin: 25
    id: core_speaker
    max_power: ${volume}

rtttl:
  output: core_speaker
  id: rtttl_speaker

color:
  - id: border
    red: 50%
    green: 50%
    blue: 50%
  - id: device_on
    hex: FFC107
  - id: device_off
    hex: 4D729D
  - id: slider
    hex: 4D729D #41A7F2
  - id: auto_control
    hex: F2900F
  - id: alarm_dismissable
    hex: F2900F

font:
  - file: 
      type: gfonts
      family: Roboto
      weight: bold
    id: main_time
    size: 80
  - file: 
      type: gfonts
      family: Roboto
    id: small_time
    size: 30
    extras:
      - file: "gfonts://Material+Symbols+Outlined"
        glyphs: ["\U0000e425"] # mdi-timer
  - file: 
      type: gfonts
      family: Roboto
      weight: light
    id: status_bar
    size: 20
    extras:
      - file: "gfonts://Material+Symbols+Outlined"
        glyphs: ["\U0000e846","\U0000f164","\U0000f7e8"] #mdi-thermometer, mdi-humidity, mdi-brightness
  - file: 
      type: gfonts
      family: Roboto
      weight: bold
    id: auto_control_indicator
    size: 50

image:
  - file: mdi:clock-outline
    id: tab_current_time
    resize: 30x30
  - file: mdi:lightbulb-group
    id: tab_lights
    resize: 30x30
  - file: mdi:fan
    id: tab_fan
    resize: 30x30
  - file: mdi:snowflake
    id: tab_ac
    resize: 30x30
  - file: mdi:roller-shade
    id: tab_blinds
    resize: 30x30
  - file: mdi:fan-auto
    id: fan_auto
    resize: 50x50
  - file: mdi:alarm
    id: main_alarm
    resize: 30x30
  - file: mdi:alarm-off
    id: main_alarm_off
    resize: 30x30
  - file: mdi:lightbulb-group
    id: main_lights
    resize: 160x160
  - file: mdi:fan-chevron-down
    id: main_fan_forward
    resize: 160x160
  - file: mdi:fan-chevron-up
    id: main_fan_reverse
    resize: 160x160
  - file: mdi:snowflake
    id: main_ac
    resize: 160x160
  - file: mdi:roller-shade
    id: main_blinds
    resize: 160x160
  - file: mdi:bell-ring-outline
    id: main_doorbell
    resize: 160x160

spi:
  clk_pin: 18
  mosi_pin: 23

light:
  - platform: monochromatic
    output: backlight_pwm
    name: "Display Backlight"
    id: backlight
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_off:
      - display.page.show: current_time
  - platform: neopixelbus
    type: GRB
    variant: SK6812
    pin: 15
    num_leds: 10
    name: "LED Strips"
    id: led_strips
    effects:
      - pulse:
          name: Alarm
          transition_length: 1s
          update_interval: 2s
          min_brightness: 15%
          max_brightness: 100%
      - pulse:
          name: Slow Pulse
          transition_length: 2s
          update_interval: 2s
          min_brightness: 15%
          max_brightness: 100%
      - addressable_color_wipe:
          name: Doorbell
          colors:
            - red: 0%
              green: 0%
              blue: 0%
              num_leds: 8
            - red: 0%
              green: 100%
              blue: 0%
              num_leds: 2

display:
  - platform: ili9xxx
    id: interface_display
    model: m5stack
    dc_pin: 27
    reset_pin: 33
    cs_pin: 14
    rotation: ${display_rotation}
    on_page_change:
      - to: current_time
        then:
          lambda: 'id(current_view).publish_state("current_time");'
      - to: main_door
        then:
          lambda: 'id(current_view).publish_state("main_door");'
      - to: lights
        then:
          lambda: 'id(current_view).publish_state("lights");'
      - to: fan
        then:
          lambda: 'id(current_view).publish_state("fan");'
      - to: ac
        then:
          lambda: 'id(current_view).publish_state("ac");'
    pages:
      - id: current_time
        lambda: |-
          // tabs
          it.image(id(width) * 0.375, id(height) * 0.825, id(tab_lights), ImageAlign::CENTER);
          it.image(id(width) * 0.625, id(height) * 0.825, id(tab_ac), ImageAlign::CENTER);
          it.image(id(width) * 0.875, id(height) * 0.825, id(tab_fan), ImageAlign::CENTER);

          id(draw_display_borders).execute();
          id(draw_display_bottom_status_bar).execute();
          id(draw_display_main_time).execute();

          // display date
          id(interface_display).strftime(id(width) * 0.5, id(height) * 0.6, id(small_time), TextAlign::CENTER, "%a %d %b %Y", id(homeassistant_time).now());
      - id: main_door
        lambda: |-
          // tabs
          it.image(id(width) * 0.375, id(height) * 0.825, id(tab_lights), ImageAlign::CENTER);
          it.image(id(width) * 0.625, id(height) * 0.825, id(tab_ac), ImageAlign::CENTER);
          it.image(id(width) * 0.875, id(height) * 0.825, id(tab_fan), ImageAlign::CENTER);

          id(draw_display_borders).execute();
          id(draw_display_bottom_status_bar).execute();
          id(draw_display_main_doorbell).execute();
      - id: lights
        lambda: |-
          // tabs
          it.image(id(width) * 0.375, id(height) * 0.825, id(tab_fan), ImageAlign::CENTER);
          it.image(id(width) * 0.625, id(height) * 0.825, id(tab_ac), ImageAlign::CENTER);
          it.image(id(width) * 0.875, id(height) * 0.825, id(tab_current_time), ImageAlign::CENTER);

          id(draw_display_borders).execute();
          id(draw_display_bottom_status_bar).execute();
          id(draw_display_main_lights).execute();
      - id: fan
        lambda: |-
          // tabs
          it.image(id(width) * 0.375, id(height) * 0.825, id(tab_ac), ImageAlign::CENTER);
          it.image(id(width) * 0.625, id(height) * 0.825, id(tab_current_time), ImageAlign::CENTER);
          it.image(id(width) * 0.875, id(height) * 0.825, id(tab_lights), ImageAlign::CENTER);

          id(draw_display_borders).execute();
          id(draw_display_bottom_status_bar).execute();
          id(draw_display_main_fan).execute();
      - id: ac
        lambda: |-
          // tabs
          it.image(id(width) * 0.375, id(height) * 0.825, id(tab_current_time), ImageAlign::CENTER);
          it.image(id(width) * 0.625, id(height) * 0.825, id(tab_lights), ImageAlign::CENTER);
          it.image(id(width) * 0.875, id(height) * 0.825, id(tab_fan), ImageAlign::CENTER);

          id(draw_display_borders).execute();
          id(draw_display_bottom_status_bar).execute();
          id(draw_display_main_ac).execute();