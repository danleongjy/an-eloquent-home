external_components:
  - source: github://pr#5230
    components:
      - esp_adf
    refresh: 0s

esp_adf:

script:
  - id: reset_led
    then:
      - if:
          condition:
            - switch.is_on: use_wake_word
            - switch.is_on: use_listen_light
          then:
            - light.turn_on:
                id: led
                brightness: 60%
                effect: none
          else:
            - light.turn_off: led
  - id: check_timers
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          id(timers_running).publish_state(timers.size());
          
          if (timers.size() > 0) {
            const auto timers = id(va).get_timers();
            auto output_timer = timers.begin()->second;
            for (auto &iterable_timer : timers) {
              if (iterable_timer.second.seconds_left <= output_timer.seconds_left) {
                output_timer = iterable_timer.second;
              }
            }
            id(first_timer_seconds_left).publish_state(output_timer.seconds_left);
            id(first_timer_total_seconds).publish_state(output_timer.total_seconds);
          } else {
            id(first_timer_seconds_left).publish_state(0);
            id(first_timer_total_seconds).publish_state(0);
          }

sensor:
  - platform: template
    name: Timers Running
    id: timers_running
    unit_of_measurement: timers
    accuracy_decimals: 0
  - platform: template
    name: First Timer Seconds Left
    id: first_timer_seconds_left
    unit_of_measurement: s
    device_class: duration
    accuracy_decimals: 0
  - platform: template
    name: First Timer Total Seconds
    id: first_timer_total_seconds
    unit_of_measurement: s
    device_class: duration
    accuracy_decimals: 0

switch:
  - platform: template
    name: Use wake word
    id: use_wake_word
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_on:
      - lambda: id(va).set_use_wake_word(true);
      - if:
          condition:
            not:
              - voice_assistant.is_running
          then:
            - voice_assistant.start_continuous
      - script.execute: reset_led
    on_turn_off:
      - voice_assistant.stop
      - lambda: id(va).set_use_wake_word(false);
      - script.execute: reset_led
  - platform: template
    name: Use Listen Light
    id: use_listen_light
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_on:
      - script.execute: reset_led
    on_turn_off:
      - script.execute: reset_led

microphone:
  - platform: i2s_audio
    id: mic
    i2s_din_pin: ${mic_i2s_din_pin}
    adc_type: external
    pdm: True

voice_assistant:
  id: va
  microphone: mic
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  vad_threshold: 3
  on_listening:
    - homeassistant.service:
        service: media_player.play_media
        data:
          media_content_id: media-source://media_source/local/1_start.wav
          media_content_type: music
          entity_id: ${voice_assistant_media_player}
    - light.turn_on:
        id: led
        effect: "Slow Pulse"
  on_stt_vad_end:
    - homeassistant.service:
        service: media_player.play_media
        data:
          media_content_id: media-source://media_source/local/1_ok.wav
          media_content_type: music
          entity_id: ${voice_assistant_media_player}
    - light.turn_on:
        id: led
        effect: "Fast Pulse"
  on_tts_start:
    - light.turn_on:
        id: led
        brightness: 100%
        effect: none
  on_tts_end:
    - homeassistant.service:
        service: media_player.play_media
        data:
          media_content_id: !lambda 'return x;'
          media_content_type: audio/mpeg
          entity_id: ${voice_assistant_media_player}
  on_end:
    - delay: 100ms
    - script.execute: reset_led
  on_error:
    - light.turn_on:
        id: led
        brightness: 100%
        effect: none
    - delay: 1s
    - script.execute: reset_led
  on_timer_tick:
    - script.execute: check_timers
    - if:
        condition:
          lambda: 'return id(timers_running).state > 0;'
        then:
          - if:
              condition:
                lambda: 'return id(first_timer_seconds_left).state <= 3 && id(first_timer_seconds_left).state > 0;'
              then:
                - homeassistant.service:
                    service: media_player.play_media
                    data:
                      media_content_id: media-source://media_source/local/1_start.wav
                      media_content_type: music
                      entity_id: ${voice_assistant_media_player}
  on_timer_finished:
    - script.execute: check_timers
    - homeassistant.service:
        service: media_player.play_media
        data:
          media_content_id: media-source://media_source/local/1_end.wav
          media_content_type: music
          entity_id: ${voice_assistant_media_player}
    - delay: 1s
    - script.execute: check_timers
  on_client_connected:
    - script.execute: check_timers
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.start_continuous:
          - script.execute: reset_led
  on_client_disconnected:
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.stop:
          - light.turn_off: led
