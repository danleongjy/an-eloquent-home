turn_off_all:
  sequence:
  - data:
      skip_condition: true
    target:
      entity_id:
      - automation.playroom_motion_timeout
      - automation.yard_motion_timeout
      - automation.kitchen_motion_timeout
    action: automation.trigger
  - if:
    - condition: not
      conditions:
      - condition: state
        entity_id: media_player.kitchen_speaker
        state: 'off'
    then:
    - data: {}
      target:
        entity_id: media_player.kitchen_speaker
      action: media_player.media_stop
      continue_on_error: true
  - delay:
      hours: 0
      minutes: 0
      seconds: 0
      milliseconds: 300
  - data:
      skip_condition: true
    target:
      entity_id:
      - automation.master_bathroom_motion_timeout
    action: automation.trigger
  - if:
    - condition: or
      conditions:
      - condition: state
        entity_id: input_boolean.away_mode
        state: 'on'
      - condition: state
        entity_id: binary_sensor.elenas_room_door
        state: 'on'
    then:
    - action: automation.trigger
      metadata: {}
      data:
        skip_condition: true
      target:
        entity_id: automation.elenas_room_motion_timeout
    alias: Conditionally turn off Elena's Room
  - delay:
      hours: 0
      minutes: 0
      seconds: 0
      milliseconds: 300
  - alias: Conditionally turn off Parents' Room
    if:
    - condition: or
      conditions:
      - condition: state
        entity_id: input_boolean.away_mode
        state: 'on'
      - condition: state
        entity_id: binary_sensor.parents_room_doors
        state: 'on'
    then:
    - action: automation.trigger
      metadata: {}
      data:
        skip_condition: true
      target:
        entity_id: automation.parents_room_motion_timeout
  - if:
    - condition: or
      conditions:
      - condition: state
        entity_id: input_boolean.away_mode
        state: 'on'
      - condition: state
        entity_id: binary_sensor.elis_room_door
        state: 'on'
    then:
    - action: automation.trigger
      metadata: {}
      data:
        skip_condition: true
      target:
        entity_id: automation.elis_room_motion_timeout
    alias: Conditionally turn off Eli's Room
  - delay:
      hours: 0
      minutes: 0
      seconds: 0
      milliseconds: 300
  - data:
      skip_condition: true
    target:
      entity_id: automation.hallway_motion_timeout
    action: automation.trigger
  - delay:
      hours: 0
      minutes: 0
      seconds: 0
      milliseconds: 300
  - data:
      skip_condition: true
    target:
      entity_id: automation.junior_bathroom_motion_timeout
    action: automation.trigger
  - delay:
      hours: 0
      minutes: 0
      seconds: 0
      milliseconds: 300
  - if:
    - condition: or
      conditions:
      - condition: state
        entity_id: input_boolean.away_mode
        state: 'on'
      - condition: and
        conditions:
        - condition: state
          entity_id: binary_sensor.study_room_ethernet_connection
          state: 'off'
        - condition: state
          entity_id: binary_sensor.study_room_radar_occupancy
          state: 'off'
    then:
    - action: automation.trigger
      metadata: {}
      data:
        skip_condition: true
      target:
        entity_id: automation.study_room_motion_timeout
    alias: Conditionally turn off Study Room
  - data:
      skip_condition: true
    target:
      entity_id:
      - automation.powder_room_motion_timeout
    action: automation.trigger
  - if:
    - condition: not
      conditions:
      - condition: state
        entity_id: media_player.study_room_speaker
        state: 'off'
    then:
    - data: {}
      target:
        entity_id: media_player.study_room_speaker
      action: media_player.media_stop
      continue_on_error: true
  - delay:
      hours: 0
      minutes: 0
      seconds: 0
      milliseconds: 300
  - data:
      skip_condition: true
    target:
      entity_id:
      - automation.dining_room_motion_timeout
      - automation.living_room_motion_timeout
      - automation.dining_and_living_room_ac_motion_timeout
    action: automation.trigger
  - data: {}
    target:
      entity_id: switch.water_heater
    action: switch.turn_off
  mode: single
  alias: Turn Off All
  icon: mdi:home-export-outline
increment_alarm_day:
  alias: Increment Alarm Day
  fields:
    alarm_datetime:
      name: Alarm Datetime Helper
      description: A datetime helper containing the current datetime of the alarm
      required: true
      selector:
        entity:
          filter:
          - domain: input_datetime
    calendars:
      name: Work or School Day Calendars
      description: Calendars indicating work or school days.
      required: true
      selector:
        entity:
          multiple: true
          filter:
          - domain: calendar
  variables:
    off_time:
      events: []
  sequence:
  - service: calendar.get_events
    data:
      start_date_time: '{{ as_datetime(states(alarm_datetime)).replace(hour = 0, minute
        = 0) }}'
      end_date_time: '{{ as_datetime(states(alarm_datetime)).replace(hour = 0, minute
        = 0) + timedelta(days = 1) }}'
    target:
      entity_id: '{{ calendars }}'
    response_variable: work_school_day
    alias: List work/school days occurring on next alarm day
  - repeat:
      while:
      - or:
        - condition: template
          value_template: '{{ now().date() >= as_datetime(states(alarm_datetime)).date()
            }}'
          alias: Alarm day is not in the future
        - condition: template
          value_template: "{% set events = namespace(quantity = 0) %} {% for calendar
            in work_school_day %}\n  {% set events.quantity = events.quantity + work_school_day[calendar].events
            | length %}\n{% endfor %} {{ events.quantity == 0 }}\n"
          alias: Alarm day is not a work/school day
      sequence:
      - service: input_datetime.set_datetime
        data:
          date: '{{ as_datetime(states(alarm_datetime)).date() + timedelta(days =
            1) }}'
        target:
          entity_id: '{{ alarm_datetime }}'
        alias: Increment alarm by 1 day
      - service: calendar.get_events
        data:
          start_date_time: '{{ as_datetime(states(alarm_datetime)).replace(hour =
            0, minute = 0) }}'
          end_date_time: '{{ as_datetime(states(alarm_datetime)).replace(hour = 0,
            minute = 0) + timedelta(days = 1) }}'
        target:
          entity_id: '{{ calendars }}'
        response_variable: work_school_day
        alias: List work/school days occurring on next alarm day
    alias: Increment alarm by 1 day until it is a future day that is not an off day
  mode: parallel
  icon: mdi:alarm
nea_rain_radar_animation:
  alias: NEA Rain Radar Animation
  sequence:
  - repeat:
      for_each: "{% set start_time = (now() - timedelta(days = 1, minutes = 15)).replace(minute
        = (now() - timedelta(minutes = 15)).minute // 15 * 15) %} {% set missing_frames
        = namespace(frames = []) %} {% for i in range(97) %}\n  {% set current_frame
        = '/config/www/rain_radar/frames/dpsri_240km_' + (start_time + timedelta(minutes
        = 15 * i)).strftime('%Y%m%d%H%M') + '0000dBR.dpsri.png' %}\n  {% if current_frame
        not in state_attr('sensor.frames','file_list') %}\n    {% set missing_frames.frames
        = missing_frames.frames + [current_frame] %}\n  {% endif %}\n{% endfor %}
        {{ missing_frames.frames }}\n"
      sequence:
      - service: downloader.download_file
        data:
          overwrite: false
          url: https://www.nea.gov.sg/docs/default-source/rain-area-240km/{{ repeat.item.split('/')[-1]
            }}
          filename: '{{ repeat.item.split(''/'')[-1] }}'
      - delay: 2
  - service: shell_command.removeoldrainradar
    data: {}
  - service: shell_command.removeoldrainradaranimation
    data: {}
  - delay:
      hours: 0
      minutes: 0
      seconds: 2
      milliseconds: 0
  - service: pyscript.compile_rain_radar_animation
    data: {}
  mode: single
  icon: mdi:weather-cloudy
set_recommended_scene:
  alias: Set Recommended Scene
  sequence:
  - repeat:
      sequence:
      - action: automation.turn_on
        target:
          entity_id: '{{ states.automation | selectattr(''entity_id'', ''search'',
            repeat.item + ''_motion'') | rejectattr(''entity_id'',''search'',''timeout'')
            | map(attribute = ''entity_id'') | list }}

            '
      - action: automation.trigger
        data:
          skip_condition: true
        target:
          entity_id: '{{ states.automation | selectattr(''entity_id'', ''search'',
            repeat.item + ''_motion'') | rejectattr(''entity_id'',''search'',''timeout'')
            | map(attribute = ''entity_id'') | list }}

            '
      - if:
        - condition: template
          value_template: '{{ states(room_cover_automation[repeat.item]) != ''unknown''
            }}'
        then:
        - action: automation.turn_on
          target:
            entity_id: '{{ room_cover_automation[repeat.item] }}'
        - action: automation.trigger
          target:
            entity_id: '{{ room_cover_automation[repeat.item] }}'
          data:
            skip_condition: true
      - if:
        - condition: template
          value_template: '{{ states(''automation.'' + repeat.item + ''_fan_auto_control'')
            != ''unknown'' }}'
        then:
        - action: automation.turn_on
          target:
            entity_id: '{{ ''automation.'' + repeat.item + ''_fan_auto_control'' }}'
      for_each: '{{ room }}'
  mode: parallel
  icon: mdi:magic-staff
  max: 15
  variables:
    room_cover_automation:
      elenas_room: automation.elenas_room_curtains_auto_control
      elis_room: automation.elis_room_curtains_auto_control
      dining_room: automation.south_facing_blinds_auto_control
      living_room: automation.south_facing_blinds_auto_control
      study_room: automation.south_facing_blinds_auto_control
      parents_room: automation.master_bathroom_blind_auto_control
      kitchen: automation.kitchen_blind_auto_control
  fields:
    room:
      name: Room
      description: The room to set the recommended scene in
      selector:
        select:
          options:
          - label: Parents' Room
            value: parents_room
          - label: Master Bathroom
            value: master_bathroom
          - label: Kitchen
            value: kitchen
          - label: Study Room
            value: study_room
          - label: Living Room
            value: living_room
          - label: Dining Room
            value: dining_room
          - label: Playroom
            value: playroom
          - label: Yard
            value: yard
          - label: Hallway
            value: hallway
          - label: Powder Room
            value: powder_room
          - label: Junior Bathroom
            value: junior_bathroom
          - label: Eli's Room
            value: elis_room
          - label: Elena's Room
            value: elenas_room
          multiple: true
      required: true
recommended_light_level:
  alias: Recommended Light Level
  sequence:
  - variables:
      lights_dim_start:
        light.elenas_room_lights: input_datetime.wind_down
        light.elenas_room_bedside_lamp: input_datetime.dim_hours_end
        light.elis_room_lights: input_datetime.wind_down
        light.elis_room_floor_lamp: input_datetime.dim_hours_end
        light.parents_room_lights: input_datetime.wind_down
        light.parents_room_core_led_strips: input_datetime.dim_hours_end
        light.master_bathroom_light_entity: input_datetime.wind_down
        light.master_bathroom_pendant_light_entity: input_datetime.wind_down
      lights_dim_end:
        light.elenas_room_lights: input_datetime.sleep_hours_end
        light.elis_room_lights: input_datetime.sleep_hours_end
        light.parents_room_lights: input_datetime.sleep_hours_end
        light.master_bathroom_light_entity: input_datetime.sleep_hours_end
        light.master_bathroom_pendant_light_entity: input_datetime.sleep_hours_end
    alias: Define Dim Hours for each light
  - variables:
      dim_start: "{% if lights_dim_start[light] is defined %}\n  {{ lights_dim_start[light]
        }}\n{% else %}\n  input_datetime.dim_hours_start\n{% endif %}\n"
      dim_end: "{% if lights_dim_end[light] is defined %}\n  {{ lights_dim_end[light]
        }}\n{% else %}\n  input_datetime.dim_hours_end\n{% endif %}\n"
  - variables:
      light_brightness: "{% if states(dim_start) != states(dim_end) %}\n  {% if (now()
        > today_at(states(dim_start)) and now() <= today_at('23:59')) or (now() >=
        today_at('00:00') and now() <= today_at(states(dim_end))) %}\n    {{ states('input_number.night_light_brightness')
        | float }}\n  {% elif is_state('sun.sun','below_horizon') and state_attr('sun.sun','rising')
        %}\n    {{ states('input_number.morning_light_brightness') | float }}\n  {%
        else %}\n    100\n  {% endif %}\n{% else %}\n  100\n{% endif %}"
  - if:
    - condition: template
      value_template: '{{ turn_on | default(true) }}'
    then:
    - target:
        entity_id: '{{ light }}'
      data:
        brightness_pct: '{{ light_brightness }}'
      action: light.turn_on
    else:
    - target:
        entity_id: '{{ light }}'
      action: light.turn_off
  mode: parallel
  icon: mdi:lightbulb-on-70
  max: 15
  fields:
    light:
      selector:
        entity:
          filter:
            domain: light
      name: Light
      description: The light on which to set the recommended level
      required: true
    turn_on:
      selector:
        boolean: {}
      name: Turn On
      description: Whether to turn on the light
      default: true
      required: false
alarm_lights:
  alias: Alarm Lights
  sequence:
  - target:
      entity_id: '{{ [''light.'' + bedroom + ''_lights'',''light.'' + bedroom + ''_core_led_strips''
        ] }}'
    action: light.turn_off
  - delay: 5
  - target:
      entity_id: '{{ ''light.'' + bedroom + ''_core_display_backlight'' }}'
    data:
      brightness_pct: '{{ states(''input_number.morning_light_brightness'') | int
        if is_state(''sun.sun'',''below_horizon'') else 100 }}'
    action: light.turn_on
  - target:
      entity_id: '{{ ''light.'' + bedroom + ''_core_led_strips'' }}'
    data:
      rgb_color:
      - 229
      - 208
      - 164
      effect: '{{ led_effect }}'
    action: light.turn_on
  - target:
      entity_id: '{{ ''select.'' + bedroom + ''_core_ringtone'' }}'
    data:
      option: '{{ ringtone }}'
    action: select.select_option
  - action: number.set_value
    target:
      entity_id: '{{ ''number.'' + bedroom + ''_core_speaker_volume'' }}'
    data:
      value: 10
  - target:
      entity_id: '{{ ''button.'' + bedroom + ''_core_play_ringtone'' }}'
    action: button.press
  - delay: 25
  - if:
    - condition: template
      value_template: '{{ is_state(''input_boolean.'' + bedroom + ''_next_alarm_armed'',
        ''on'') }}'
    then:
    - target:
        entity_id: '{{ ''select.'' + bedroom + ''_core_ringtone'' }}'
      data:
        option: Beep
      action: select.select_option
    - action: number.set_value
      target:
        entity_id: '{{ ''number.'' + bedroom + ''_core_speaker_volume'' }}'
      data:
        value: 10
    - repeat:
        sequence:
        - target:
            entity_id: '{{ ''light.'' + bedroom + ''_lights'' }}'
          action: light.toggle
        - target:
            entity_id: '{{ ''button.'' + bedroom + ''_core_play_ringtone'' }}'
          action: button.press
        - delay: 2
        while:
        - condition: template
          value_template: '{{ not ''on'' in states.binary_sensor | selectattr(''attributes.device_class'',
            ''defined'') | selectattr(''attributes.device_class'', ''eq'', ''door'')
            | selectattr(''entity_id'',''search'',bedroom) | map(attribute = ''state'')
            | list }}'
  - data:
      brightness_pct: "{% if is_state('sun.sun', 'below_horizon') %}\n  {{ states('input_number.morning_light_brightness')
        }}\n{% else %}\n  100\n{% endif %}\n"
    target:
      entity_id: '{{ ''light.'' + bedroom + ''_lights'' }}'
    action: light.turn_on
  - target:
      entity_id: '{{ ''light.'' + bedroom + ''_core_led_strips'' }}'
    action: light.turn_off
  mode: parallel
  icon: mdi:alarm
  max: 5
  fields:
    bedroom:
      selector:
        select:
          options:
          - label: Parents' Room
            value: parents_room
          - label: Eli's Room
            value: elis_room
          - label: Elena's Room
            value: elenas_room
      name: Bedroom
      description: The bedroom to run the alarm in
      required: true
    ringtone:
      selector:
        select:
          options:
          - Beep
          - Positive Beep
          - Negative Beep
          - Eli's Song
          - Pokemon
          - Under the Sea
          - Take On Me
          - Mario
          - Bippity Boppity Boo
      name: Ringtone
      description: Ringtone to play for the alarm
      required: true
      default: Eli's Song
    led_effect:
      selector:
        text:
      name: LED Effect
      default: Alarm
      required: true
git_push:
  alias: Git Push
  fields:
    commit_message:
      name: Commit Message
      description: Message to attach to the Git commit
      selector:
        text:
      required: true
  sequence:
  - data:
      create_file: true
      send_notification: false
      parse_config: false
      chunk_size: false
    action: watchman.report
  - data: {}
    action: readme.generate
    enabled: true
  - delay: 5
  - data: {}
    action: shell_command.gitadd
  - data:
      commit_message: '{{ commit_message }}'
    action: shell_command.gitcommit
  - data: {}
    enabled: true
    action: shell_command.gitpush
  mode: single
  icon: mdi:git
automation_on_off_indicator_light:
  alias: Automation On/Off Indicator Light
  fields:
    flash_once:
      name: Flash Once for On
      description: Set to True to flash once for On, or False to flash twice for Off
      default: true
      selector:
        boolean:
      required: true
    indicator_light:
      name: Indicator Light
      description: The light to flash when the automation turns on or off
      selector:
        entity:
          filter:
          - domain:
            - light
      required: true
  sequence:
  - if:
    - condition: template
      value_template: '{{ flash_once }}'
    then:
    - if:
      - condition: template
        value_template: '{{ is_state(indicator_light, ''on'') }}'
      then:
      - data:
          flash: short
        target:
          entity_id: '{{ indicator_light }}'
        action: light.turn_on
      else:
      - data:
          flash: short
        target:
          entity_id: '{{ indicator_light }}'
        action: light.turn_on
      - delay: 1
      - target:
          entity_id: '{{ indicator_light }}'
        action: light.turn_off
    else:
    - if:
      - condition: template
        value_template: '{{ is_state(indicator_light, ''on'') }}'
      then:
      - repeat:
          count: 2
          sequence:
          - data:
              flash: short
            target:
              entity_id: '{{ indicator_light }}'
            action: light.turn_on
          - delay: 1
      else:
      - repeat:
          count: 2
          sequence:
          - data:
              flash: short
            target:
              entity_id: '{{ indicator_light }}'
            action: light.turn_on
          - delay: 1
      - target:
          entity_id: '{{ indicator_light }}'
        action: light.turn_off
  mode: parallel
  icon: mdi:lightbulb-on
stove_settings:
  alias: Stove Settings
  sequence:
  - if:
    - condition: template
      value_template: '{{ current_burner_power is defined }}'
    then:
    - service: select.select_option
      data:
        option: '{{ current_burner_power }}'
      target:
        entity_id: select.stove_current_burner_power
  - if:
    - condition: template
      value_template: '{{ current_burner_timer is defined }}'
    then:
    - service: number.set_value
      data:
        value: '{{ current_burner_timer }}'
      target:
        entity_id: number.stove_current_burner_timer
  mode: queued
  icon: mdi:stove
  fields:
    current_burner_power:
      selector:
        number:
          min: 0
          max: 9
          step: 1
      name: Current Burner Power
      description: Power level to set the current burner
      required: false
    current_burner_timer:
      selector:
        number:
          min: 0
          max: 99
          step: 1
      name: Current Burner Timer
      description: Number of minutes to turn on the current burner at current settings
      required: false
  max: 10
vacuum_selected_rooms:
  alias: Vacuum Selected Rooms
  sequence:
  - action: dreame_vacuum.vacuum_clean_segment
    metadata: {}
    data:
      segments: '{{ rooms | map(''int'') | list }}'
    target:
      entity_id: vacuum.hestia
  mode: single
  icon: mdi:home-plus-outline
  fields:
    rooms:
      selector:
        select:
          options:
          - label: Elena's Room
            value: '8'
          - label: Eli's Room
            value: '7'
          - label: Hallway
            value: '10'
          - label: Dining Room
            value: '5'
          - label: Living Room
            value: '4'
          - label: Study Room
            value: '14'
          - label: Parents' Room
            value: '1'
          - label: Kitchen
            value: '3'
          - label: Playroom
            value: '6'
          - label: Yard
            value: '12'
          multiple: true
      name: Rooms
      description: The rooms to clean in the intended cleaning order
      required: true
      default:
      - '8'
      - '7'
      - '10'
      - '5'
      - '4'
      - '14'
      - '1'
      - '3'
      - '6'
      - '12'
botc_day_night_toggle:
  alias: BotC Day Night Toggle
  sequence:
  - repeat:
      sequence:
      - if:
        - or:
          - condition: template
            value_template: '{{ repeat.item.door == ''none'' }}'
          - condition: template
            value_template: '{{ is_state(repeat.item.door, ''on'') }}'
        then:
        - if:
          - condition: template
            value_template: '{{ is_state(repeat.item.light, ''on'') }}'
          then:
          - if:
            - condition: template
              value_template: '{{ set_day }}'
            then:
            - metadata: {}
              data:
                transition: 10
                brightness_pct: 100
              target:
                entity_id: '{{ repeat.item.light }}'
              action: light.turn_on
            - delay: 10
            else:
            - metadata: {}
              data:
                transition: 10
                brightness_pct: 10
              target:
                entity_id: '{{ repeat.item.light }}'
              action: light.turn_on
            - delay: 10
      for_each:
      - light: light.elenas_room_lights
        door: binary_sensor.elenas_room_door
      - light: light.elis_room_lights
        door: binary_sensor.elis_room_door
      - light: light.yard_light_entity
        door: none
      - light: light.playroom_lights
        door: none
      - light: light.hallway_lights
        door: none
      - light: light.dining_room_lights
        door: none
      - light: light.kitchen_lights
        door: none
      - light: light.parents_room_lights
        door: binary_sensor.parents_room_door
      - light: light.study_room_lights
        door: none
  - condition: template
    value_template: '{{ not set_day }}'
  - action: media_player.volume_set
    metadata: {}
    data:
      volume_level: 0.8
    target:
      entity_id: media_player.all_speakers
    enabled: true
  - action: media_player.play_media
    metadata: {}
    data:
      media_content_id: https://an-eloquent-home.duckdns.org/media/local/clocktower.mp3
      media_content_type: music
    target:
      entity_id: media_player.all_speakers
    enabled: true
  description: Set lights to day or night mode for BotC games
  icon: mdi:theme-light-dark
  fields:
    set_day:
      selector:
        boolean: {}
      name: Set Day
      description: Turn on to set day mode or off to set night mode
      default: true
      required: true
  mode: parallel
  max: 5
fan_controller:
  alias: Fan Controller
  fields:
    fan:
      name: Fan
      description: The fan to control
      selector:
        entity:
          filter:
          - domain: fan
      required: true
    command:
      name: Command
      description: The command for the fan to execute
      selector:
        select:
          options:
          - label: Turn On
            value: fan_on
          - label: Turn Off
            value: fan_off
          - label: Speed Up
            value: fan_speed_up
          - label: Slow Down
            value: fan_slow_down
          - label: Reverse
            value: fan_reverse
          - label: Forward
            value: fan_forward
          - label: Fan Auto Control
            value: fan_auto_control
          - label: Fan Manual Control
            value: fan_manual_control
      required: true
  sequence:
  - variables:
      fan_automations:
        fan.elenas_room_fan: automation.elenas_room_fan_auto_control
        fan.elis_room_fan: automation.elis_room_fan_auto_control
        fan.dining_room_fan: automation.dining_room_fan_auto_control
        fan.living_room_fan: automation.living_room_fan_auto_control
        fan.parents_room_fan: automation.parents_room_fan_auto_control
        fan.study_room_fan: automation.study_room_fan_auto_control
      indicator_lights:
        fan.elenas_room_fan: light.elenas_room_bulb_1_entity
        fan.elis_room_fan: light.elis_room_bulb_3_entity
        fan.dining_room_fan: light.dining_room_bulb_4_entity
        fan.living_room_fan: light.living_room_bulb_2_entity
        fan.parents_room_fan: light.parents_room_bulb_3_entity
        fan.study_room_fan: light.study_room_bulb_4_entity
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ command == ''fan_on'' }}'
      sequence:
      - action: automation.trigger
        target:
          entity_id: automation.{{ fan.split('.')[1] }}_auto_control
    - conditions:
      - condition: template
        value_template: '{{ command == ''fan_off'' }}'
      sequence:
      - action: fan.turn_off
        target:
          entity_id: '{{ fan }}'
    - conditions:
      - condition: template
        value_template: '{{ command == ''fan_speed_up'' }}'
      sequence:
      - action: automation.turn_off
        target:
          entity_id: automation.{{ fan.split('.')[1] }}_auto_control
      - action: fan.increase_speed
        target:
          entity_id: '{{ fan }}'
    - conditions:
      - condition: template
        value_template: '{{ command == ''fan_slow_down'' }}'
      sequence:
      - if:
        - condition: template
          value_template: '{{ state_attr(fan, ''percentage'') | int(0) < 20 }}'
        then:
        - action: fan.turn_off
          target:
            entity_id: '{{ fan }}'
        else:
        - action: automation.turn_off
          target:
            entity_id: automation.{{ fan.split('.')[1] }}_auto_control
        - action: fan.decrease_speed
          target:
            entity_id: '{{ fan }}'
    - conditions:
      - condition: template
        value_template: '{{ command == ''fan_reverse'' }}'
      sequence:
      - action: automation.turn_off
        target:
          entity_id: automation.{{ fan.split('.')[1] }}_auto_control
      - action: fan.set_direction
        data:
          direction: reverse
        target:
          entity_id: '{{ fan }}'
    - conditions:
      - condition: template
        value_template: '{{ command == ''fan_forward'' }}'
      sequence:
      - action: automation.turn_off
        target:
          entity_id: automation.{{ fan.split('.')[1] }}_auto_control
      - action: fan.set_direction
        data:
          direction: forward
        target:
          entity_id: '{{ fan }}'
    - conditions:
      - condition: template
        value_template: '{{ command == ''fan_auto_control'' }}'
      sequence:
      - condition: template
        value_template: '{{ is_state(fan_automations[fan], ''off'') }}'
      - action: automation.turn_on
        target:
          entity_id: '{{ fan_automations[fan] }}'
      - condition: or
        conditions:
        - condition: time
          before: input_datetime.sleep_hours_start
          after: input_datetime.sleep_hours_end
        - condition: template
          value_template: '{{ fan in [''fan.dining_room_fan'',''fan.living_room_fan'',''fan.study_room_fan'']
            }}'
      - action: script.automation_on_off_indicator_light
        data:
          flash_once: true
          indicator_light: '{{ indicator_lights[fan] }}'
    - conditions:
      - condition: template
        value_template: '{{ command == ''fan_manual_control'' }}'
      sequence:
      - condition: template
        value_template: '{{ is_state(fan_automations[fan], ''on'') }}'
      - action: automation.turn_off
        target:
          entity_id: '{{ fan_automations[fan] }}'
      - condition: or
        conditions:
        - condition: time
          before: input_datetime.sleep_hours_start
          after: input_datetime.sleep_hours_end
        - condition: template
          value_template: '{{ fan in [''fan.dining_room_fan'',''fan.living_room_fan'',''fan.study_room_fan'']
            }}'
      - action: script.automation_on_off_indicator_light
        data:
          indicator_light: '{{ indicator_lights[fan] }}'
  description: Set fan state with physical controls
  icon: mdi:fan
  mode: parallel
  max: 6
lights_controller:
  alias: Lights Controller
  sequence:
  - variables:
      motion_timeout_automations:
        Yard:
        - automation.yard_motion_timeout
        Playroom:
        - automation.playroom_motion_timeout
        Junior Bathroom:
        - automation.junior_bathroom_motion_timeout
        Powder Room:
        - automation.powder_room_motion_timeout
        Elena's Room:
        - automation.elenas_room_motion_timeout
        Eli's Room:
        - automation.elis_room_motion_timeout
        Hallway:
        - automation.hallway_motion_timeout
        Dining Room:
        - automation.dining_room_motion_timeout
        - automation.dining_and_living_room_ac_motion_timeout
        Living Room:
        - automation.living_room_motion_timeout
        - automation.dining_and_living_room_ac_motion_timeout
        Study Room:
        - automation.study_room_motion_timeout
        Parents' Room:
        - automation.parents_room_motion_timeout
        Master Bathroom:
        - automation.master_bathroom_motion_timeout
        Kitchen:
        - automation.kitchen_motion_timeout
      lights_automations:
        Elena's Room:
        - automation.elenas_room_motion_lights
        Eli's Room:
        - automation.elis_room_motion_floor_lamp
        - automation.elis_room_motion_lights
        Junior Bathroom:
        - automation.junior_bathroom_motion_lights
        Powder Room:
        - automation.powder_room_motion_pendant_light
        Hallway:
        - automation.hallway_motion_lights
        Yard:
        - automation.yard_motion_light
        Playroom:
        - automation.playroom_motion_lights
        Dining Room:
        - automation.dining_room_motion_lights
        - automation.dining_room_motion_pendant_light
        Living Room:
        - automation.living_room_motion_lights
        - automation.living_room_motion_pendant_light
        Study Room:
        - automation.study_room_motion_lights
        - automation.study_room_motion_floor_lamp
        Parents' Room:
        - automation.parents_room_motion_bedside_lamp
        - automation.parents_room_motion_lights
        Master Bathroom:
        - automation.master_bathroom_motion_light
        - automation.master_bathroom_motion_pendant_light
        Kitchen:
        - automation.kitchen_motion_lights
      indicator_lights:
        Elena's Room: light.elenas_room_bulb_2_entity
        Eli's Room: light.elis_room_bulb_2_entity
        Junior Bathroom: light.junior_bathroom_pendant_light_entity
        Powder Room: light.powder_room_pendant_light_entity
        Hallway: light.hallway_bulb_2_entity
        Yard: light.yard_light_entity
        Playroom: light.playroom_bulb_2_entity
        Dining Room: light.dining_room_bulb_2_entity
        Living Room: light.living_room_bulb_2_entity
        Study Room: light.study_room_bulb_2_entity
        Parents' Room: light.parents_room_bulb_2_entity
        Master Bathroom: light.master_bathroom_light_entity
        Kitchen: light.kitchen_bulb_2_entity
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ command == ''lights_on'' }}'
      sequence:
      - repeat:
          for_each: '{{ lights }}'
          sequence:
          - action: script.recommended_light_level
            data:
              light: '{{ repeat.item }}'
    - conditions:
      - condition: template
        value_template: '{{ command == ''lights_off'' }}'
      sequence:
      - action: light.turn_off
        target:
          entity_id: '{{ lights }}'
    - conditions:
      - condition: template
        value_template: '{{ command == ''lights_brighten'' }}'
      sequence:
      - action: light.turn_on
        data:
          brightness_step_pct: '{{ states(''input_number.light_brightness_change_step'')
            }}'
        target:
          entity_id: '{{ lights }}'
    - conditions:
      - condition: template
        value_template: '{{ command == ''lights_darken'' }}'
      sequence:
      - action: light.turn_on
        data:
          brightness_step_pct: -{{ states('input_number.light_brightness_change_step')
            }}
        target:
          entity_id: '{{ lights }}'
    - conditions:
      - condition: template
        value_template: '{{ command == ''set_recommended_room_scene'' }}'
      sequence:
      - action: script.set_recommended_scene
        data:
          room: "{% set turnoff_entities = namespace(areas = []) %} {% for light in
            lights %}\n  {% set turnoff_entities.areas = turnoff_entities.areas +
            [area_name(light).lower().replace(' ','_').replace(\"'\",'')] %}\n{% endfor
            %} {{ turnoff_entities.areas | unique | list }}\n"
    - conditions:
      - condition: template
        value_template: '{{ command == ''turn_off_room'' }}'
      sequence:
      - action: automation.trigger
        data:
          skip_condition: true
        target:
          entity_id: "{% set turnoff_entities = namespace(areas = [], automations
            = []) %} {% for light in lights %}\n  {% set turnoff_entities.areas =
            turnoff_entities.areas + [area_name(light)] %}\n{% endfor %} {% for area
            in turnoff_entities.areas %}\n  {% set turnoff_entities.automations =
            turnoff_entities.automations + motion_timeout_automations[area] %}\n{%
            endfor %} {{ turnoff_entities.automations | unique | list }}\n"
    - conditions:
      - condition: template
        value_template: '{{ command == ''lights_auto_control'' }}'
      sequence:
      - variables:
          areas: "{% set output = namespace(areas = []) %}\n{% for light in lights
            %}\n  {% if area_name(light) not in output.areas %}\n    {% set output.areas
            = output.areas + [area_name(light)] %}\n  {% endif %}\n{% endfor %}\n{{
            output.areas }}\n"
          automations: "{% set output = namespace(automations = []) %}\n{% for area
            in areas %}\n  {% set output.automations = output.automations + lights_automations[area]
            %}\n{% endfor %}\n{{ output.automations }}\n"
      - condition: template
        value_template: '{{ ''off'' in states.automation | selectattr(''entity_id'',
          ''in'', automations) | map(attribute = ''state'') | list }}'
      - action: automation.turn_on
        target:
          entity_id: '{{ automations }}'
      - repeat:
          for_each: '{{ areas }}'
          sequence:
          - condition: or
            conditions:
            - condition: time
              before: input_datetime.sleep_hours_start
              after: input_datetime.sleep_hours_end
            - condition: template
              value_template: '{{ repeat.item not in ["Elena''s Room","Eli''s Room","Parents''
                Room"] }}'
          - action: script.automation_on_off_indicator_light
            data:
              flash_once: true
              indicator_light: '{{ indicator_lights[repeat.item] }}'
    - conditions:
      - condition: template
        value_template: '{{ command == ''lights_manual_control'' }}'
      sequence:
      - variables:
          areas: "{% set output = namespace(areas = []) %}\n{% for light in lights
            %}\n  {% if area_name(light) not in output.areas %}\n    {% set output.areas
            = output.areas + [area_name(light)] %}\n  {% endif %}\n{% endfor %}\n{{
            output.areas }}\n"
          automations: "{% set output = namespace(automations = []) %}\n{% for area
            in areas %}\n  {% set output.automations = output.automations + lights_automations[area]
            %}\n{% endfor %}\n{{ output.automations }}\n"
      - condition: template
        value_template: '{{ ''on'' in states.automation | selectattr(''entity_id'',
          ''in'', automations) | map(attribute = ''state'') | list }}'
      - action: automation.turn_off
        target:
          entity_id: '{{ automations }}'
      - repeat:
          for_each: '{{ areas }}'
          sequence:
          - condition: or
            conditions:
            - condition: time
              before: input_datetime.sleep_hours_start
              after: input_datetime.sleep_hours_end
            - condition: template
              value_template: '{{ repeat.item not in ["Elena''s Room","Eli''s Room","Parents''
                Room"] }}'
          - action: script.automation_on_off_indicator_light
            data:
              flash_once: false
              indicator_light: '{{ indicator_lights[repeat.item] }}'
  fields:
    lights:
      name: Lights
      description: The lights to control
      selector:
        entity:
          filter:
          - domain: light
          multiple: true
      required: true
    command:
      name: Command
      description: The command for the lights to execute
      selector:
        select:
          options:
          - label: Turn On
            value: lights_on
          - label: Turn Off
            value: lights_off
          - label: Brighten
            value: lights_brighten
          - label: Darken
            value: lights_darken
          - label: Set Recommended Room Scene
            value: set_recommended_room_scene
          - label: Turn Off Room
            value: turn_off_room
          - label: Lights Auto Control
            value: lights_auto_control
          - label: Lights Manual Control
            value: lights_manual_control
      required: true
  description: Set lights state with physical controls
  icon: mdi:lightbulb-group
  mode: parallel
  max: 12
ac_controller:
  alias: AC Controller
  sequence:
  - variables:
      cooling_automations:
        climate.elenas_room_ac: automation.elenas_room_motion_ac
        climate.elis_room_ac: automation.elis_room_motion_ac
        climate.dining_room_ac: automation.dining_room_motion_ac
        climate.living_room_ac: automation.living_room_motion_ac
        climate.parents_room_ac: automation.parents_room_motion_ac
        climate.study_room_ac: automation.study_room_motion_ac
      indicator_lights:
        climate.elenas_room_ac: light.elenas_room_bulb_1_entity
        climate.elis_room_ac: light.elis_room_bulb_3_entity
        climate.dining_room_ac: light.dining_room_bulb_4_entity
        climate.living_room_ac: light.living_room_bulb_2_entity
        climate.parents_room_ac: light.parents_room_bulb_3_entity
        climate.study_room_ac: light.study_room_bulb_4_entity
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ command == ''ac_on'' }}'
      sequence:
      - action: climate.turn_on
        target:
          entity_id: '{{ ac }}'
    - conditions:
      - condition: template
        value_template: '{{ command == ''ac_off'' }}'
      sequence:
      - action: climate.turn_off
        target:
          entity_id: '{{ ac }}'
    - conditions:
      - condition: template
        value_template: '{{ command == ''ac_warmer'' }}'
      sequence:
      - action: climate.set_temperature
        target:
          entity_id: '{{ ac }}'
        data:
          temperature: "{% if state_attr(ac, 'temperature') < 27 %}\n  {{ state_attr(ac,
            'temperature') + 0.5 }}\n{% else %}\n  27\n{% endif %}\n"
    - conditions:
      - condition: template
        value_template: '{{ command == ''ac_colder'' }}'
      sequence:
      - action: climate.set_temperature
        target:
          entity_id: '{{ ac }}'
        data:
          temperature: "{% if state_attr(ac, 'temperature') > 23.5 %}\n  {{ state_attr(ac,
            'temperature') - 0.5 }}\n{% else %}\n  23.5\n{% endif %}\n"
    - conditions:
      - condition: template
        value_template: '{{ command == ''cooling_auto_control'' }}'
      sequence:
      - condition: template
        value_template: '{{ is_state(cooling_automations[ac], ''off'') }}'
      - action: automation.turn_on
        target:
          entity_id: '{{ cooling_automations[ac] }}'
      - condition: or
        conditions:
        - condition: time
          before: input_datetime.sleep_hours_start
          after: input_datetime.sleep_hours_end
        - condition: template
          value_template: '{{ ac in [''climate.dining_room_ac'',''climate.living_room_ac'',''climate.study_room_ac'']
            }}'
      - action: script.automation_on_off_indicator_light
        data:
          flash_once: true
          indicator_light: '{{ indicator_lights[ac] }}'
    - conditions:
      - condition: template
        value_template: '{{ command == ''cooling_manual_control'' }}'
      sequence:
      - condition: template
        value_template: '{{ is_state(cooling_automations[ac], ''on'') }}'
      - action: automation.turn_off
        target:
          entity_id: '{{ cooling_automations[ac] }}'
      - condition: or
        conditions:
        - condition: time
          before: input_datetime.sleep_hours_start
          after: input_datetime.sleep_hours_end
        - condition: template
          value_template: '{{ ac in [''climate.dining_room_ac'',''climate.living_room_ac'',''climate.study_room_ac'']
            }}'
      - action: script.automation_on_off_indicator_light
        data:
          indicator_light: '{{ indicator_lights[ac] }}'
  fields:
    ac:
      selector:
        entity:
          filter:
          - domain: climate
      name: AC
      description: The AC to control
      required: true
    command:
      selector:
        select:
          options:
          - label: Turn On
            value: ac_on
          - label: Turn Off
            value: ac_off
          - label: Warmer
            value: ac_warmer
          - label: Colder
            value: ac_colder
          - label: Cooling Auto Control
            value: cooling_auto_control
          - label: Cooling Manual Control
            value: cooling_manual_control
      name: Command
      description: The command for the AC to execute
      required: true
  description: Set AC state with physical controls
  icon: mdi:snowflake
  mode: parallel
  max: 10
cover_controller:
  alias: Cover Controller
  variables:
    light:
      cover.dining_room_blinds: light.dining_room_bulb_1_entity
      cover.living_room_blinds: light.living_room_bulb_3_entity
      cover.study_room_blinds: light.study_room_bulb_3_entity
      cover.master_bathroom_blind: light.master_bathroom_pendant_light_entity
      cover.kitchen_blind: light.kitchen_ceiling_light_entity
      cover.elenas_room_curtains: light.elenas_room_bulb_3_entity
      cover.elis_room_curtains: light.elis_room_bulb_1_entity
    automation:
      cover.dining_room_blinds: automation.south_facing_blinds_auto_control
      cover.living_room_blinds: automation.south_facing_blinds_auto_control
      cover.study_room_blinds: automation.south_facing_blinds_auto_control
      cover.master_bathroom_blind: automation.master_bathroom_blind_auto_control
      cover.kitchen_blind: automation.kitchen_blind_auto_control
      cover.elenas_room_curtains: automation.elenas_room_curtains_auto_control
      cover.elis_room_curtains: automation.elis_room_curtains_auto_control
  sequence:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ command == ''cover_open'' }}'
      sequence:
      - action: automation.turn_off
        target:
          entity_id: '{{ automation[cover] }}'
      - if:
        - condition: template
          value_template: '{{ is_state(cover, ''closing'') }}'
        then:
        - target:
            entity_id: '{{ cover }}'
          action: cover.stop_cover
        else:
        - target:
            entity_id: '{{ cover }}'
          action: cover.open_cover
    - conditions:
      - condition: template
        value_template: '{{ command == ''cover_close'' }}'
      sequence:
      - action: automation.turn_off
        target:
          entity_id: '{{ automation[cover] }}'
      - if:
        - condition: template
          value_template: '{{ is_state(cover, ''opening'') }}'
        then:
        - target:
            entity_id: '{{ cover }}'
          action: cover.stop_cover
        else:
        - target:
            entity_id: '{{ cover }}'
          action: cover.close_cover
    - conditions:
      - condition: template
        value_template: '{{ command == ''cover_auto_control'' }}'
      sequence:
      - condition: template
        value_template: '{{ is_state(automation[cover], ''off'') }}'
      - target:
          entity_id: '{{ automation[cover] }}'
        action: automation.turn_on
      - condition: or
        conditions:
        - condition: template
          value_template: '{{ cover in [''cover.dining_room_blinds'',''cover.living_room_blinds'',''cover.study_room_blinds'',''cover.kitchen_blind'']
            }}'
        - condition: time
          before: input_datetime.sleep_hours_start
          after: input_datetime.sleep_hours_end
      - data:
          indicator_light: '{{ light[cover] }}'
          flash_once: true
        action: script.automation_on_off_indicator_light
    - conditions:
      - condition: template
        value_template: '{{ command == ''cover_manual_control'' }}'
      sequence:
      - condition: template
        value_template: '{{ is_state(automation[cover], ''on'') }}'
      - target:
          entity_id: '{{ automation[cover] }}'
        action: automation.turn_off
      - condition: or
        conditions:
        - condition: template
          value_template: '{{ cover in [''cover.dining_room_blinds'',''cover.living_room_blinds'',''cover.study_room_blinds'',''cover.kitchen_blind'']
            }}'
        - condition: time
          before: input_datetime.sleep_hours_start
          after: input_datetime.sleep_hours_end
      - data:
          indicator_light: '{{ light[cover] }}'
        action: script.automation_on_off_indicator_light
  fields:
    cover:
      name: Cover
      description: The cover to control
      selector:
        entity:
          filter:
          - domain: cover
      required: true
    command:
      name: Command
      description: The command for the cover to execute
      selector:
        select:
          options:
          - label: Open
            value: cover_open
          - label: Close
            value: cover_close
          - label: Auto Control
            value: cover_auto_control
          - label: Manual Control
            value: cover_manual_control
      required: true
  description: Set cover state with physical controls
  icon: mdi:blinds
  mode: parallel
  max: 8
parents_room_ac_set_state:
  alias: Parents' Room AC Set State
  use_blueprint:
    path: danleongjy/ac_set_state.yaml
    input:
      air_conditioner: climate.parents_room_ac
  description: Turn on or off the Parents' Room AC
  icon: mdi:head-snowflake
study_room_ac_set_state:
  alias: Study Room AC Set State
  use_blueprint:
    path: danleongjy/ac_set_state.yaml
    input:
      air_conditioner: climate.study_room_ac
  description: Turn on or off the Study Room AC
  icon: mdi:snowflake
living_room_ac_set_state:
  alias: Living Room AC Set State
  use_blueprint:
    path: danleongjy/ac_set_state.yaml
    input:
      air_conditioner: climate.living_room_ac
  description: Turn on or off the Living Room AC
  icon: mdi:snowflake
dining_room_ac_set_state:
  alias: Dining Room AC Set State
  use_blueprint:
    path: danleongjy/ac_set_state.yaml
    input:
      air_conditioner: climate.dining_room_ac
  description: Turn on or off the Dining Room AC
  icon: mdi:snowflake
elis_room_ac_set_state:
  alias: Eli's Room AC Set State
  use_blueprint:
    path: danleongjy/ac_set_state.yaml
    input:
      air_conditioner: climate.elis_room_ac
  description: Turn on or off Eli's Room AC
  icon: mdi:snowflake
elenas_room_ac_set_state:
  alias: Elena's Room AC Set State
  use_blueprint:
    path: danleongjy/ac_set_state.yaml
    input:
      air_conditioner: climate.elenas_room_ac
  description: Turn on or off Elena's Room AC
  icon: mdi:snowflake
docker_mode:
  alias: Docker Mode
  sequence:
  - if:
    - condition: not
      conditions:
      - condition: state
        entity_id:
        - switch.immich_machine_learning
        - switch.immich_postgres
        - switch.immich_redis
        - switch.immich_server
        state: 'off'
    then:
    - repeat:
        sequence:
        - action: switch.turn_off
          metadata: {}
          data: {}
          target:
            entity_id: '{{ repeat.item }}'
        - repeat:
            sequence:
            - delay: 10
            while:
            - condition: template
              value_template: '{{ is_state(repeat.item, ''on'') }}'
        for_each:
        - switch.immich_server
        - switch.immich_postgres
        - switch.immich_redis
        - switch.immich_machine_learning
    else:
    - repeat:
        sequence:
        - action: switch.turn_on
          metadata: {}
          data: {}
          target:
            entity_id: '{{ repeat.item }}'
        - repeat:
            sequence:
            - delay: 10
            while:
            - condition: template
              value_template: '{{ is_state(repeat.item, ''off'') }}'
        for_each:
        - switch.immich_machine_learning
        - switch.immich_postgres
        - switch.immich_redis
    - delay: 180
    - action: switch.turn_on
      metadata: {}
      data: {}
      target:
        entity_id: switch.immich_server
  description: Sync Immich container states
  icon: mdi:docker
