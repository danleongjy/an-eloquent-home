ac_set_state:
  alias: AC Set State
  fields:
    target_ac:
      name: Target AC
      description: The AC for which to set the state
      selector:
        select:
          options:
          - Parents' Room AC
          - Study Room AC
          - Living Room AC
          - Dining Room AC
          - Eli's Room AC
          - Elena's Room AC
      required: true
      default: Dining Room AC
    target_ac_power:
      name: Target AC Power
      description: Whether the AC is on or off
      selector:
        boolean:
      required: true
      default: true
    target_ac_temp:
      name: Target AC Temperature
      description: The temperature of the AC
      selector:
        number:
          min: 24
          max: 27
          step: 1
          unit_of_measurement: Â°C
          mode: slider
      required: true
      default: 27
  variables:
    universal_remote:
      Elena's Room AC: remote.elenas_room_universal_remote
      Eli's Room AC: remote.elis_room_universal_remote
      Dining Room AC: remote.living_room_universal_remote
      Living Room AC: remote.living_room_universal_remote
      Study Room AC: remote.study_room_universal_remote
      Parents' Room AC: remote.parents_room_universal_remote
  sequence:
  - if:
    - condition: template
      value_template: '{{ target_ac_power == false }}'
    then:
    - service: remote.send_command
      target:
        entity_id: '{{ universal_remote[target_ac] }}'
      data:
        device: '{{ target_ac }}'
        command: 'Off'
    else:
    - service: remote.send_command
      target:
        entity_id: '{{ universal_remote[target_ac] }}'
      data:
        device: '{{ target_ac }}'
        command: '{{ target_ac_temp | int }}'
  mode: parallel
  icon: mdi:snowflake
  max: 10
fan_set_state:
  alias: Fan Set State
  fields:
    target_fan:
      name: Target Fan
      description: The fan for which to set the state
      selector:
        select:
          options:
          - Parents' Room Fan
          - Elena's Room Fan
          - Eli's Room Fan
      required: true
      default: Living Room Fan
    target_fan_power:
      name: Target Fan Power
      description: Whether the fan is on or off
      selector:
        boolean:
      required: true
      default: true
    target_fan_speed:
      name: Target Fan Speed
      description: The speed of the fan
      selector:
        number:
          min: 0
          max: 100
          step: 16
          mode: slider
      required: false
      default: 33
  sequence:
  - service: remote.send_command
    target:
      entity_id: "{% set universal_remote = \n  { \"Elena's Room Fan\": \"remote.elis_room_universal_remote\",\n
        \   \"Eli's Room Fan\": \"remote.elis_room_universal_remote\",\n    \"Parents'
        Room Fan\": \"remote.parents_room_universal_remote\",\n  } %}\n{{ universal_remote[target_fan]
        }}\n"
    data:
      device: '{{ target_fan }}

        '
      command: "{% if target_fan_power == false %}\n  Off\n{% elif ((target_fan_speed
        | int) / 100 * 6) | round(0) == 0 %}\n  Off\n{% else %}\n  {{ ((target_fan_speed
        | int) / 100 * 6) | round(0) }}\n{% endif %}"
  mode: queued
  icon: mdi:speedometer
  max: 10
  max_exceeded: silent
fan_set_direction:
  alias: Fan Set Direction
  fields:
    target_fan:
      name: Target Fan
      description: The fan for which to set direction
      selector:
        select:
          options:
          - Parents' Room Fan
          - Elena's Room Fan
          - Eli's Room Fan
      required: true
      default: Living Room Fan
    direction:
      name: Direction
      description: The fan spin direction
      selector:
        select:
          options:
          - forward
          - reverse
      required: true
      default: forward
  variables:
    fan:
      Elena's Room Fan:
        entity_id: fan.elenas_room_fan
        remote: remote.elis_room_universal_remote
        direction: input_select.elenas_room_fan_direction
      Eli's Room Fan:
        entity_id: fan.elis_room_fan
        remote: remote.elis_room_universal_remote
        direction: input_select.elis_room_fan_direction
      Parents' Room Fan:
        entity_id: fan.parents_room_fan
        remote: remote.parents_room_universal_remote
        direction: input_select.parents_room_fan_direction
  sequence:
  - if:
    - condition: template
      value_template: '{{ states(fan[target_fan][''direction'']) != direction }}'
    then:
    - if:
      - condition: template
        value_template: '{{ states(fan[target_fan][''entity_id'']) == ''off'' }}'
      then:
      - service: fan.turn_on
        target:
          entity_id: '{{ fan[target_fan][''entity_id''] }}'
      - delay:
          hours: 0
          minutes: 0
          seconds: 3
          milliseconds: 0
    - service: remote.send_command
      target:
        entity_id: '{{ fan[target_fan][''remote''] }}'
      data:
        device: '{{ target_fan }}'
        command: Reverse
  - service: input_select.select_option
    target:
      entity_id: '{{ fan[target_fan][''direction''] }}'
    data:
      option: '{{ direction }}'
  mode: queued
  icon: mdi:rotate-3d-variant
  max: 10
  max_exceeded: silent
turn_off_all:
  sequence:
  - service: automation.trigger
    data:
      skip_condition: true
    target:
      entity_id:
      - automation.playroom_motion_timeout
      - automation.yard_motion_timeout
      - automation.kitchen_motion_timeout
  - if:
    - condition: not
      conditions:
      - condition: state
        entity_id: media_player.kitchen_speaker
        state: 'off'
    then:
    - service: media_player.media_stop
      data: {}
      target:
        entity_id: media_player.kitchen_speaker
  - delay:
      hours: 0
      minutes: 0
      seconds: 0
      milliseconds: 300
  - service: automation.trigger
    data:
      skip_condition: true
    target:
      entity_id:
      - automation.elenas_room_motion_timeout
      - automation.master_bathroom_motion_timeout
  - delay:
      hours: 0
      minutes: 0
      seconds: 0
      milliseconds: 300
  - service: automation.trigger
    data:
      skip_condition: true
    target:
      entity_id:
      - automation.elis_room_motion_timeout
      - automation.parents_room_motion_timeout
  - delay:
      hours: 0
      minutes: 0
      seconds: 0
      milliseconds: 300
  - service: automation.trigger
    data:
      skip_condition: true
    target:
      entity_id: automation.hallway_motion_timeout
  - delay:
      hours: 0
      minutes: 0
      seconds: 0
      milliseconds: 100
  - service: automation.trigger
    data:
      skip_condition: true
    target:
      entity_id: automation.junior_bathroom_motion_timeout
  - delay:
      hours: 0
      minutes: 0
      seconds: 0
      milliseconds: 100
  - service: automation.trigger
    data:
      skip_condition: true
    target:
      entity_id:
      - automation.study_room_motion_timeout
      - automation.powder_room_motion_timeout
  - if:
    - condition: not
      conditions:
      - condition: state
        entity_id: media_player.study_room_speaker
        state: 'off'
    then:
    - service: media_player.media_stop
      data: {}
      target:
        entity_id: media_player.study_room_speaker
  - delay:
      hours: 0
      minutes: 0
      seconds: 0
      milliseconds: 300
  - service: automation.trigger
    data:
      skip_condition: true
    target:
      entity_id:
      - automation.dining_room_motion_timeout
      - automation.living_room_motion_timeout
      - automation.dining_and_living_room_ac_motion_timeout
  - service: switch.turn_off
    data: {}
    target:
      entity_id: switch.water_heater
  mode: single
  alias: Turn Off All
  icon: mdi:home-export-outline
elis_room_alarm_lights:
  alias: Eli's Room Alarm Lights
  sequence:
  - service: light.turn_off
    data: {}
    target:
      entity_id: light.elis_room_lights
  - delay:
      hours: 0
      minutes: 0
      seconds: 5
      milliseconds: 0
  - service: light.turn_on
    data:
      brightness_pct: "{% if is_state('sun.sun', 'below_horizon') %}\n  {{ states('input_number.morning_light_brightness')
        }}\n{% else %}\n  100\n{% endif %}\n"
    target:
      entity_id: light.elis_room_lights
  - service: light.turn_on
    data:
      rgb_color:
      - 229
      - 208
      - 164
      effect: Alarm
    target:
      entity_id: light.elis_room_core_led_strips
  - service: light.turn_on
    data:
      brightness_pct: 30
    target:
      entity_id: light.elis_room_core_display_backlight
  - delay:
      hours: 0
      minutes: 0
      seconds: 2
      milliseconds: 0
  - repeat:
      while:
      - condition: state
        entity_id: binary_sensor.elis_room_door
        state: 'off'
      sequence:
      - service: light.toggle
        data:
          brightness_pct: "{% if is_state('sun.sun', 'below_horizon') %}\n  {{ states('input_number.morning_light_brightness')
            }}\n{% else %}\n  100\n{% endif %}\n"
        target:
          entity_id:
          - light.elis_room_lights
      - delay:
          hours: 0
          minutes: 0
          seconds: 2
          milliseconds: 0
      - if:
        - condition: template
          value_template: "{{ now() - state_attr('script.elis_room_alarm_lights','last_triggered')
            > timedelta(minutes = 5) and\n   now() - state_attr('script.elis_room_alarm_lights','last_triggered')
            <= timedelta(minutes = 5, seconds = 3) }}"
        then:
        - service: button.press
          data: {}
          target:
            entity_id: button.elis_room_core_play_ringtone
  - service: light.turn_on
    data:
      brightness_pct: "{% if is_state('sun.sun', 'below_horizon') %}\n  {{ states('input_number.morning_light_brightness')
        }}\n{% else %}\n  100\n{% endif %}\n"
    target:
      entity_id: light.elis_room_lights
  - service: light.turn_off
    data: {}
    target:
      entity_id: light.elis_room_core_led_strips
  mode: single
  icon: mdi:alarm
parents_room_alarm_lights:
  alias: Parents' Room Alarm Lights
  sequence:
  - service: light.turn_off
    data: {}
    target:
      entity_id: light.parents_room_lights
  - delay:
      hours: 0
      minutes: 0
      seconds: 5
      milliseconds: 0
  - service: light.turn_on
    data:
      brightness_pct: "{% if is_state('sun.sun', 'below_horizon') %}\n  {{ states('input_number.morning_light_brightness')
        }}\n{% else %}\n  100\n{% endif %}\n"
    target:
      entity_id:
      - light.parents_room_lights
  - service: light.turn_on
    data:
      rgb_color:
      - 229
      - 208
      - 164
      effect: Alarm
    target:
      entity_id: light.parents_room_core_led_strips
  - service: light.turn_on
    data:
      brightness_pct: 30
    target:
      entity_id: light.parents_room_core_display_backlight
  - delay:
      hours: 0
      minutes: 0
      seconds: 2
      milliseconds: 0
  - repeat:
      while:
      - condition: state
        state: 'off'
        entity_id: binary_sensor.parents_room_doors
      sequence:
      - service: light.toggle
        data:
          brightness_pct: "{% if is_state('sun.sun', 'below_horizon') %}\n  {{ states('input_number.morning_light_brightness')
            }}\n{% else %}\n  100\n{% endif %}\n"
        target:
          entity_id:
          - light.parents_room_lights
      - delay:
          hours: 0
          minutes: 0
          seconds: 2
          milliseconds: 0
      - if:
        - condition: template
          value_template: '{{ now() - state_attr(''script.parents_room_alarm_lights'',''last_triggered'')
            > timedelta(minutes = 5) }}'
        then:
        - service: select.select_option
          data:
            option: beep:d=4,o=5,b=200:8c,4c
          target:
            entity_id: select.parents_room_core_ringtone
        - service: button.press
          data: {}
          target:
            entity_id: button.parents_room_core_play_ringtone
  - service: light.turn_on
    data:
      brightness_pct: "{% if is_state('sun.sun', 'below_horizon') %}\n  {{ states('input_number.morning_light_brightness')
        }}\n{% else %}\n  100\n{% endif %}\n"
    target:
      entity_id: light.parents_room_lights
  - service: light.turn_off
    data: {}
    target:
      entity_id: light.parents_room_core_led_strips
  mode: single
  icon: mdi:alarm
kitchen_blind_set_position:
  alias: Kitchen Blind Set Position
  fields:
    target_position:
      name: Target Position
      description: The position that the cover should move to. 0 is closed, 100 is
        open.
      required: true
      default: 100
      selector:
        number:
          min: 0
          max: 100
          step: 1
          unit_of_measurement: '%'
  sequence:
  - condition: template
    value_template: '{{ states(''input_number.kitchen_blind_position'') | int(0) !=
      target_position }}'
  - if:
    - condition: template
      value_template: '{{ states(''input_number.kitchen_blind_position'') | int(0)
        < target_position }}'
    then:
    - service: input_select.select_option
      data:
        option: opening
      target:
        entity_id: input_select.kitchen_blind_movement
    - service: remote.send_command
      data:
        device: Kitchen Blinds
        command: Up
      target:
        entity_id: remote.living_room_universal_remote
    - wait_template: '{{ states(''input_number.kitchen_blind_position'') | int(0)
        >= target_position }}'
      continue_on_timeout: true
      timeout: '15'
    - service: input_select.select_option
      data:
        option: stopped
      target:
        entity_id: input_select.kitchen_blind_movement
    - service: remote.send_command
      data:
        device: Kitchen Blinds
        command: Stop
      target:
        entity_id: remote.living_room_universal_remote
    else:
    - service: input_select.select_option
      data:
        option: closing
      target:
        entity_id: input_select.kitchen_blind_movement
    - service: remote.send_command
      data:
        device: Kitchen Blinds
        command: Down
      target:
        entity_id: remote.living_room_universal_remote
    - wait_template: '{{ states(''input_number.kitchen_blind_position'') | int(0)
        <= target_position }}'
      continue_on_timeout: true
      timeout: '15'
    - service: input_select.select_option
      data:
        option: stopped
      target:
        entity_id: input_select.kitchen_blind_movement
    - service: remote.send_command
      data:
        device: Kitchen Blinds
        command: Stop
      target:
        entity_id: remote.living_room_universal_remote
  mode: restart
  icon: mdi:window-shutter-open
increment_alarm_day:
  alias: Increment Alarm Day
  fields:
    alarm_datetime:
      name: Alarm Datetime Helper
      description: A datetime helper containing the current datetime of the alarm
      required: true
      selector:
        entity:
          filter:
          - domain: input_datetime
    off_time_calendars:
      name: Off-time Calendars
      description: A calendar indicating public holidays, and if applicable, another
        calendar indicating when the owner of this alarm has no work/school.  Must
        specify either one or two calendars.
      required: true
      selector:
        entity:
          multiple: true
          filter:
          - domain: calendar
  variables:
    off_time:
      events: []
  sequence:
  - service: calendar.list_events
    data:
      duration:
        minutes: 1
      start_date_time: '{{ states(alarm_datetime) }}'
    target:
      entity_id: '{{ off_time_calendars[0] }}'
    response_variable: public_holiday
    alias: List public holidays occurring on next alarm
  - if:
    - condition: template
      value_template: '{{ off_time_calendars | length == 2 }}'
    then:
    - service: calendar.list_events
      data:
        duration:
          minutes: 1
        start_date_time: '{{ states(alarm_datetime) }}'
      target:
        entity_id: '{{ off_time_calendars[1] }}'
      response_variable: off_time
      alias: List days with no work/school occurring on next alarm
    else:
    - variables:
        off_time:
          events: []
  - repeat:
      while:
      - condition: or
        conditions:
        - condition: template
          value_template: '{{ (as_datetime(states(alarm_datetime))).weekday() in range(5,7)
            }}'
          alias: Alarm day is on a weekend
        - condition: template
          value_template: '{{ now().date() >= as_datetime(states(alarm_datetime)).date()
            }}'
          alias: Alarm day is not in the future
        - condition: template
          value_template: '{{ (public_holiday.events + off_time.events) | length >
            0 }}'
          alias: Alarm day is on an off day
      sequence:
      - service: input_datetime.set_datetime
        data:
          date: '{{ as_datetime(states(alarm_datetime)).date() + timedelta(days =
            1) }}'
        target:
          entity_id: '{{ alarm_datetime }}'
        alias: Increment alarm by 1 day
      - service: calendar.list_events
        data:
          duration:
            minutes: 1
          start_date_time: '{{ states(alarm_datetime) }}'
        target:
          entity_id: '{{ off_time_calendars[0] }}'
        response_variable: public_holiday
        alias: List public holidays occurring on next alarm
      - if:
        - condition: template
          value_template: '{{ off_time_calendars | length == 2 }}'
        then:
        - service: calendar.list_events
          data:
            duration:
              minutes: 1
            start_date_time: '{{ states(alarm_datetime) }}'
          target:
            entity_id: '{{ off_time_calendars[1] }}'
          response_variable: off_time
          alias: List days with no work/school occurring on next alarm
        else:
        - variables:
            off_time:
              events: '{{ [] }}'
    alias: Increment alarm by 1 day until it is a future weekday that is not an off
      day
  mode: parallel
  icon: mdi:alarm
nea_rain_radar_animation:
  alias: NEA Rain Radar Animation
  sequence:
  - repeat:
      for_each: "{% set start_time = (now() - timedelta(days = 1, minutes = 15)).replace(minute
        = (now() - timedelta(minutes = 15)).minute // 15 * 15) %} {% set missing_frames
        = namespace(frames = []) %} {% for i in range(97) %}\n  {% set current_frame
        = '/config/www/rain_radar/frames/dpsri_240km_' + (start_time + timedelta(minutes
        = 15 * i)).strftime('%Y%m%d%H%M') + '0000dBR.dpsri.png' %}\n  {% if current_frame
        not in state_attr('sensor.frames','file_list') %}\n    {% set missing_frames.frames
        = missing_frames.frames + [current_frame] %}\n  {% endif %}\n{% endfor %}
        {{ missing_frames.frames }}\n"
      sequence:
      - service: downloader.download_file
        data:
          overwrite: false
          url: https://www.nea.gov.sg/docs/default-source/rain-area-240km/{{ repeat.item.split('/')[-1]
            }}
          filename: '{{ repeat.item.split(''/'')[-1] }}'
      - delay: 2
  - service: shell_command.removeoldrainradar
    data: {}
  - service: shell_command.removeoldrainradaranimation
    data: {}
  - delay:
      hours: 0
      minutes: 0
      seconds: 2
      milliseconds: 0
  - service: pyscript.compile_rain_radar_animation
    data: {}
  mode: single
  icon: mdi:weather-cloudy
set_recommended_scene:
  alias: Set Recommended Scene
  sequence:
  - service: automation.trigger
    data:
      skip_condition: true
    target:
      entity_id: '{{ states.automation | selectattr(''entity_id'', ''search'', room
        + ''_motion'') | rejectattr(''entity_id'',''search'',''timeout'') | map(attribute
        = ''entity_id'') | list }}

        '
  mode: parallel
  icon: mdi:magic-staff
  max: 15
  fields:
    room:
      name: Room
      description: The room to set the recommended scene in
      selector:
        select:
          options:
          - label: Parents' Room
            value: parents_room
          - label: Master Bathroom
            value: master_bathroom
          - label: Kitchen
            value: kitchen
          - label: Study Room
            value: study_room
          - label: Living Room
            value: living_room
          - label: Dining Room
            value: dining_room
          - label: Playroom
            value: playroom
          - label: Yard
            value: yard
          - label: Hallway
            value: hallway
          - label: Powder Room
            value: powder_room
          - label: Junior Bathroom
            value: junior_bathroom
          - label: Eli's Room
            value: elis_room
          - label: Elena's Room
            value: elenas_room
      required: true
recommended_light_level:
  alias: Recommended Light Level
  sequence:
  - variables:
      light_room: '{{ area_name(light) }}'
  - variables:
      dim_start: '{{ ''input_datetime.wind_down'' if light_room in wind_down_rooms
        else ''input_datetime.dim_hours_start'' }}'
      dim_end: '{{ ''input_datetime.sleep_hours_end'' if light_room in sleep_hours_end_rooms
        else ''input_datetime.dim_hours_end'' }}'
  - variables:
      light_brightness: "{% if dim_start != dim_end %}\n  {% if now() > today_at(states(dim_start))
        and now() <= today_at(states(dim_end)) + timedelta(days = 1) %}\n    {{ states('input_number.night_light_brightness')
        | float }}\n  {% elif is_state('sun.sun','below_horizon') and state_attr('sun.sun','rising')
        %}\n    {{ states('input_number.morning_light_brightness') | float }}\n  {%
        else %}\n    100\n  {% endif %}\n{% else %}\n  100\n{% endif %}"
  - service: light.turn_on
    target:
      entity_id: '{{ light }}'
    data:
      brightness_pct: '{{ light_brightness }}'
  mode: parallel
  icon: mdi:lightbulb-on-70
  max: 15
  variables:
    wind_down_rooms:
    - Elena's Room
    - Eli's Room
    - Hallway
    - Master Bathroom
    - Parents' Room
    - Powder Room
    sleep_hours_end_rooms:
    - Elena's Room
    - Eli's Room
    - Hallway
    - Master Bathroom
    - Parents' Room
    - Powder Room
  fields:
    light:
      selector:
        entity:
          filter:
            domain: light
      name: Light
      description: The light on which to set the recommended level
      required: true
