- cover:
    - name: Dining Room Blinds
      unique_id: cover.dining_room_blinds
      device_class: blind
      state: >
        {% set cover_states = states.cover | selectattr('entity_id', 'in', ['cover.dining_room_left_blind', 'cover.dining_room_middle_blind', 'cover.dining_room_right_blind']) | map(attribute = 'state') | list %}
        {{ 'opening' if 'opening' in cover_states else 'closing' if 'closing' in cover_states else 'open' if 'open' in cover_states else 'closed' }}
      position: >
        {{ (state_attr('cover.dining_room_left_blind','current_position') + 
            state_attr('cover.dining_room_middle_blind','current_position') + 
            state_attr('cover.dining_room_right_blind','current_position')) / 3 }}
      availability: >
        {{ states('cover.dining_room_left_blind') not in ['unavailable', 'unknown'] and 
           states('cover.dining_room_middle_blind') not in ['unavailable', 'unknown'] and 
           states('cover.dining_room_right_blind') not in ['unavailable', 'unknown'] }}
      open_cover:
        repeat:
          for_each:
            - cover.dining_room_right_blind
            - cover.dining_room_middle_blind
            - cover.dining_room_left_blind
          sequence:
            - service: cover.open_cover
              target:
                entity_id: "{{ repeat.item }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
      close_cover:
        repeat:
          for_each:
            - cover.dining_room_right_blind
            - cover.dining_room_middle_blind
            - cover.dining_room_left_blind
          sequence:
            - service: cover.close_cover
              target:
                entity_id: "{{ repeat.item }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
      stop_cover:
        repeat:
          for_each:
            - cover.dining_room_right_blind
            - cover.dining_room_middle_blind
            - cover.dining_room_left_blind
          sequence:
            - service: cover.stop_cover
              target:
                entity_id: "{{ repeat.item }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
      set_cover_position:
        repeat:
          for_each:
            - cover.dining_room_right_blind
            - cover.dining_room_middle_blind
            - cover.dining_room_left_blind
          sequence:
            - service: cover.set_cover_position
              target:
                entity_id: "{{ repeat.item }}"
              data:
                position: "{{ position }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
    - name: Living Room Blinds
      unique_id: cover.living_room_blinds
      device_class: blind
      state: >
        {% set cover_states = states.cover | selectattr('entity_id', 'in', ['cover.living_room_left_blind', 'cover.living_room_middle_blind', 'cover.living_room_right_blind']) | map(attribute = 'state') | list %}
        {{ 'opening' if 'opening' in cover_states else 'closing' if 'closing' in cover_states else 'open' if 'open' in cover_states else 'closed' }}
      position: "{{ (state_attr('cover.living_room_left_blind','current_position') + state_attr('cover.living_room_middle_blind','current_position') + state_attr('cover.living_room_right_blind','current_position')) / 3 }}"
      availability: "{{ states('cover.living_room_left_blind') not in ['unavailable', 'unknown'] and states('cover.living_room_middle_blind') not in ['unavailable', 'unknown'] and states('cover.living_room_right_blind') not in ['unavailable', 'unknown'] }}"
      open_cover:
        repeat:
          for_each:
            - cover.living_room_right_blind
            - cover.living_room_middle_blind
            - cover.living_room_left_blind
          sequence:
            - service: cover.open_cover
              target:
                entity_id: "{{ repeat.item }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
      close_cover:
        repeat:
          for_each:
            - cover.living_room_right_blind
            - cover.living_room_middle_blind
            - cover.living_room_left_blind
          sequence:
            - service: cover.close_cover
              target:
                entity_id: "{{ repeat.item }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
      stop_cover:
        repeat:
          for_each:
            - cover.living_room_right_blind
            - cover.living_room_middle_blind
            - cover.living_room_left_blind
          sequence:
            - service: cover.stop_cover
              target:
                entity_id: "{{ repeat.item }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
      set_cover_position:
        repeat:
          for_each:
            - cover.living_room_right_blind
            - cover.living_room_middle_blind
            - cover.living_room_left_blind
          sequence:
            - service: cover.set_cover_position
              target:
                entity_id: "{{ repeat.item }}"
              data:
                position: "{{ position }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
    - name: Study Room Blinds
      unique_id: cover.study_room_blinds
      device_class: blind
      state: >
        {% set cover_states = states.cover | selectattr('entity_id', 'in', ['cover.study_room_left_blind', 'cover.study_room_right_blind']) | map(attribute = 'state') | list %}
        {{ 'opening' if 'opening' in cover_states else 'closing' if 'closing' in cover_states else 'open' if 'open' in cover_states else 'closed' }}
      position: "{{ (state_attr('cover.study_room_left_blind','current_position') + state_attr('cover.study_room_right_blind','current_position')) / 2 }}"
      availability: "{{ states('cover.study_room_left_blind') not in ['unavailable', 'unknown'] and states('cover.study_room_right_blind') not in ['unavailable', 'unknown'] }}"
      open_cover:
        repeat:
          for_each:
            - cover.study_room_right_blind
            - cover.study_room_left_blind
          sequence:
            - service: cover.open_cover
              target:
                entity_id: "{{ repeat.item }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
      close_cover:
        repeat:
          for_each:
            - cover.study_room_right_blind
            - cover.study_room_left_blind
          sequence:
            - service: cover.close_cover
              target:
                entity_id: "{{ repeat.item }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
      stop_cover:
        repeat:
          for_each:
            - cover.study_room_right_blind
            - cover.study_room_left_blind
          sequence:
            - service: cover.stop_cover
              target:
                entity_id: "{{ repeat.item }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
      set_cover_position:
        repeat:
          for_each:
            - cover.study_room_right_blind
            - cover.study_room_left_blind
          sequence:
            - service: cover.set_cover_position
              target:
                entity_id: "{{ repeat.item }}"
              data:
                position: "{{ position }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
