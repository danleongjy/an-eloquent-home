- binary_sensor:
  - name: Yard Window
    unique_id: binary_sensor.yard_window
    device_class: window
    state: >
      {{ is_state('binary_sensor.yard_window_1', 'on') or 
         is_state('binary_sensor.yard_window_2','on') }}
    attributes:
      total_panes_open: "{{ is_state('binary_sensor.yard_window_1','on') + is_state('binary_sensor.yard_window_2','on') }}/2"
      total_panes: 2
      yard_window_1: "{{ states('binary_sensor.yard_window_1') }}"
      yard_window_2: "{{ states('binary_sensor.yard_window_2') }}"

  - name: Kitchen Window
    unique_id: binary_sensor.kitchen_window
    device_class: window
    state: >
      {{ not is_state('cover.kitchen_blinds', 'closed') }}
    attributes:
      kitchen_blinds: "{{ states('cover.kitchen_blinds') }}"

  - name: Kitchen Motion
    unique_id: binary_sensor.kitchen_motion
    device_class: motion
    state: >
      {{ is_state('binary_sensor.kitchen_sink_motion', 'on') or
         is_state('binary_sensor.kitchen_stove_motion', 'on') }}
    attributes:
      kitchen_sink_motion: "{{ states('binary_sensor.kitchen_sink_motion') }}"
      kitchen_stove_motion: "{{ states('binary_sensor.kitchen_stove_motion') }}"

  - name: Hallway Doors
    unique_id: binary_sensor.hallway_doors
    device_class: door
    state: >
      {{ is_state('binary_sensor.powder_room_door', 'on') or
        is_state('binary_sensor.junior_bathroom_door', 'on') or
        is_state('binary_sensor.elis_room_door', 'on') or
        is_state('binary_sensor.elenas_room_door', 'on')
      }}
    attributes:
      powder_room_door: "{{ states('binary_sensor.powder_room_door') }}"
      junior_bathroom_door: "{{ states('binary_sensor.junior_bathroom_door') }}"
      elis_room_door: "{{ states('binary_sensor.elis_room_door') }}"
      elenas_room_door: "{{ states('binary_sensor.elenas_room_door') }}"
      total_doors_open: "{{ is_state('binary_sensor.powder_room_door', 'on') + is_state('binary_sensor.junior_bathroom_door', 'on') + is_state('binary_sensor.elenas_room_door', 'on') + is_state('binary_sensor.elis_room_door', 'on') }}/4"
      total_doors: "4"

  - name: Parents' Room Doors
    unique_id: binary_sensor.parents_room_doors
    device_class: door
    state: >
      {{ is_state('binary_sensor.parents_room_door', 'on') or
        is_state('binary_sensor.master_bathroom_door', 'on')
      }}
    attributes:
      parents_room_door: "{{ states('binary_sensor.parents_room_door') }}"
      master_bathroom_door: "{{ states('binary_sensor.master_bathroom_door') }}"
      total_doors_open: "{{ is_state('binary_sensor.parents_room_door', 'on') + is_state('binary_sensor.master_bathroom_door', 'on') }}/2"
      total_doors: "2"

  - name: AC On With Door Open at Dining Room
    unique_id: binary_sensor.ac_on_with_door_open_at_dining_room
    state: "{{ is_state('binary_sensor.main_door','on') and is_state('climate.dining_room_ac','cool') }}"
    attributes:
      yard_door: "{{ states('binary_sensor.main_door') }}"
      dining_room_ac: " {{ states('climate.dining_room_ac') }}"

  - name: AC On With Window Open at Yard
    unique_id: binary_sensor.ac_on_with_window_open_at_yard
    state: "{{ is_state('binary_sensor.yard_window','on') and is_state('climate.dining_room_ac','cool') }}"
    attributes:
      yard_window: "{{ states('binary_sensor.yard_window') }}"
      dining_room_ac: " {{ states('climate.dining_room_ac') }}"

  - name: AC On With Door Open at Powder Room
    unique_id: binary_sensor.ac_on_with_door_open_at_powder_room
    state: "{{ is_state('binary_sensor.powder_room_door','on') and is_state('climate.dining_room_ac','cool') }}"
    attributes:
      powder_room_door: "{{ states('binary_sensor.powder_room_door') }}"
      dining_room_ac: " {{ states('climate.dining_room_ac') }}"

  - name: AC On With Door Open at Junior Bathroom
    unique_id: binary_sensor.ac_on_with_door_open_at_junior_bathroom
    state: "{{ is_state('binary_sensor.junior_bathroom_door','on') and is_state('climate.dining_room_ac','cool') }}"
    attributes:
      junior_bathroom_door: "{{ states('binary_sensor.junior_bathroom_door') }}"
      dining_room_ac: " {{ states('climate.dining_room_ac') }}"

  - name: AC On With Door Open at Elena's Room
    unique_id: binary_sensor.ac_on_with_door_open_at_elenas_room
    state: >
      {{ is_state('binary_sensor.elenas_room_door', 'on') 
        and ((is_state('climate.elenas_room_ac', 'cool') and is_state('climate.dining_room_ac','off'))
              or (is_state('climate.elenas_room_ac','off') and is_state('climate.dining_room_ac','cool')))
      }}
    attributes:
      elenas_room_door: "{{ states('binary_sensor.elenas_room_door') }}"
      elenas_room_ac: "{{ states('climate.elenas_room_ac') }}"
      dining_room_ac: "{{ states('climate.dining_room_ac') }}"

  - name: AC On With Door Open at Eli's Room
    unique_id: binary_sensor.ac_on_with_door_open_at_elis_room
    state: >
      {{ is_state('binary_sensor.elis_room_door', 'on') 
        and ((is_state('climate.elis_room_ac', 'cool') and is_state('climate.dining_room_ac','off'))
              or (is_state('climate.elis_room_ac','off') and is_state('climate.dining_room_ac','cool')))
      }}
    attributes:
      elis_room_door: "{{ states('binary_sensor.elis_room_door') }}"
      elis_room_ac: "{{ states('climate.elis_room_ac') }}"
      dining_room_ac: "{{ states('climate.dining_room_ac') }}"

  - name: AC On With Doors Open at Hallway
    unique_id: binary_sensor.ac_on_with_doors_open_at_hallway
    state: >
      {{ is_state('binary_sensor.ac_on_with_door_open_at_elenas_room', 'on')
        or is_state('binary_sensor.ac_on_with_door_open_at_elis_room', 'on')
        or is_state('binary_sensor.ac_on_with_door_open_at_powder_room', 'on')
        or is_state('binary_sensor.ac_on_with_door_open_at_junior_bathroom', 'on')
      }}
    attributes:
      elenas_room_door: "{{ states('binary_sensor.elenas_room_door') }}"
      elis_room_door: "{{ states('binary_sensor.elis_room_door') }}"
      powder_room_door: "{{ states('binary_sensor.powder_room_door') }}"
      junior_bathroom_door: "{{ states('binary_sensor.junior_bathroom_door') }}"
      elenas_room_ac: "{{ states('climate.elenas_room_ac') }}"
      elis_room_ac: "{{ states('climate.elis_room_ac') }}"
      dining_room_ac: "{{ states('climate.dining_room_ac') }}"

  - name: AC On With Door Open at Study Room
    unique_id: binary_sensor.ac_on_with_door_open_at_study_room
    state: >
      {{ is_state('binary_sensor.parents_room_door', 'on') 
         and ((is_state('climate.parents_room_ac', 'cool') and is_state('climate.study_room_ac','off'))
              or (is_state('climate.parents_room_ac','off') and is_state('climate.study_room_ac','cool')))
      }}
    attributes:
      parents_room_door: "{{ states('binary_sensor.parents_room_door') }}"
      parents_room_ac: "{{ states('climate.parents_room_ac') }}"
      study_room_ac: "{{ states('climate.study_room_ac') }}"

  - name: AC On With Door Open at Master Bathroom
    unique_id: binary_sensor.ac_on_with_door_open_at_master_bathroom
    state: "{{ is_state('binary_sensor.master_bathroom_door','on') and is_state('climate.parents_room_ac','cool') }}"
    attributes:
      powder_room_door: "{{ states('binary_sensor.master_bathroom_door') }}"
      parents_room_ac: " {{ states('climate.parents_room_ac') }}"

  - name: AC On With Doors Open at Parents' Room
    unique_id: binary_sensor.ac_on_with_doors_open_at_parents_room
    state: >
      {{ is_state('binary_sensor.ac_on_with_door_open_at_study_room', 'on')
        or is_state('binary_sensor.ac_on_with_door_open_at_master_bathroom', 'on')
      }}
    attributes:
      parents_room_door: "{{ states('binary_sensor.parents_room_door') }}"
      master_bathroom_door: "{{ states('binary_sensor.master_bathroom_door') }}"
      parents_room_ac: "{{ states('climate.parents_room_ac') }}"
      study_room_ac: "{{ states('climate.study_room_ac') }}"

  - name: AC On With Window Open at Kitchen
    unique_id: binary_sensor.ac_on_with_window_open_at_kitchen
    state: "{{ not is_state('cover.kitchen_blinds','closed') and is_state('climate.living_room_ac','cool') }}"
    attributes:
      kitchen_window: "{{ states('cover.kitchen_blinds') }}"
      living_room_ac: " {{ states('climate.living_room_ac') }}"

  - name: AC On With Doors Open
    unique_id: binary_sensor.ac_on_with_doors_open
    state: >
      {{ is_state('binary_sensor.ac_on_with_door_open_at_elenas_room', 'on') 
         or is_state('binary_sensor.ac_on_with_door_open_at_elis_room', 'on') 
         or is_state('binary_sensor.ac_on_with_door_open_at_powder_room', 'on')
         or is_state('binary_sensor.ac_on_with_door_open_at_junior_bathroom', 'on')
         or is_state('binary_sensor.ac_on_with_door_open_at_dining_room', 'on')
         or is_state('binary_sensor.ac_on_with_window_open_at_yard', 'on') 
         or is_state('binary_sensor.ac_on_with_doors_open_at_parents_room', 'on') 
         or is_state('binary_sensor.ac_on_with_door_open_at_master_bathroom', 'on') 
         or is_state('binary_sensor.ac_on_with_window_open_at_kitchen', 'on') }}
    attributes:
      elenas_room_door: "{{ states('binary_sensor.elenas_room_door') }}"
      elis_room_door: "{{ states('binary_sensor.elis_room_door') }}"
      powder_room_door: "{{ states('binary_sensor.powder_room_door') }}"
      junior_bathroom_door: "{{ states('binary_sensor.junior_bathroom_door') }}"
      main_door: "{{ states('binary_sensor.main_door') }}"
      yard_window: "{{ states('binary_sensor.yard_window') }}"
      parents_room_door: "{{ states('binary_sensor.parents_room_door') }}"
      master_bathroom_door: "{{ states('binary_sensor.master_bathroom_door') }}"
      kitchen_window: "{{ states('cover.kitchen_blinds') }}"
      elenas_room_ac: "{{ states('climate.elenas_room_ac') }}"
      elis_room_ac: "{{ states('climate.elis_room_ac') }}"
      dining_room_ac: "{{ states('climate.dining_room_ac') }}"
      living_room_ac: "{{ states('climate.living_room_ac') }}"
      study_room_ac: "{{ states('climate.study_room_ac') }}"
      parents_room_ac: "{{ states('climate.parents_room_ac') }}"

  - name: Vacuum Running with Doors Open
    unique_id: binary_sensor.vacuum_running_with_doors_open
    state: >
      {% if is_state('vacuum.pikachu', 'cleaning')
         and (is_state('binary_sensor.powder_room_door', 'on') or 
              is_state('binary_sensor.junior_bathroom_door', 'on') or
              is_state('binary_sensor.master_bathroom_door', 'on') or
              is_state('binary_sensor.main_door', 'on')) %}
        on
      {% else %}
        off
      {% endif %}
    attributes:
      vacuum: "{{ states('vacuum.pikachu') }}"
      junior_bathroom_door: "{{ states('binary_sensor.junior_bathroom_door') }}"
      powder_room_door: "{{ states('binary_sensor.powder_room_door') }}"
      master_bathroom_door: "{{ states('binary_sensor.master_bathroom_door') }}"
      main_door: "{{ states('binary_sensor.main_door') }}"
      
  - name: Dishwasher
    unique_id: binary_sensor.dishwasher
    state: "{{ states('sensor.dishwasher_watts') | int(0) > 0 }}"
    attributes:
      dishwasher_status: "{{ states('input_select.dishwasher_status') }}"

  - name: Rice Cooker
    unique_id: binary_sensor.rice_cooker
    state: "{{ states('sensor.rice_cooker_watts') | int(0) > 0 }}"
    attributes:
      dishwasher_status: "{{ states('input_select.rice_cooker_status') }}"
    availability: "{{ states('switch.rice_cooker') not in ['unavailable','unknown'] }}"

  - name: Gas Water Heater
    unique_id: binary_sensor.gas_water_heater
    state: "{{ states('sensor.gas_water_heater_watts') | int(0) > 3 }}"
    availability: "{{ states('switch.gas_water_heater') }}"

  - name: Recommended Scene in Elena's Room
    unique_id: binary_sensor.recommended_scene_in_elenas_room
    state: >
      {% set elenas_room = namespace(lights = false, fan = false, ac = false) %}
      {% if is_state('light.elenas_room_lights', 'off') %}
        {% if state_attr('binary_sensor.recommended_scene_in_elenas_room','lights_level') == 0 %}
          {% set elenas_room.lights = true %}
        {% endif %}
      {% elif is_state('light.elenas_room_lights', 'on') %}
        {% if state_attr('light.elenas_room_lights','brightness') != None %}
          {% if (state_attr('light.elenas_room_lights','brightness') / 255) | round(2) == (state_attr('binary_sensor.recommended_scene_in_elenas_room','lights_level') / 100) | round(2) %}
            {% set elenas_room.lights = true %}
          {% endif %}
        {% endif %}
      {% endif %}

      {% if is_state('fan.elenas_room_fan','on') %}
        {% if state_attr('fan.elenas_room_fan','percentage') == state_attr('binary_sensor.recommended_scene_in_elenas_room','fan_speed') %}
          {% set elenas_room.fan = true %}
        {% endif %}
      {% endif %}

      {% if states('climate.elenas_room_ac') == state_attr('binary_sensor.recommended_scene_in_elenas_room','ac_state') %}
        {% set elenas_room.ac = true %}
      {% endif %}

      {{ elenas_room.lights == true and elenas_room.fan == true and elenas_room.ac == true }}
    availability: >
      {{ states('light.elenas_room_lights') in ['on','off'] and 
         states('fan.elenas_room_fan') in ['on','off'] and 
         states('climate.elenas_room_ac') in ['off','cool'] }}
    attributes:
      lights_level: >
        {% if (now().time() > strptime(states('input_datetime.wind_down'), '%H:%M:%S').time()
           and now().time() <= strptime(states('input_datetime.sleep_hours_start'), '%H:%M:%S').time())
        %}
          {{ states('input_number.night_light_brightness') }}
        {% elif (now().time() > strptime(states('input_datetime.sleep_hours_end'), '%H:%M:%S').time()
           and states('sun.sun') == 'below_horizon' and state_attr('sun.sun', 'rising') == true)
        %}
          {{ states('input_number.morning_light_brightness') }}
        {% elif (states('sensor.elenas_room_lux') | int(0) < states('input_number.minimum_lux') | int(0))
           and (now().time() <= strptime(states('input_datetime.wind_down'), '%H:%M:%S').time())
           and not (now().time() > strptime(states('input_datetime.sleep_hours_start'), '%H:%M:%S').time()
                    or now().time() <= strptime(states('input_datetime.sleep_hours_end'), '%H:%M:%S').time()) 
        %}
          100
        {% else %}
          0
        {% endif %}
      fan_speed: >
        {% if (is_state('binary_sensor.elenas_room_door','off'))
           or (is_state('binary_sensor.elenas_room_door','on') and is_state('climate.dining_room_ac','cool')) %}
          {{ ((states('input_number.fans_po_eco_speed_when_ac_on') | int(0) / 6) | round(2) * 100) | int(0) }}
        {% else %}
          {{ ((states('input_number.fans_po_eco_speed_when_ac_off') | int(0) / 6) | round(2) * 100) | int(0) }}
        {% endif %}
      ac_state: >
        {% if (is_state('binary_sensor.elenas_room_door','off'))
           or (is_state('binary_sensor.elenas_room_door','on') and is_state('climate.dining_room_ac','cool')) %}
          cool
        {% else %}
          off
        {% endif %}
      ac_auto_control: >
        {% if  ((now().time() | string)[:2] | int * 60 + (now().time() | string)[3:5] | int >=
                 states('input_datetime.elenas_bedtime')[:2] | int * 60 + states('input_datetime.elenas_bedtime')[3:5] | int) 
           or ((now().time() | string)[:2] | int * 60 + (now().time() | string)[3:5] | int <
               states('input_datetime.sleep_hours_end')[:2] | int * 60 + states('input_datetime.sleep_hours_end')[3:5] | int)
        %}
          on
        {% else %}
          off
        {% endif %}

  - name: Recommended Scene in Eli's Room
    unique_id: binary_sensor.recommended_scene_in_elis_room
    state: >
      {% set elis_room = namespace(lights = false, fan = false, ac = false) %}
      {% if is_state('light.elis_room_lights', 'off') %}
        {% if state_attr('binary_sensor.recommended_scene_in_elis_room','lights_level') == 0 %}
          {% set elis_room.lights = true %}
        {% endif %}
      {% elif is_state('light.elis_room_lights', 'on') %}
        {% if state_attr('light.elis_room_lights','brightness') != None %}
          {% if (state_attr('light.elis_room_lights','brightness') / 255) | round(2) == (state_attr('binary_sensor.recommended_scene_in_elis_room','lights_level') / 100) | round(2) %}
            {% set elis_room.lights = true %}
          {% endif %}
        {% endif %}
      {% endif %}

      {% if is_state('fan.elis_room_fan','on') %}
        {% if state_attr('fan.elis_room_fan','percentage') == state_attr('binary_sensor.recommended_scene_in_elis_room','fan_speed') %}
          {% set elis_room.fan = true %}
        {% endif %}
      {% endif %}

      {% if states('climate.elis_room_ac') == state_attr('binary_sensor.recommended_scene_in_elis_room','ac_state') %}
        {% set elis_room.ac = true %}
      {% endif %}

      {{ elis_room.lights == true and elis_room.fan == true and elis_room.ac == true }}
    availability: >
      {{ states('light.elis_room_lights') in ['on','off'] and 
         states('fan.elis_room_fan') in ['on','off'] and 
         states('climate.elis_room_ac') in ['off','cool'] }}
    attributes:
      lights_level: >
        {% if (now().time() > strptime(states('input_datetime.wind_down'), '%H:%M:%S').time()
           and now().time() <= strptime(states('input_datetime.sleep_hours_start'), '%H:%M:%S').time())
        %}
          {{ states('input_number.night_light_brightness') }}
        {% elif (now().time() > strptime(states('input_datetime.sleep_hours_end'), '%H:%M:%S').time()
           and states('sun.sun') == 'below_horizon' and state_attr('sun.sun', 'rising') == true)
        %}
          {{ states('input_number.morning_light_brightness') }}
        {% elif (states('sensor.elis_room_lux') | int(0) < states('input_number.minimum_lux') | int(0))
           and (now().time() <= strptime(states('input_datetime.wind_down'), '%H:%M:%S').time())
           and not (now().time() > strptime(states('input_datetime.sleep_hours_start'), '%H:%M:%S').time()
                    or now().time() <= strptime(states('input_datetime.sleep_hours_end'), '%H:%M:%S').time()) 
        %}
          100
        {% else %}
          0
        {% endif %}
      fan_speed: >
        {% if (is_state('binary_sensor.elis_room_door','off'))
           or (is_state('binary_sensor.elis_room_door','on') and is_state('climate.dining_room_ac','cool')) %}
          {{ ((states('input_number.fans_po_eco_speed_when_ac_on') | int(0) / 6) | round(2) * 100) | int(0) }}
        {% else %}
          {{ ((states('input_number.fans_po_eco_speed_when_ac_off') | int(0) / 6) | round(2) * 100) | int(0) }}
        {% endif %}
      ac_state: >
        {% if (is_state('binary_sensor.elis_room_door','off'))
           or (is_state('binary_sensor.elis_room_door','on') and is_state('climate.dining_room_ac','cool')) %}
          cool
        {% else %}
          off
        {% endif %}
      ac_auto_control: >
        {% if  ((now().time() | string)[:2] | int * 60 + (now().time() | string)[3:5] | int >=
                 states('input_datetime.sleep_hours_start')[:2] | int * 60 + states('input_datetime.sleep_hours_start')[3:5] | int) 
           or ((now().time() | string)[:2] | int * 60 + (now().time() | string)[3:5] | int <
               states('input_datetime.sleep_hours_end')[:2] | int * 60 + states('input_datetime.sleep_hours_end')[3:5] | int)
        %}
          on
        {% else %}
          off
        {% endif %}

  - name: Recommended Scene in Dining Room
    unique_id: binary_sensor.recommended_scene_in_dining_room
    state: >
      {% set dining_room = namespace(lights = false, pendant_light = false, fan = false, ac = false) %}
      {% if is_state('light.dining_room_lights', 'off') %}
        {% if state_attr('binary_sensor.recommended_scene_in_dining_room','lights_level') == 0 %}
          {% set dining_room.lights = true %}
        {% endif %}
      {% elif is_state('light.dining_room_lights', 'on') %}
        {% if state_attr('light.dining_room_lights','brightness') != None %}
          {% if (state_attr('light.dining_room_lights','brightness') / 255) | round(2) == (state_attr('binary_sensor.recommended_scene_in_dining_room','lights_level') / 100) | round(2) %}
            {% set dining_room.lights = true %}
          {% endif %}
        {% endif %}
      {% endif %}

      {% if is_state('light.dining_room_pendant_light_entity', 'off') %}
        {% if state_attr('binary_sensor.recommended_scene_in_dining_room','pendant_light_level') == 0 %}
          {% set dining_room.pendant_light = true %}
        {% endif %}
      {% elif is_state('light.dining_room_pendant_light_entity', 'on') %}
        {% if state_attr('light.dining_room_pendant_light_entity','brightness') != None %}
          {% if (state_attr('light.dining_room_pendant_light_entity','brightness') / 255) | round(2) == (state_attr('binary_sensor.recommended_scene_in_dining_room','pendant_light_level') / 100) | round(2) %}
            {% set dining_room.pendant_light = true %}
          {% endif %}
        {% endif %}
      {% endif %}

      {% if is_state('fan.dining_room_fan','on') %}
        {% if state_attr('fan.dining_room_fan','percentage') == state_attr('binary_sensor.recommended_scene_in_dining_room','fan_speed') %}
          {% set dining_room.fan = true %}
        {% endif %}
      {% endif %}

      {% if states('climate.dining_room_ac') == state_attr('binary_sensor.recommended_scene_in_dining_room','ac_state') %}
        {% set dining_room.ac = true %}
      {% endif %}

      {{ dining_room.lights == true and dining_room.pendant_light == true and dining_room.fan == true and dining_room.ac == true }}
    availability: >
      {{ states('light.dining_room_lights') in ['on','off'] and 
         states('light.dining_room_pendant_light_entity') in ['on','off'] and 
         states('fan.dining_room_fan') in ['on','off'] and 
         states('climate.dining_room_ac') in ['off','cool'] }}
    attributes:
      lights_level: >
        {% if state_attr('sun.sun', 'rising') == true %}
          {% if is_state('sun.sun', 'below_horizon') %}
            0
          {% elif states('sensor.dining_room_lux') | int(1000) < states('input_number.minimum_lux') | int(0) %}
            100
          {% else %}
            0
          {% endif %}
        {% else %}
          {% if states('sensor.dining_room_lux') | int(1000) > states('input_number.minimum_lux') | int(0) 
             or (now().time() > strptime(states('input_datetime.wind_down'), '%H:%M:%S').time() and states('input_boolean.party_mode') == 'off') %}
            0
          {% else %}
            100
          {% endif %}
        {% endif %}
      pendant_light_level: >
        {% if (now().time() > strptime(states('input_datetime.wind_down'), '%H:%M:%S').time()
           and now().time() <= strptime(states('input_datetime.sleep_hours_start'), '%H:%M:%S').time())
        %}
          {% if states('input_boolean.party_mode') == 'off' %}
            {{ states('input_number.night_light_brightness') }}
          {% else %}
            100
          {% endif %}
        {% elif (now().time() > strptime(states('input_datetime.sleep_hours_end'), '%H:%M:%S').time()
           and states('sun.sun') == 'below_horizon' and state_attr('sun.sun', 'rising') == true)
        %}
          {{ states('input_number.morning_light_brightness') }}
        {% elif states('sensor.dining_room_lux') | int(0) < states('input_number.minimum_lux') | int(0) %}
          100
        {% else %}
          0
        {% endif %}
      fan_speed: >
        {% if is_state('binary_sensor.hallway_doors','off')
           and is_state('binary_sensor.yard_window','off')
           and is_state('cover.kitchen_blinds','closed')
           and is_state('binary_sensor.parents_room_door','off')
           and is_state('binary_sensor.main_door', 'off') %}
          {{ ((states('input_number.fans_po_eco_speed_when_ac_on') | int(0) / 6) | round(4) * 100) | int(0) }}
        {% else %}
          {{ ((states('input_number.fans_po_eco_speed_when_ac_off') | int(0) / 6) | round(4) * 100) | int(0) }}
        {% endif %}
      ac_state: >
        {% if is_state('binary_sensor.hallway_doors','off')
           and is_state('binary_sensor.yard_window','off')
           and is_state('cover.kitchen_blinds','closed')
           and is_state('binary_sensor.parents_room_door','off')
           and is_state('binary_sensor.main_door', 'off') %}
          cool
        {% else %}
          off
        {% endif %}

  - name: Recommended Scene in Living Room
    unique_id: binary_sensor.recommended_scene_in_living_room
    state: >
      {% set living_room = namespace(lights = false, pendant_light = false, fan = false, ac = false) %}
      {% if is_state('light.living_room_lights', 'off') %}
        {% if state_attr('binary_sensor.recommended_scene_in_living_room','lights_level') == 0 %}
          {% set living_room.lights = true %}
        {% endif %}
      {% elif is_state('light.living_room_lights', 'on') %}
        {% if state_attr('light.living_room_lights','brightness') != None %}
          {% if (state_attr('light.living_room_lights','brightness') / 255) | round(2) == (state_attr('binary_sensor.recommended_scene_in_living_room','lights_level') / 100) | round(2) %}
            {% set living_room.lights = true %}
          {% endif %}
        {% endif %}
      {% endif %}

      {% if is_state('light.living_room_pendant_light_entity', 'off') %}
        {% if state_attr('binary_sensor.recommended_scene_in_living_room','pendant_light_level') == 0 %}
          {% set living_room.pendant_light = true %}
        {% endif %}
      {% elif is_state('light.living_room_pendant_light_entity', 'on') %}
        {% if state_attr('light.living_room_pendant_light_entity','brightness') != None %}
          {% if (state_attr('light.living_room_pendant_light_entity','brightness') / 255) | round(2) == (state_attr('binary_sensor.recommended_scene_in_living_room','pendant_light_level') / 100) | round(2) %}
            {% set living_room.pendant_light = true %}
          {% endif %}
        {% endif %}
      {% endif %}

      {% if is_state('fan.living_room_fan','on') %}
        {% if state_attr('fan.living_room_fan','percentage') == state_attr('binary_sensor.recommended_scene_in_living_room','fan_speed') %}
          {% set living_room.fan = true %}
        {% endif %}
      {% endif %}

      {% if states('climate.living_room_ac') == state_attr('binary_sensor.recommended_scene_in_living_room','ac_state') %}
        {% set living_room.ac = true %}
      {% endif %}

      {{ living_room.lights == true and living_room.pendant_light == true and living_room.fan == true and living_room.ac == true }}
    availability: >
      {{ states('light.living_room_lights') in ['on','off'] and 
         states('light.living_room_pendant_light_entity') in ['on','off'] and 
         states('fan.living_room_fan') in ['on','off'] and 
         states('climate.living_room_ac') in ['off','cool'] }}
    attributes:
      lights_level: >
        {% if state_attr('sun.sun', 'rising') == true %}
          {% if is_state('sun.sun', 'below_horizon') %}
            0
          {% elif states('sensor.living_room_lux') | int(1000) < states('input_number.minimum_lux') | int(0) %}
            100
          {% else %}
            0
          {% endif %}
        {% else %}
          {% if states('sensor.living_room_lux') | int(1000) > states('input_number.minimum_lux') | int(0) 
             or (now().time() > strptime(states('input_datetime.wind_down'), '%H:%M:%S').time() and states('input_boolean.party_mode') == 'off') %}
            0
          {% else %}
            100
          {% endif %}
        {% endif %}
      pendant_light_level: >
        {% if (now().time() > strptime(states('input_datetime.wind_down'), '%H:%M:%S').time()
           and now().time() <= strptime(states('input_datetime.sleep_hours_start'), '%H:%M:%S').time())
        %}
          {% if states('input_boolean.party_mode') == 'off' %}
            {{ states('input_number.night_light_brightness') }}
          {% else %}
            100
          {% endif %}
        {% elif (now().time() > strptime(states('input_datetime.sleep_hours_end'), '%H:%M:%S').time()
           and states('sun.sun') == 'below_horizon' and state_attr('sun.sun', 'rising') == true)
        %}
          {{ states('input_number.morning_light_brightness') }}
        {% elif states('sensor.living_room_lux') | int(0) < states('input_number.minimum_lux') | int(0) %}
          100
        {% else %}
          0
        {% endif %}
      fan_speed: >
        {% if is_state('binary_sensor.hallway_doors','off')
           and is_state('binary_sensor.yard_window','off')
           and is_state('cover.kitchen_blinds','closed')
           and is_state('binary_sensor.parents_room_door','off')
           and is_state('binary_sensor.main_door', 'off') %}
          {{ ((states('input_number.fans_lucci_speed_when_ac_on') | int(0) / 6) | round(2) * 100) | int(0) }}
        {% else %}
          {{ ((states('input_number.fans_lucci_speed_when_ac_off') | int(0) / 6) | round(2) * 100) | int(0) }}
        {% endif %}
      ac_state: >
        {% if is_state('binary_sensor.hallway_doors','off')
           and is_state('binary_sensor.yard_window','off')
           and is_state('cover.kitchen_blinds','closed')
           and is_state('binary_sensor.parents_room_door','off')
           and is_state('binary_sensor.main_door', 'off') %}
          cool
        {% else %}
          off
        {% endif %}

  - name: Recommended Scene in Study Room
    unique_id: binary_sensor.recommended_scene_in_study_room
    state: >
      {% set study_room = namespace(lights = false, fan = false, ac = false) %}
      {% if is_state('light.study_room_lights', 'off') %}
        {% if state_attr('binary_sensor.recommended_scene_in_study_room','lights_level') == 0 %}
          {% set study_room.lights = true %}
        {% endif %}
      {% elif is_state('light.study_room_lights', 'on') %}
        {% if state_attr('light.study_room_lights','brightness') != None %}
          {% if (state_attr('light.study_room_lights','brightness') / 255) | round(2) == (state_attr('binary_sensor.recommended_scene_in_study_room','lights_level') / 100) | round(2) %}
            {% set study_room.lights = true %}
          {% endif %}
        {% endif %}
      {% endif %}

      {% if is_state('fan.study_room_fan','on') %}
        {% if state_attr('fan.study_room_fan','percentage') == state_attr('binary_sensor.recommended_scene_in_study_room','fan_speed') %}
          {% set study_room.fan = true %}
        {% endif %}
      {% endif %}

      {% if states('climate.study_room_ac') == state_attr('binary_sensor.recommended_scene_in_study_room','ac_state') %}
        {% set study_room.ac = true %}
      {% endif %}

      {{ study_room.lights == true and study_room.fan == true and study_room.ac == true }}
    availability: >
      {{ states('light.study_room_lights') in ['on','off'] and 
         states('fan.study_room_fan') in ['on','off'] and 
         states('climate.study_room_ac') in ['off','cool'] }}
    attributes:
      lights_level: >
        {% if (now().time() > strptime(states('input_datetime.wind_down'), '%H:%M:%S').time()
           and now().time() <= strptime(states('input_datetime.sleep_hours_start'), '%H:%M:%S').time())
        %}
          {% if states('input_boolean.party_mode') == 'off' %}
            {{ states('input_number.night_light_brightness') }}
          {% else %}
            100
          {% endif %}
        {% elif (now().time() > strptime(states('input_datetime.sleep_hours_end'), '%H:%M:%S').time()
           and states('sun.sun') == 'below_horizon' and state_attr('sun.sun', 'rising') == true)
        %}
          {{ states('input_number.morning_light_brightness') }}
        {% elif states('sensor.study_walkway_lux') | int(0) < states('input_number.minimum_lux') | int(0) %}
          100
        {% else %}
          0
        {% endif %}
      fan_speed: >
        {% if is_state('binary_sensor.hallway_doors','off')
           and is_state('binary_sensor.yard_window','off')
           and is_state('cover.kitchen_blinds','closed')
           and is_state('binary_sensor.parents_room_door','off')
           and is_state('binary_sensor.main_door', 'off') %}
          {{ ((states('input_number.fans_lucci_speed_when_ac_on') | int(0) / 6) | round(2) * 100) | int(0) }}
        {% else %}
          {{ ((states('input_number.fans_lucci_speed_when_ac_off') | int(0) / 6) | round(2) * 100) | int(0) }}
        {% endif %}
      ac_state: >
        {% if is_state('binary_sensor.hallway_doors','off')
           and is_state('binary_sensor.yard_window','off')
           and is_state('cover.kitchen_blinds','closed')
           and is_state('binary_sensor.parents_room_door','off')
           and is_state('binary_sensor.main_door', 'off') %}
          cool
        {% else %}
          off
        {% endif %}

  - name: Recommended Scene in Parents' Room
    unique_id: binary_sensor.recommended_scene_in_parents_room
    state: >
      {% set parents_room = namespace(lights = false, fan = false, ac = false) %}
      {% if is_state('light.parents_room_lights', 'off') %}
        {% if state_attr('binary_sensor.recommended_scene_in_parents_room','lights_level') == 0 %}
          {% set parents_room.lights = true %}
        {% endif %}
      {% elif is_state('light.parents_room_lights', 'on') %}
        {% if state_attr('light.parents_room_lights','brightness') != None %}
          {% if (state_attr('light.parents_room_lights','brightness') / 255) | round(2) == (state_attr('binary_sensor.recommended_scene_in_parents_room','lights_level') / 100) | round(2) %}
            {% set parents_room.lights = true %}
          {% endif %}
        {% endif %}
      {% endif %}

      {% if is_state('fan.parents_room_fan','on') %}
        {% if state_attr('fan.parents_room_fan','percentage') == state_attr('binary_sensor.recommended_scene_in_parents_room','fan_speed') %}
          {% set parents_room.fan = true %}
        {% endif %}
      {% endif %}

      {% if states('climate.parents_room_ac') == state_attr('binary_sensor.recommended_scene_in_parents_room','ac_state') %}
        {% set parents_room.ac = true %}
      {% endif %}

      {{ parents_room.lights == true and parents_room.fan == true and parents_room.ac == true }}
    availability: >
      {{ states('light.parents_room_lights') in ['on','off'] and 
         states('fan.parents_room_fan') in ['on','off'] and 
         states('climate.parents_room_ac') in ['off','cool'] }}
    attributes:
      lights_level: >
        {% if (now().time() > strptime(states('input_datetime.wind_down'), '%H:%M:%S').time()
           and now().time() <= strptime(states('input_datetime.sleep_hours_start'), '%H:%M:%S').time())
        %}
          {{ states('input_number.night_light_brightness') }}
        {% elif (now().time() > strptime(states('input_datetime.sleep_hours_end'), '%H:%M:%S').time()
           and states('sun.sun') == 'below_horizon' and state_attr('sun.sun', 'rising') == true)
        %}
          {{ states('input_number.morning_light_brightness') }}
        {% elif (states('sensor.parents_room_lux') | int(0) < states('input_number.minimum_lux') | int(0))
           and (now().time() <= strptime(states('input_datetime.wind_down'), '%H:%M:%S').time())
           and not (now().time() > strptime(states('input_datetime.sleep_hours_start'), '%H:%M:%S').time()
                    or now().time() <= strptime(states('input_datetime.sleep_hours_end'), '%H:%M:%S').time()) 
        %}
          100
        {% else %}
          0
        {% endif %}
      fan_speed: >
        {% if (is_state('binary_sensor.parents_room_doors','off'))
           or (is_state('binary_sensor.parents_room_doors','on') and is_state('climate.dining_room_ac','cool')) %}
          {{ ((states('input_number.fans_po_eco_speed_when_ac_on') | int(0) / 6) | round(2) * 100) | int(0) }}
        {% else %}
          {{ ((states('input_number.fans_po_eco_speed_when_ac_off') | int(0) / 6) | round(2) * 100) | int(0) }}
        {% endif %}
      ac_state: >
        {% if (is_state('binary_sensor.parents_room_doors','off'))
           or (is_state('binary_sensor.parents_room_doors','on') and is_state('climate.dining_room_ac','cool')) %}
          cool
        {% else %}
          off
        {% endif %}
      ac_auto_control: >
        {% if  ((now().time() | string)[:2] | int * 60 + (now().time() | string)[3:5] | int >=
                 states('input_datetime.sleep_hours_start')[:2] | int * 60 + states('input_datetime.sleep_hours_start')[3:5] | int) 
           or ((now().time() | string)[:2] | int * 60 + (now().time() | string)[3:5] | int <
               states('input_datetime.sleep_hours_end')[:2] | int * 60 + states('input_datetime.sleep_hours_end')[3:5] | int)
        %}
          on
        {% else %}
          off
        {% endif %}

  - name: Washer Tub Dirty
    unique_id: binary_sensor.washer_tub_dirty
    state: "{{ states('sensor.washer_tub_clean_counter') | int(0) > 30 }}"

  - name: Study Room Ethernet Connection
    unique_id: binary_sensor.study_room_ethernet_connection
    state: "{{ 'home' in states.device_tracker | selectattr('entity_id', 'search', '._ethernet') | map(attribute = 'state') | list }}"
    device_class: motion

- sensor:
  - name: Washer Status
    unique_id: sensor.washer_status
    state: >
      {% if is_state('sensor.washer','off') %}
        Off
      {% else %}
        {{ state_attr('sensor.washer', 'run_state') }}
      {% endif %}
    attributes:
      washer_power: "{{ states('sensor.washer') }}"
      washer_run_state: "{{ state_attr('sensor.washer', 'run_state') }}"
      washer_remaining_time: "{{ state_attr('sensor.washer', 'remain_time')[:-3] }}"
      washer_reserve_time: "{{ state_attr('sensor.washer', 'reserve_time')[:-3] }}"

  - name: Washer Countdown
    unique_id: sensor.washer_countdown
    state: >
      {% if states('sensor.washer_status') == 'Delay Set' %}
        {{ states('sensor.washer_countdown_time')[:-3] }}
      {% elif states('sensor.washer_status') in ['Washing', 'Rinsing', 'Spinning'] %}
        {{ states('sensor.washer_remaining_time')[:-3] }}
      {% else %}
        -
      {% endif %}

  - name: Elena's Room AC Status
    unique_id: sensor.elenas_room_ac_status
    state: >
      {% if is_state('automation.elenas_room_ac_auto_control', 'on') %}
        auto
      {% else %}
        {{ states('climate.elenas_room_ac') }}
      {% endif %}
    attributes:
      ac_state: "{{ states('climate.elenas_room_ac') }}"
      ac_auto_control: "{{ states('automation.elenas_room_ac_auto_control') }}"

  - name: Eli's Room AC Status
    unique_id: sensor.elis_room_ac_status
    state: >
      {% if is_state('automation.elis_room_ac_auto_control', 'on') %}
        auto
      {% else %}
        {{ states('climate.elis_room_ac') }}
      {% endif %}
    attributes:
      ac_state: "{{ states('climate.elis_room_ac') }}"
      ac_auto_control: "{{ states('automation.elis_room_ac_auto_control') }}"

  - name: Parents' Room AC Status
    unique_id: sensor.parents_room_ac_status
    state: >
      {% if is_state('automation.parents_room_ac_auto_control', 'on') %}
        auto
      {% else %}
        {{ states('climate.parents_room_ac') }}
      {% endif %}
    attributes:
      ac_state: "{{ states('climate.parents_room_ac') }}"
      ac_auto_control: "{{ states('automation.parents_room_ac_auto_control') }}"

  - name: Dining Room Fan Direction
    unique_id: sensor.dining_room_fan_direction
    state: "{{ state_attr('fan.dining_room_fan', 'direction') }}"

  - name: Raining With Yard Windows Open
    unique_id: sensor.raining_with_yard_windows_open
    state: >
      {% from 'weather.jinja' import raining_with_window_open %}
      {{ raining_with_window_open('binary_sensor.yard_window') }}
    attributes:
      yard_window: "{{ states('binary_sensor.yard_window') }}"
      local_rainfall: "{{ states('sensor.local_rainfall') }}"
      local_two_hour_forecast: "{{ states('sensor.local_two_hour_forecast') }}"

  - name: Raining With Kitchen Window Open
    unique_id: sensor.raining_with_kitchen_window_open
    state: >
      {% from 'weather.jinja' import raining_with_window_open %}
      {{ raining_with_window_open('binary_sensor.kitchen_window') }}
    attributes:
      yard_window: "{{ states('binary_sensor.kitchen_window') }}"
      local_rainfall: "{{ states('sensor.local_rainfall') }}"
      local_two_hour_forecast: "{{ states('sensor.local_two_hour_forecast') }}"

  - name: Raining With Windows Open
    unique_id: sensor.raining_with_windows_open
    state: >
      {% from 'weather.jinja' import raining_with_window_open %}
      {% set status = [raining_with_window_open('binary_sensor.yard_window'), raining_with_window_open('binary_sensor.kitchen_window')] %}
      {% if 'alert' in status %}
        alert
      {% elif 'warning' in status %}
        warning
      {% else %}
        clear
      {% endif %}
    attributes:
      kitchen_window: "{{ states('binary_sensor.kitchen_window') }}"
      yard_window: "{{ states('binary_sensor.yard_window') }}"
      local_rainfall: "{{ states('sensor.local_rainfall') }}"
      local_two_hour_forecast: "{{ states('sensor.local_two_hour_forecast') }}"

  - name: Vacuum Clean Time
    unique_id: sensor.vacuum_clean_time
    state: >
      {% from 'text_formatting.jinja' import run_time %}
      {{ run_time(states('input_datetime.vacuum_last_run_start') | as_datetime,
                  states('input_datetime.vacuum_last_run_end') | as_datetime,
                  -3) }}

  - name: Dishwasher Last Run Duration
    unique_id: sensor.dishwasher_last_run_duration
    state: >
      {% from 'text_formatting.jinja' import run_time %}
      {{ run_time(states('input_datetime.dishwasher_last_run_start') | as_datetime,
                  states('input_datetime.dishwasher_last_run_end') | as_datetime,
                  -3) }}

  - name: Rice Cooker Last Run Duration
    unique_id: sensor.rice_cooker_last_run_duration
    state: >
      {% from 'text_formatting.jinja' import run_time %}
      {{ run_time(states('input_datetime.rice_cooker_last_run_start') | as_datetime,
                  states('input_datetime.rice_cooker_last_run_end') | as_datetime,
                  -3) }}

- trigger:
  - platform: time_pattern
    minutes: '/1'
  sensor:
    - name: Washer Last Wash Completed
      unique_id: sensor.washer_last_wash_completed
      state: >
        {% if states('sensor.washer_status') == 'Off' %}
          {% from 'text_formatting.jinja' import relative_age %}
          {{ relative_age(states('input_datetime.washer_last_wash_complete') | as_datetime) }}
        {% else %}
          In use
        {% endif %}

    - name: Vacuum Last Run Started
      unique_id: sensor.vacuum_last_run_started
      state: >
        {% from 'text_formatting.jinja' import relative_age %}
        {{ relative_age(states('input_datetime.vacuum_last_run_start') | as_datetime) }}
      
    - name: Vacuum Last Run Ended
      unique_id: sensor.vacuum_last_run_ended
      state: >
        {% from 'text_formatting.jinja' import relative_age %}
        {{ relative_age(states('input_datetime.vacuum_last_run_end') | as_datetime) }}
    
    - name: Dishwasher Last Run Started
      unique_id: sensor.dishwasher_last_run_started
      state: >
        {% from 'text_formatting.jinja' import relative_age %}
        {{ relative_age(states('input_datetime.dishwasher_last_run_start') | as_datetime) }}

    - name: Dishwasher Last Run Ended
      unique_id: sensor.dishwasher_last_run_ended
      state: >
        {% from 'text_formatting.jinja' import relative_age %}
        {{ relative_age(states('input_datetime.dishwasher_last_run_end') | as_datetime) }}

    - name: Rice Cooker Last Run Started
      unique_id: sensor.rice_cooker_last_run_started
      state: >
        {% from 'text_formatting.jinja' import relative_age %}
        {{ relative_age(states('input_datetime.rice_cooker_last_run_start') | as_datetime) }}

    - name: Rice Cooker Last Run Ended
      unique_id: sensor.rice_cooker_last_run_ended
      state: >
        {% from 'text_formatting.jinja' import relative_age %}
        {{ relative_age(states('input_datetime.rice_cooker_last_run_end') | as_datetime) }}

    - name: Stove Last Use
      unique_id: sensor.stove_last_use
      state: >
        {% if states('switch.stove_main_power') == 'off' %}
          {% from 'text_formatting.jinja' import relative_age %}
          {{ relative_age(states.switch.stove_main_power.last_changed) }}
        {% else %}
          In use
        {% endif %}

    - name: Proxmox Last Boot
      unique_id: sensor.proxmox_last_boot
      state: >
        {% from 'text_formatting.jinja' import relative_age %}
        {{ relative_age(states('sensor.node_proxmox_192_168_18_41_8006_uptime') | as_datetime) }}

    - name: Home Assistant Last Boot
      unique_id: sensor.home_assistant_last_boot
      state: >
        {% from 'text_formatting.jinja' import relative_age %}
        {{ relative_age(states('sensor.last_boot') | as_datetime) }}

    - name: pfSense Last Boot
      unique_id: sensor.pfsense_last_boot
      state: >
        {% from 'text_formatting.jinja' import relative_age %}
        {{ relative_age(states('sensor.pfsense_system_boottime') | as_datetime) }}

- trigger:
  - platform: state
    entity_id: sensor.adguard_home_dns_queries
    not_from:
      - unknown
      - unavailable
    not_to:
      - unknown
      - unavailable
    id: state_changed
  - platform: time_pattern
    minutes: "/1"
    id: stale_check
  sensor:
    - name: DNS Queries within 5min
      unique_id: sensor.dns_queries_within_5min
      state: >
        {% if trigger.id == 'stale_check' %}
          {% if now() - states.sensor.adguard_home_dns_queries.last_changed > timedelta(minutes = 5) %}
            0
          {% else %}
            {{ states('sensor.dns_queries_within_5min') }}
          {% endif %}
        {% elif trigger.to_state.state | int(0) - trigger.from_state.state | int(0) > 0 %}
          {{ trigger.to_state.state | int(0) - trigger.from_state.state | int(0) }}
        {% else %}
          0
        {% endif %}
      unit_of_measurement: queries
      attributes:
        timestamp: "{{ now() }}"

- trigger:
  - platform: state
    entity_id: sensor.adguard_home_dns_queries_blocked
    not_from:
      - unknown
      - unavailable
    not_to:
      - unknown
      - unavailable
    id: state_changed
  - platform: time_pattern
    minutes: "/1"
    id: stale_check
  sensor:
    - name: DNS Queries Blocked by Filters within 5min
      unique_id: sensor.dns_queries_blocked_by_filters_within_5min
      state: >
        {% if trigger.id == 'stale_check' %}
          {% if now() - states.sensor.adguard_home_dns_queries_blocked.last_changed > timedelta(minutes = 5) %}
            0
          {% else %}
            {{ states('sensor.dns_queries_blocked_by_filters_within_5min') }}
          {% endif %}
        {% elif trigger.to_state.state | int(0) - trigger.from_state.state | int(0) > 0%}
          {{ trigger.to_state.state | int(0) - trigger.from_state.state | int(0) }}
        {% else %}
          0
        {% endif %}
      unit_of_measurement: queries
      attributes:
        timestamp: "{{ now() }}"

- trigger:
  - platform: state
    entity_id:
      - sensor.dns_queries_within_5min
      - sensor.dns_queries_blocked_by_filters_within_5min
    not_from:
      - unknown
      - unavailable
    not_to:
      - unknown
      - unavailable
    for:
      minutes: 1
      seconds: 1
  sensor:
    - name: DNS Query Filter Block Rate within 5min
      unique_id: sensor.dns_query_filter_block_rate_within_5min
      state: "{{ ((states('sensor.dns_queries_blocked_by_filters_within_5min') | int(0) / states('sensor.dns_queries_within_5min') | int(1)) * 100) | round(2) if states('sensor.dns_queries_within_5min') | int(1) > 0 else 0 }}"
      unit_of_measurement: '%'

- trigger:
  - platform: state
    entity_id: sensor.proxmox_pfsense_100_network_in
    not_from:
      - unknown
      - unavailable
    not_to:
      - unknown
      - unavailable
  sensor:
    - name: pfSense MB In within 1min
      unique_id: sensor.pfsense_mb_in_within_1min
      state: "{{ trigger.to_state.state | float(0) - trigger.from_state.state | float(0) }}"
      unit_of_measurement: MB
      attributes:
        timestamp: "{{ now() }}"

- trigger:
  - platform: state
    entity_id: sensor.proxmox_pfsense_100_network_out
    not_from:
      - unknown
      - unavailable
    not_to:
      - unknown
      - unavailable
  sensor:
    - name: pfSense MB Out within 1min
      unique_id: sensor.pfsense_mb_out_within_1min
      state: "{{ trigger.to_state.state | float(0) - trigger.from_state.state | float(0) }}"
      unit_of_measurement: MB
      attributes:
        timestamp: "{{ now() }}"

- trigger:
  - platform: state
    entity_id: sensor.proxmox_eloquent_house_101_network_in
    not_from:
      - unknown
      - unavailable
    not_to:
      - unknown
      - unavailable
  sensor:
    - name: Home Assistant MB In within 1min
      unique_id: sensor.home_assistant_mb_in_within_1min
      state: "{{ trigger.to_state.state | float(0) - trigger.from_state.state | float(0) }}"
      unit_of_measurement: MB
      attributes:
        timestamp: "{{ now() }}"

- trigger:
  - platform: state
    entity_id: sensor.proxmox_eloquent_house_101_network_out
    not_from:
      - unknown
      - unavailable
    not_to:
      - unknown
      - unavailable
  sensor:
    - name: Home Assistant MB Out within 1min
      unique_id: sensor.home_assistant_mb_out_within_1min
      state: "{{ trigger.to_state.state | float(0) - trigger.from_state.state | float(0) }}"
      unit_of_measurement: MB
      attributes:
        timestamp: "{{ now() }}"