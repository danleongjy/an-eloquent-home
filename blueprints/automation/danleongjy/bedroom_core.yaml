blueprint:
  name: Bedroom Core
  description: Interface between bedroom devices and Home Assistant via ESPHome and M5Stack Fire
  domain: automation
  input:
    bedroom:
      name: Bedroom
      description: The bedroom that the M5Stack Fire is in
      selector:
        select:
          options:
            - label: Parents' Room
              value: parents_room
            - label: Eli's Room
              value: elis_room
            - label: Elena's Room
              value: elenas_room
    auto_control_indicator_light:
      name: Auto Control Indicator Light
      description: The light that should flash when AC/fan auto control is toggled
      selector:
        entity:
          domain: light
    sleep_hours_start:
      name: Sleep Hours Start
      description: Input datetime indicating when sleep hours start
      selector:
        entity:
          domain: input_datetime
    sleep_hours_end:
      name: Sleep Hours End
      description: Input datetime indicating when sleep hours end
      selector:
        entity:
          domain: input_datetime
trigger_variables:
  room: !input bedroom
trigger:
  - platform: template
    value_template: "{{ not is_state('select.' + room + '_core_current_command','none') }}"
    id: new_command
  - platform: template
    value_template: >-
      {{ is_state('binary_sensor.' + room + '_motion', 'off') and
      is_state('light.' + room + '_lights', 'off') and
      is_state('fan.' + room + '_fan', 'off') and
      is_state('climate.' + room + '_ac', 'off') }}
    id: all_off
  - platform: template
    value_template: >-
      {{ is_state('binary_sensor.' + room + '_motion', 'on') or
      is_state('light.' + room + '_lights', 'on') or
      is_state('fan.' + room + '_fan', 'on') or
      is_state('climate.' + room + '_ac', 'on') }}
    id: something_on
  - platform: template
    value_template: "{{ is_state('binary_sensor.' + room + '_core_left_button','on') or is_state('binary_sensor.' + room + '_core_middle_button','on') or is_state('binary_sensor.' + room + '_core_right_button','on') }}"
    id: button_pressed
  - platform: template
    value_template: >-
      {{ now() -
      [states['binary_sensor.' + room + '_core_left_button'].last_changed,
      states['binary_sensor.' + room + '_core_middle_button'].last_changed,
      states['binary_sensor.' + room + '_core_right_button'].last_changed] | max >
      timedelta(minutes = 1) }}
    id: no_buttons_pressed_recently
condition: []
action:
  - variables:
      core_display_backlight: "{{ 'light.' + room + '_core_display_backlight' }}"
      core_current_command: "{{ 'select.' + room + '_core_current_command' }}"
      lights: "{{ 'light.' + room + '_lights' }}"
      fan: "{{ 'fan.' + room + '_fan' }}"
      ac: "{{ 'climate.' + room + '_ac' }}"
      motion_timeout: "{{ 'automation.' + room + '_motion_timeout' }}"
      ac_auto_control: "{{ 'automation.' + room + '_ac_auto_control' }}"
      fan_auto_control: "{{ 'automation.' + room + '_fan_auto_control' }}"
  - choose:
      - conditions:
          - condition: trigger
            id:
              - all_off
        sequence:
          - service: light.turn_off
            target:
              entity_id: "{{ core_display_backlight }}"
      - conditions:
          - condition: trigger
            id:
              - something_on
        sequence:
          - condition: time
            after: !input sleep_hours_end
            before: !input sleep_hours_start
          - service: light.turn_on
            data:
              brightness_pct: 100
            target:
              entity_id: "{{ core_display_backlight }}"
      - conditions:
          - condition: trigger
            id:
              - button_pressed
        sequence:
          - if:
              - condition: time
                after: !input sleep_hours_end
                before: !input sleep_hours_start
            then:
              - service: light.turn_on
                data:
                  brightness_pct: 100
                target:
                  entity_id: "{{ core_display_backlight }}"
            else:
              - service: light.turn_on
                data:
                  brightness_pct: 30
                target:
                  entity_id: "{{ core_display_backlight }}"
      - conditions:
          - condition: trigger
            id:
              - no_buttons_pressed_recently
        sequence:
          - condition: or
            conditions:
              - "{{ is_state(lights,'off') and is_state(fan,'off') and is_state(ac,'off')}}"
              - condition: time
                after: !input sleep_hours_start
                before: !input sleep_hours_end
          - service: light.turn_off
            target:
              entity_id: "{{ core_display_backlight }}"
    default:
      - choose:
          - conditions: "{{ is_state(core_current_command,'lights_on') }}"
            sequence:
              - service: script.recommended_light_level
                data:
                  light: "{{ lights }}"
          - conditions: "{{ is_state(core_current_command,'lights_off') }}"
            sequence:
              - service: light.turn_off
                target:
                  entity_id: "{{ lights }}"
          - conditions: "{{ is_state(core_current_command,'lights_brighten') }}"
            sequence:
              - service: light.turn_on
                data:
                  brightness_step_pct: "{{ states('input_number.light_brightness_change_step') }}"
                target:
                  entity_id: "{{ lights }}"
          - conditions: "{{ is_state(core_current_command,'lights_darken') }}"
            sequence:
              - service: light.turn_on
                data:
                  brightness_step_pct: "-{{ states('input_number.light_brightness_change_step') }}"
                target:
                  entity_id: "{{ lights }}"
          - conditions: "{{ is_state(core_current_command,'set_recommended_room_scene') }}"
            sequence:
              - service: script.set_recommended_scene
                data:
                  room: "{{ room }}"
          - conditions: "{{ is_state(core_current_command,'turn_off_room') }}"
            sequence:
              - service: automation.trigger
                data:
                  skip_condition: true
                target:
                  entity_id: "{{ motion_timeout }}"
          - conditions: "{{ is_state(core_current_command,'fan_on') }}"
            sequence:
              - service: fan.turn_on
                target:
                  entity_id: "{{ fan }}"
          - conditions: "{{ is_state(core_current_command,'fan_off') }}"
            sequence:
              - service: fan.turn_off
                target:
                  entity_id: "{{ fan }}"
          - conditions: "{{ is_state(core_current_command,'fan_speed_up') }}"
            sequence:
              - service: fan.increase_speed
                target:
                  entity_id: "{{ fan }}"
          - conditions: "{{ is_state(core_current_command,'fan_slow_down') }}"
            sequence:
              - if:
                  - condition: template
                    value_template: "{{ state_attr(fan, 'percentage') | int(0) < 20 }}"
                then:
                  - service: fan.turn_off
                    target:
                      entity_id: "{{ fan }}"
                else:
                  - service: fan.decrease_speed
                    target:
                      entity_id: "{{ fan }}"
          - conditions: "{{ is_state(core_current_command,'fan_reverse') }}"
            sequence:
              - service: fan.set_direction
                data:
                  direction: reverse
                target:
                  entity_id: "{{ fan }}"
          - conditions: "{{ is_state(core_current_command,'fan_forward') }}"
            sequence:
              - service: fan.set_direction
                data:
                  direction: forward
                target:
                  entity_id: "{{ fan }}"
          - conditions: "{{ is_state(core_current_command,'ac_on') }}"
            sequence:
              - service: climate.turn_on
                target:
                  entity_id: "{{ ac }}"
          - conditions: "{{ is_state(core_current_command,'ac_off') }}"
            sequence:
              - service: climate.turn_off
                target:
                  entity_id: "{{ ac }}"
          - conditions: "{{ is_state(core_current_command,'ac_warmer') }}"
            sequence:
              - service: climate.set_temperature
                target:
                  entity_id: "{{ ac }}"
                data:
                  temperature: >
                    {% if state_attr(ac, 'temperature') <
                    27 %}
                      {{ state_attr(ac, 'temperature') + 1 }}
                    {% else %}
                      27
                    {% endif %}
          - conditions: "{{ is_state(core_current_command,'ac_colder') }}"
            sequence:
              - service: climate.set_temperature
                target:
                  entity_id: "{{ ac }}"
                data:
                  temperature: >
                    {% if state_attr(ac, 'temperature') >
                    24 %}
                      {{ state_attr(ac, 'temperature') - 1 }}
                    {% else %}
                      24
                    {% endif %}
          - conditions: "{{ is_state(core_current_command,'cooling_auto_control') }}"
            sequence:
              - service: automation.turn_on
                data: {}
                target:
                  entity_id: "{{ [ac_auto_control, fan_auto_control] }}"
              - condition: time
                after: !input sleep_hours_end
                before: !input sleep_hours_start
              - if:
                  - condition: state
                    entity_id: !input auto_control_indicator_light
                    state: "off"
                then:
                  - service: light.turn_on
                    data:
                      flash: short
                    target:
                      entity_id: !input auto_control_indicator_light
                  - delay: 1
                  - service: light.turn_off
                    data: {}
                    target:
                      entity_id: !input auto_control_indicator_light
                else:
                  - service: light.turn_on
                    data:
                      flash: short
                    target:
                      entity_id: !input auto_control_indicator_light
          - conditions: "{{ is_state(core_current_command,'cooling_manual_control') }}"
            sequence:
              - service: automation.turn_off
                data: {}
                target:
                  entity_id: "{{ [ac_auto_control, fan_auto_control] }}"
              - condition: time
                after: !input sleep_hours_end
                before: !input sleep_hours_start
              - if:
                  - condition: state
                    entity_id: !input auto_control_indicator_light
                    state: "off"
                then:
                  - repeat:
                      count: 2
                      sequence:
                        - service: light.turn_on
                          data:
                            flash: short
                          target:
                            entity_id: !input auto_control_indicator_light
                        - delay: 1
                  - service: light.turn_off
                    data: {}
                    target:
                      entity_id: !input auto_control_indicator_light
                else:
                  - repeat:
                      count: 2
                      sequence:
                        - service: light.turn_on
                          data:
                            flash: short
                          target:
                            entity_id: !input auto_control_indicator_light
                        - delay: 1
mode: queued
max: 10
