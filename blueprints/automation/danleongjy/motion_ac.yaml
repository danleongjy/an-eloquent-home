blueprint:
  name: Motion AC
  description: Control the AC when motion is detected, depending on whether the doors are closed.
  domain: automation
  input:
    motion_sensor:
      name: Motion Sensor
      description: When motion is detected by this sensor, the AC may turn on.
      selector:
        entity:
          domain: binary_sensor
          device_class: 
            - motion
            - occupancy
    ac:
      name: AC
      description: AC unit to control.
      selector:
        entity:
          domain: climate
    off_hours_start:
      name: Off Hours Start
      description: A time helper indicating when the AC should be off.  If the AC never needs to be off, set this to the same time as Off Hours End.
      selector:
        entity:
          domain: input_datetime
      default: input_datetime.sleep_hours_end
    off_hours_end:
      name: Off Hours End
      description: A time helper indicating when the AC no longer needs to be off.
      selector:
        entity:
          domain: input_datetime
      default: input_datetime.sleep_hours_end
    entities_list:
      name: Entities to Track
      description: A list of entities.  If the AC's state should not change when any of these entities are on even if motion is detected, specify them here.  Otherwise, leave blank.
      selector:
        entity:
          multiple: true
      default: []
    respect_closed_doors:
      name: Respect Closed Doors
      description: Set to true if the AC's state should not change when all the doors are closed even if motion is detected (useful in bedrooms when someone is sleeping).  Otherwise, set to false.
      selector:
        boolean:
      default: true
trigger_variables:
  entities: !input entities_list
  respect_doors: !input respect_closed_doors
trigger:
  - platform: state
    entity_id: !input motion_sensor
    from: "off"
    to: "on"
condition:
  - condition: template
    value_template: "{{ not respect_doors }}"
  - condition: template
    value_template: "{{ not 'on' in states | selectattr('entity_id', 'in', entities) | map(attribute = 'state') | list }}"
action:
  - variables:
      target_ac: !input ac
      rooms:
        climate.elenas_room_ac: "Elena's Room"
        climate.elis_room_ac: "Eli's Room"
        climate.dining_room_ac: 'Dining Room'
        climate.living_room_ac: 'Living Room'
        climate.study_room_ac: 'Study Room'
        climate.parents_room_ac: "Parents' Room"
  - delay: 0.05
  - condition: time
    after: !input off_hours_end
    before: !input off_hours_start
  - if:
      - condition: template
        value_template: >
          {% set openings = {'binary_sensor.junior_bathroom_door': ['Junior Bathroom','Dining Room','Living Room','Study Room'],
                             'binary_sensor.powder_room_door': ['Powder Room','Dining Room','Living Room','Study Room'],
                             'binary_sensor.elis_room_door': ["Eli's Room",'Dining Room','Living Room','Study Room'],
                             'binary_sensor.elis_room_right_window': ["Eli's Room",'Outdoors'],
                             'binary_sensor.elenas_room_door': ["Elena's Room",'Dining Room','Living Room','Study Room'],
                             'binary_sensor.elenas_room_left_window': ["Elena's Room",'Outdoors'],
                             'binary_sensor.main_door': ['Dining Room','Living Room','Outdoors','Study Room'],
                             'binary_sensor.parents_room_door': ['Study Room','Dining Room','Living Room',"Parents' Room"],
                             'binary_sensor.parents_room_left_window': ["Parents' Room",'Outdoors'],
                             'binary_sensor.master_bathroom_door': ["Parents' Room",'Master Bathroom'],
                             'binary_sensor.yard_window': ['Dining Room','Living Room','Outdoors','Study Room'],
                             'binary_sensor.kitchen_window': ['Dining Room','Living Room','Study Room','Outdoors']} %}
          {% set acs = {'Dining Room': 'climate.dining_room_ac', 
                        'Living Room': 'climate.living_room_ac', 
                        'Study Room': 'climate.study_room_ac',
                        "Eli's Room": 'climate.elis_room_ac',
                        "Elena's Room": 'climate.elenas_room_ac', 
                        "Parents' Room": 'climate.parents_room_ac'} %}
          {% set ac_on = namespace(room = rooms[target_ac],
                                   openings = [],
                                   recommend_turn_off = 0) %}
          {% for opening in openings.keys() %}
            {% if ac_on.room in openings[opening] %}
              {% set ac_on.openings = ac_on.openings + [opening] %}
            {% endif %}
          {% endfor %}
          {% for opening in ac_on.openings %}
            {% if is_state(opening, 'on') %}
              {% for room in openings[opening] %}
                {% if room != ac_on.room %}
                  {% if room not in acs.keys() %}
                    {% set ac_on.recommend_turn_off = ac_on.recommend_turn_off + 1 %}
                  {% elif is_state(acs[room], 'off') %}
                    {% set ac_on.recommend_turn_off = ac_on.recommend_turn_off + 1 %}
                  {% endif %}
                {% endif %}
              {% endfor %}
            {% endif %}
          {% endfor %}
          
          {{ ac_on.recommend_turn_off == 0 }}
    then:
      - action: climate.turn_on
        target:
          entity_id: !input ac
    else:
      - action: climate.turn_off
        target:
          entity_id: !input ac
mode: single
max_exceeded: silent