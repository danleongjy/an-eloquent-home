blueprint:
  name: Motion AC
  description: Control the AC when motion is detected, depending on whether the doors are closed.
  domain: automation
  input:
    motion_sensor:
      name: Motion Sensor
      description: When motion is detected by this sensor, the AC may turn on.
      selector:
        entity:
          domain: binary_sensor
          device_class: motion
    ac:
      name: AC
      description: AC unit to control.
      selector:
        entity:
          domain: climate
    ac_auto_control:
      name: AC Auto Control
      description: Automation to automatically control the AC based on temperature.
      selector:
        entity:
          domain: automation
    ac_auto_control_start:
      name: AC Auto Control Start
      description: Time helper indicating when AC auto control should be turned on.
      selector:
        entity:
          domain: input_datetime
    ac_auto_control_end:
      name: AC Auto Control End
      description: Time helper indicating when AC auto control should be turned off.
      selector:
        entity:
          domain: input_datetime
    entities_list:
      name: Entities to Track
      description: A list of entities.  If the AC's state should not change when any of these entities are on even if motion is detected, specify them here.  Otherwise, leave blank.
      selector:
        entity:
          multiple: true
      default: []
    doors_list:
      name: Doors to Track
      description: A list of doors or door groups.  If the AC's state should not change when all the doors are closed even if motion is detected (useful in bedrooms when someone is sleeping), specify the doors here.  Otherwise, leave blank.
      selector:
        entity:
          domain: binary_sensor
          device_class: door
          multiple: true
      default: []
trigger_variables:
  entities: !input entities_list
  doors: !input doors_list
trigger:
  - platform: state
    entity_id: !input motion_sensor
    from: "off"
    to: "on"
condition:
  - condition: template
    value_template: "{{ doors | length == 0 or 'on' in states | selectattr('entity_id', 'in', doors) | map(attribute = 'state') | list }}"
  - condition: template
    value_template: >
      {{ not 'on' in states | selectattr('entity_id', 'in', entities) | map(attribute = 'state') | list }}
action:
  - variables:
      target_ac: !input ac
      doors: !input doors_list
  - if:
      - condition: template
        value_template: "{{ doors | length == 0 or not 'on' in states | selectattr('entity_id', 'in', doors) | map(attribute = 'state') | list }}"
    then:
      - if:
          - condition: template
            value_template: "{{ state_attr(target_ac,'current_temperature') >= state_attr(target_ac,'temperature') }}"
        then:
          - service: climate.turn_on
            data: {}
            target:
              entity_id: !input ac
        else:
          - service: climate.turn_off
            data: {}
            target:
              entity_id: climate.parents_room_ac
      - if:
          - condition: time
            after: !input ac_auto_control_start
            before: !input ac_auto_control_end
        then:
          - service: automation.turn_on
            data: {}
            target:
              entity_id: !input ac_auto_control
        else:
          - service: automation.turn_off
            data:
              stop_actions: true
            target:
              entity_id: !input ac_auto_control
    else:
      - service: climate.turn_off
        data: {}
        target:
          entity_id: !input ac
      - service: automation.turn_off
        data:
          stop_actions: true
        target:
          entity_id: !input ac_auto_control
mode: single
