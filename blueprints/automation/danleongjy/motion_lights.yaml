blueprint:
  name: Motion Lights
  description: Control the lights when motion is detected, depending on lux level and time.
  domain: automation
  input:
    lights_list:
      name: Lights
      description: A list of lights or light groups to control.
      selector:
        entity:
          domain: light
          multiple: true
    motion_sensor:
      name: Motion Sensor
      description: When motion is detected by this sensor, the lights may turn on.
      selector:
        entity:
          domain: binary_sensor
          device_class: 
            - motion
            - occupancy
    lux_sensor:
      name: Lux Sensor
      description: Lux sensor of ambient brightness in the room.
      selector:
        entity:
          domain: sensor
          device_class: illuminance
    sufficient_lux:
      name: Sufficient Lux Level
      description: A number helper indicating the lux level above which it is sufficiently bright and lights need not be on.
      selector:
        entity:
          domain: input_number
      default: input_number.comfortable_lux
    insufficient_lux:
      name: Insufficient Lux Level
      description: A number helper indicating the lux level below which it is too dark and lights need to be on.
      selector:
        entity:
          domain: input_number
      default: input_number.minimum_lux
    blackout_hours_start:
      name: Blackout Hours Start
      description: A time helper indicating when lights should be off.  If lights never need to be off, set this to the same time as Blackout Hours End.
      selector:
        entity:
          domain: input_datetime
      default: input_datetime.dim_hours_end
    blackout_hours_end:
      name: Blackout Hours End
      description: A time helper indicating when lights no longer need to be off.
      selector:
        entity:
          domain: input_datetime
      default: input_datetime.dim_hours_end
    entities_list:
      name: Entities to Track
      description: A list of entities.  If the lights' state should not change when any of these entities are on even if motion is detected, specify them here.  Otherwise, leave blank.
      selector:
        entity:
          multiple: true
      default: []
    doors_list:
      name: Doors to Track
      description: A list of doors or door groups.  If the lights' state should not change when all the doors are closed even if motion is detected (useful in bedrooms when someone is sleeping), specify the doors here.  Otherwise, leave blank.
      selector:
        entity:
          domain: binary_sensor
          device_class: door
          multiple: true
      default: []
    lights_debounce:
      name: Lights Debounce
      description: Whether to prevent the lights from turning on again if motion is detected just after they turn off.
      selector:
        boolean:
      default: true
trigger_variables:
  doors: !input doors_list
  entities: !input entities_list
  debounce: !input lights_debounce
trigger:
  - platform: state
    entity_id: !input motion_sensor
    from: "off"
    to: "on"
  - platform: numeric_state
    entity_id: !input lux_sensor
    below: !input insufficient_lux
  - platform: numeric_state
    entity_id: !input lux_sensor
    above: !input sufficient_lux
condition:
  - condition: state
    entity_id: !input motion_sensor
    state: "on"
  - condition: template
    value_template: "{{ doors | length == 0 or 'on' in states | selectattr('entity_id', 'in', doors) | map(attribute = 'state') | list }}"
  - condition: template
    value_template: >
      {{ not 'on' in states | selectattr('entity_id', 'in', entities) | map(attribute = 'state') | list }}
  - or:
      - condition: state
        entity_id: !input lights_list
        state: "off"
        for:
          seconds: 2
      - condition: template
        value_template: "{{ not debounce }}"
action:
  - variables:
      blackout_start: !input blackout_hours_start
      blackout_end: !input blackout_hours_end
  - delay: 0.05
  - choose:
      - conditions:
          - or:
              - and:
                  - condition: template
                    value_template: "{{ states(blackout_start) != states(blackout_end) }}"
                  - condition: time
                    after: !input blackout_hours_start
                    before: !input blackout_hours_end
              - condition: numeric_state
                entity_id: !input lux_sensor
                above: !input sufficient_lux
        sequence:
          - service: light.turn_off
            target:
              entity_id: !input lights_list
      - conditions:
          - condition: numeric_state
            entity_id: !input lux_sensor
            below: !input insufficient_lux
        sequence:
          - repeat:
              for_each: !input lights_list
              sequence:
                - service: script.recommended_light_level
                  data:
                    light: "{{ repeat.item }}"
mode: single
max_exceeded: silent