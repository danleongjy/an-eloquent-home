blueprint:
  name: AC Set State with Resync
  description: Depending on state changes in the Generic Thermostat climate entities, pass the state parameters to the AC Set State script to sync the actual state of the physical AC units by sending the corresponding IR commands.  Also check if AC state is synced with IR commands using a Vent Sensor.
  domain: automation
  input:
    ac:
      name: Air Conditioner
      description: Air conditioner unit for which to set the state
      selector:
        entity:
          domain: climate
    default_temp:
      name: Default Temperature
      description: Default temperature of the air conditioner when turned on.
      selector:
        number:
          min: 24
          max: 27
          unit_of_measurement: Â°C
          mode: slider
      default: 27
    vent:
      name: Vent Sensor
      description: Contact sensor indicating whether the vent is open or not.
      selector:
        entity:
          domain: binary_sensor
    resync_delay:
      name: AC Resync Delay
      description: Number helper indicating how long after an IR command is sent to check the AC state via the Vent Sensor.
      selector:
        entity:
          domain: input_number
trigger:
  - platform: state
    entity_id: !input ac
    id: cooling
    to: cool
  - platform: state
    entity_id: !input ac
    id: power_off
    from: cool
  - platform: state
    entity_id: !input ac
    id: temperature_changed
    attribute: temperature
action:
  - variables:
      target_ac: !input ac
      resync_delay_minutes: !input resync_delay
  - choose:
      - conditions:
          - condition: trigger
            id: cooling
        sequence:
          - repeat:
              sequence:
                - service: script.ac_set_state
                  data:
                    target_ac: "{{ state_attr(target_ac, 'friendly_name') }}"
                    target_ac_temp: "{{ state_attr(target_ac, 'temperature') }}"
                - delay: "{{ resync_delay_minutes | int(1) * 60 }}"
              until:
                - condition: not
                  conditions:
                    - condition: state
                      entity_id: !input vent
                      state: 'off'
      - conditions:
          - condition: trigger
            id: power_off
        sequence:
          - repeat:
              sequence:
                - service: script.ac_set_state
                  data:
                    target_ac: "{{ state_attr(target_ac, 'friendly_name') }}"
                    target_ac_power: false
                - delay: "{{ resync_delay_minutes | int(1) * 60 }}"
              until:
                - condition: not
                  conditions:
                    - condition: state
                      entity_id: !input vent
                      state: 'on'
      - conditions:
          - condition: trigger
            id: temperature_changed
        sequence:
          - if:
              - condition: template
                value_template: "{{ state_attr(target_ac, 'temperature') | float(24) < (state_attr(target_ac, 'min_temp') | float(23) + 1) }}"
            then:
              - service: climate.set_temperature
                data:
                  temperature: !input default_temp
                target:
                  entity_id: !input ac
              - service: climate.turn_off
                data: {}
                target:
                  entity_id: !input ac
              - repeat:
                  sequence:
                    - service: script.ac_set_state
                      data:
                        target_ac: "{{ state_attr(target_ac, 'friendly_name') }}"
                        target_ac_power: false
                    - delay: "{{ resync_delay_minutes | int(1) * 60 }}"
                  until:
                    - condition: not
                      conditions:
                        - condition: state
                          entity_id: !input vent
                          state: 'on'
            else:
              - service: climate.turn_on
                data: {}
                target:
                  entity_id: !input ac
              - repeat:
                  sequence:
                    - service: script.ac_set_state
                      data:
                        target_ac: "{{ state_attr(target_ac, 'friendly_name') }}"
                        target_ac_temp: "{{ state_attr(target_ac, 'temperature') }}"
                    - delay: "{{ resync_delay_minutes | int(1) * 60 }}"
                  until:
                    - condition: not
                      conditions:
                        - condition: state
                          entity_id: !input vent
                          state: 'off'
    default: []
mode: restart
max_exceeded: silent
