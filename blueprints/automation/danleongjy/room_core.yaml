blueprint:
  name: Room Core
  description: Interface between room devices and Home Assistant via ESPHome and M5Stack Fire/Basic
  domain: automation
  input:
    core_room:
      name: Room
      description: The room that the M5Stack Fire/Basic is in
      selector:
        select:
          options:
            - label: Parents' Room
              value: parents_room
            - label: Eli's Room
              value: elis_room
            - label: Elena's Room
              value: elenas_room
            - label: Study Room
              value: study_room
    sleep_hours_start:
      name: Sleep Hours Start
      description: Input datetime indicating when sleep hours start
      selector:
        entity:
          domain: input_datetime
    sleep_hours_end:
      name: Sleep Hours End
      description: Input datetime indicating when sleep hours end
      selector:
        entity:
          domain: input_datetime
    cover:
      name: Cover
      description: The cover to control
      selector:
        entity:
          filter:
            - domain: cover
trigger_variables:
  room: !input core_room
trigger:
  - platform: template
    value_template: "{{ not is_state('sensor.' + room + '_core_current_command','none') }}"
    id: new_command
  - platform: template
    value_template: >-
      {{ is_state('binary_sensor.' + room + '_motion', 'off') and
      is_state('light.' + room + '_lights', 'off') and
      is_state('fan.' + room + '_fan', 'off') and
      is_state('climate.' + room + '_ac', 'off') }}
    id: all_off
  - platform: template
    value_template: >-
      {{ is_state('binary_sensor.' + room + '_presence', 'on') or
      is_state('light.' + room + '_lights', 'on') or
      is_state('fan.' + room + '_fan', 'on') or
      is_state('climate.' + room + '_ac', 'on') }}
    id: something_on
  - platform: template
    value_template: "{{ is_state('binary_sensor.' + room + '_core_left_button','on') or is_state('binary_sensor.' + room + '_core_middle_button','on') or is_state('binary_sensor.' + room + '_core_right_button','on') }}"
    id: button_pressed
  - platform: template
    value_template: >-
      {{ now() -
      [states['binary_sensor.' + room + '_core_left_button'].last_changed,
      states['binary_sensor.' + room + '_core_middle_button'].last_changed,
      states['binary_sensor.' + room + '_core_right_button'].last_changed] | max >
      timedelta(minutes = 1) }}
    id: no_buttons_pressed_recently
  - platform: time
    at: !input sleep_hours_start
    id: sleep
condition: []
action:
  - variables:
      core_display_backlight: "{{ 'light.' + room + '_core_display_backlight' }}"
      core_current_command: "{{ 'sensor.' + room + '_core_current_command' }}"
      room: !input core_room
      lights:
        parents_room:
          - light.parents_room_lights
        elis_room:
          - light.elis_room_lights
        elenas_room:
          - light.elenas_room_lights
        study_room:
          - light.study_room_lights
      lamp:
        parents_room:
          - light.parents_room_bedside_lamp
        elis_room:
          - light.elis_room_floor_lamp
        elenas_room:
          - light.elenas_room_bedside_lamp
        study_room:
          - light.study_room_floor_lamp
      doors:
        parents_room: binary_sensor.parents_room_doors
        study_room: binary_sensor.parents_room_door
        elis_room: binary_sensor.elis_room_door
        elenas_room: binary_sensor.elenas_room_door
      fan: "{{ 'fan.' + room + '_fan' }}"
      ac: "{{ 'climate.' + room + '_ac' }}"
      cover: !input cover
      motion_timeout: "{{ 'automation.' + room + '_motion_timeout' }}"
      ac_auto_control: "{{ 'automation.' + room + '_ac_auto_control' }}"
      fan_auto_control: "{{ 'automation.' + room + '_fan_auto_control' }}"
  - choose:
      - conditions:
          - or:
              - condition: trigger
                id:
                  - all_off
              - condition: trigger
                id: 
                  - sleep
        sequence:
          - action: light.turn_off
            target:
              entity_id: "{{ core_display_backlight }}"
      - conditions:
          - condition: trigger
            id:
              - something_on
        sequence:
          - condition: time
            after: !input sleep_hours_end
            before: !input sleep_hours_start
          - condition: template
            value_template: >
              {{ 
                'on' in states.binary_sensor | selectattr('attributes.device_class','defined') | selectattr('attributes.device_class','eq','door') | selectattr('entity_id', 'search', room) | map(attribute='state') | list 
                or states.binary_sensor | selectattr('attributes.device_class','defined') | selectattr('attributes.device_class','eq','door') | selectattr('entity_id', 'search', room) | list | length == 0
              }}
          - action: light.turn_on
            data:
              brightness_pct: 100
            target:
              entity_id: "{{ core_display_backlight }}"
      - conditions:
          - condition: trigger
            id:
              - button_pressed
        sequence:
          - if:
              - condition: time
                after: !input sleep_hours_end
                before: !input sleep_hours_start
            then:
              - action: light.turn_on
                data:
                  brightness_pct: 100
                target:
                  entity_id: "{{ core_display_backlight }}"
            else:
              - action: light.turn_on
                data:
                  brightness_pct: 30
                target:
                  entity_id: "{{ core_display_backlight }}"
      - conditions:
          - condition: trigger
            id:
              - no_buttons_pressed_recently
        sequence:
          - condition: or
            conditions:
              - "{{ is_state(lights[room],'off') and is_state(fan,'off') and is_state(ac,'off')}}"
              - condition: time
                after: !input sleep_hours_start
                before: !input sleep_hours_end
          - action: light.turn_off
            target:
              entity_id: "{{ core_display_backlight }}"
    default:
      - choose:
          - conditions: "{{ states(core_current_command) in ['lights_on', 'lights_off', 'lights_brighten', 'lights_darken', 'set_recommended_room_scene', 'turn_off_room', 'lights_auto_control', 'lights_manual_control'] }}"
            sequence:
              - action: script.lights_controller
                data:
                  lights: "{{ lights[room] }}"
                  command: "{{ states(core_current_command) }}"
          - conditions: "{{ states(core_current_command) in ['lamp_on', 'lamp_off', 'lamp_brighten', 'lamp_darken', 'lamp_auto_control', 'lamp_manual_control'] }}"
            sequence:
              - action: script.lights_controller
                data:
                  lights: "{{ lamp[room] }}"
                  command: "{{ states(core_current_command) }}"
          - conditions: "{{ states(core_current_command) in ['fan_on', 'fan_off', 'fan_speed_up', 'fan_slow_down', 'fan_reverse', 'fan_forward', 'fan_auto_control', 'fan_manual_control'] }}"
            sequence:
              - action: script.fan_controller
                data:
                  fan: "{{ fan }}"
                  command: "{{ states(core_current_command) }}"
          - conditions: "{{ states(core_current_command) in ['ac_on', 'ac_off', 'ac_warmer', 'ac_colder', 'cooling_auto_control', 'cooling_manual_control'] }}"
            sequence:
              - action: script.ac_controller
                data:
                  ac: "{{ ac }}"
                  command: "{{ states(core_current_command) }}"
          - conditions: "{{ states(core_current_command) in ['cover_open', 'cover_close', 'cover_auto_control', 'cover_manual_control'] }}"
            sequence:
              - action: script.cover_controller
                data:
                  cover: "{{ cover }}"
                  command: "{{ states(core_current_command) }}"
          - conditions: "{{ states(core_current_command) == 'set_special_scene' }}"
            sequence:
              - action: script.lights_controller
                data:
                  lights: "{{ lights[room] }}"
                  command: "lights_auto_control"
              - action: script.fan_controller
                data:
                  fan: "{{ fan }}"
                  command: "fan_auto_control"
              - action: script.fan_controller
                data:
                  fan: "{{ fan }}"
                  command: "fan_on"
              - action: script.ac_controller
                data:
                  ac: "{{ ac }}"
                  command: "ac_auto_control"
              - action: script.cover_controller
                data:
                  cover: "{{ cover }}"
                  command: "cover_close"
              - action: script.cover_controller
                data:
                  cover: "{{ cover }}"
                  command: "cover_auto_control"
              - if:
                  - condition: template
                    value_template: "{{ is_state(doors[room], 'off') }}"
                then:
                  - if:
                      - condition: time
                        after: !input sleep_hours_end
                        before: !input sleep_hours_start
                    then:
                      - action: script.lights_controller
                        data:
                          lights: "{{ [lights[room],lamp[room]] }}"
                          command: "lights_off"
                    else:
                      - action: script.lights_controller
                        data:
                          lights: "{{ lights[room] }}"
                          command: "lights_off"
                      - action: script.lights_controller
                        data:
                          lights: "{{ lamp[room] }}"
                          command: "lights_on"
                  - action: script.ac_controller
                    data:
                      ac: "{{ ac }}"
                      command: "ac_on"
                else:
                  - action: script.lights_controller
                    data:
                      lights: "{{ lights[room] }}"
                      command: "set_recommended_scene"
mode: queued
max: 10
