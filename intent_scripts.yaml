AwayModeOn:
  speech: 
    text: >
      {{ ['Initiating', 'Activating'] | random }} {{ ['Away Mode', 'shutdown sequence'] | random }}.
  action:
    - service: input_boolean.turn_on
      target:
        entity_id: input_boolean.away_mode
PartyModeOn:
  speech: 
    text: >
      {{ ['Initiating', 'Activating'] | random }} party mode.
  action:
    - service: input_boolean.turn_on
      target:
        entity_id: input_boolean.party_mode
PartyModeOff:
  speech: 
    text: >
      {{ ['Turning off', 'Dectivating'] | random }} party mode.
  action:
    - service: input_boolean.turn_off
      target:
        entity_id: input_boolean.party_mode
CommandVacuum:
  speech:
    text: >
      {% if command == 'start' %}
        {{ ['Starting','Running','Initiating','Activating'] | random }} the vacuum.
      {% elif command == 'pause' %}
        Vacuum paused.
      {% elif command == 'stop' %}
        {{ ['Stopping','Deactivating'] | random }} the vacuum.
      {% else %}
        Returning vacuum to dock.
      {% endif %}
  action:
    - service: 'vacuum.{{ command }}'
      target:
        entity_id: vacuum.roborock_s7
VacuumStatus:
  speech:
    text: >
      {% set clean_time = namespace(hours = states('sensor.roborock_s7_cleaning_time') | int(0) // 3600,
                                    minutes =  states('sensor.roborock_s7_cleaning_time') | int(0) % 3600 // 60) %}
      The vacuum is {{ 'in trouble' if states('vacuum.roborock_s7') == 'error' else states('vacuum.roborock_s7') }}.
      It cleaned {{states('sensor.roborock_s7_cleaning_area') | int(0) }} square metres over {{ clean_time.hours | string + ' hour' if clean_time.hours > 0 }}{{ 's' if clean_time.hours > 1 }}{{ ' and ' if clean_time.hours > 0 and clean_time.minutes > 0 }}{{ clean_time.minutes | string + ' minute' if clean_time.minutes > 0 }}{{ 's' if clean_time.minutes > 1 }}.
      {% if states('vacuum.roborock_s7') in ['docked','idle'] %}
        Its last run ended {{ relative_time(as_datetime(states('sensor.roborock_s7_last_clean_end'))) }} ago.
      {% endif %}
CookingPreset:
  speech:
    text: >
      {% if is_state('switch.stove_main_power','on') %}
        {{ side | capitalize }} cooker set to {{ cooking_preset }}.
      {% else %}
        Please turn on the stove manually first.
      {% endif %}
  action:
    - variables:
        presets_power:
          'boil water': 7
          'cook rice': 1
          'stir fry': 4
          'simmer': 1
          'steam fish': 3
        presets_time:
          'boil water': 6
          'cook rice': 16
          'stir fry': 0
          'simmer': 60
          'steam fish': 16
    - condition: state
      entity_id: switch.stove_main_power
      state: 'on'
    - service: select.select_option
      data:
        option: '{{ side }}'
      target:
        entity_id: select.stove_current_burner
    - service: script.stove_settings
      data:
        current_burner_power: '{{ presets_power[cooking_preset] }}'
        current_burner_timer: '{{ presets_time[cooking_preset] }}'
SetCookerPower:
  speech:
    text: >
      {% if is_state('switch.stove_main_power','on') %}
        {{ side | capitalize }} cooker set to level {{ power }}.
      {% else %}
        Please turn on the stove manually first.
      {% endif %}
  action:
    - condition: state
      entity_id: switch.stove_main_power
      state: 'on'
    - service: select.select_option
      data:
        option: '{{ side }}'
      target:
        entity_id: select.stove_current_burner
    - service: script.stove_settings
      data:
        current_burner_power: '{{ power }}'
SetCookerTimer:
  speech:
    text: >
      {% if is_state('switch.stove_main_power','on') %}
        {% if time == 0 %}
          {{ side | capitalize }} cooker timer deactivated.
        {% else %}
          {{ side | capitalize }} cooker timer set to {{ time }} {{ 'minutes' if time > 1 else 'minute' }}.
        {% endif %}
      {% else %}
        Please turn on the stove manually first.
      {% endif %}
  action:
    - condition: state
      entity_id: switch.stove_main_power
      state: 'on'
    - service: select.select_option
      data:
        option: '{{ side }}'
      target:
        entity_id: select.stove_current_burner
    - service: script.stove_settings
      data:
        current_burner_timer: '{{ time }}'
SetCookerPowerTimer:
  speech:
    text: >
      {% if is_state('switch.stove_main_power','on') %}
        {% if power | int(0) == 0 %}
          {{ side | capitalize }} cooker deactivated.
        {% else %}
          {% if time == 0 %}
            {{ side | capitalize }} cooker set to level {{ power }}.
          {% else %}
            {{ side | capitalize }} cooker set to level {{ power }} for {{ time }} {{ 'minutes' if time > 1 else 'minute' }}.
          {% endif %}
        {% endif %}
      {% else %}
        Please turn on the stove manually first.
      {% endif %}
  action:
    - condition: state
      entity_id: switch.stove_main_power
      state: 'on'
    - service: select.select_option
      data:
        option: '{{ side }}'
      target:
        entity_id: select.stove_current_burner    
    - service: script.stove_settings
      data:
        current_burner_power: '{{ power }}'
        current_burner_timer: '{{ time }}'
TurnOffCooker:
  speech:
    text: >
      {% if is_state('switch.stove_main_power','on') %}
        {{ side | capitalize }} cooker deactivated.
      {% else %}
        Please turn on the stove manually first.
      {% endif %}
  action:
    - condition: state
      entity_id: switch.stove_main_power
      state: 'on'
    - service: select.select_option
      data:
        option: '{{ side }}'
      target:
        entity_id: select.stove_current_burner
    - service: script.stove_settings
      data:
        current_burner_power: 0
CookerStatus:
  action:
    - condition: state
      entity_id: switch.stove_main_power
      state: 'on'
    - service: select.select_option
      data:
        option: '{{ side }}'
      target:
        entity_id: select.stove_current_burner
    - delay: 1
  speech:
    text: >
      {% set text = namespace(output = '') %}
      {% if is_state('switch.stove_main_power','on') %}
        {% set text.output = 'The ' + states('select.stove_current_burner') + ' cooker is on level ' + states('select.stove_current_burner_power') %}
        {% if states('number.stove_current_burner_timer') | int(0) == 0 %}
          {% set text.output = text.output + '.' %}
        {% elif states('number.stove_current_burner_timer') | int(0) == 1 %}
          {% set text.output = text.output + ' with 1 minute remaining.' %}
        {% else %}
          {% set text.output = text.output + ' with ' + states('number.stove_current_burner_timer') + ' minutes remaining.' %}
        {% endif %}
      {% else %}
        {% set text.output = 'The ' + side + ' cooker is off.' %}
      {% endif %}
      {{ text.output }}
