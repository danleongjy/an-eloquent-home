- binary_sensor:
  - name: Next Alarm Imminent
    unique_id: binary_sensor.next_alarm_imminent
    state: "{{ not states('sensor.next_alarm_timings')[:4] == 'AAAA' }}"
    attributes:
      Daniel: "{{ states('input_datetime.daniels_next_alarm') }}"
      Grace: "{{ states('input_datetime.graces_next_alarm') }}"
      Eli: "{{ states('input_datetime.elis_next_alarm') }}"
      Elena: "{{ states('input_datetime.elenas_next_alarm') }}"
      parents_room_next_alarm_time: "{{ ([states('input_datetime.daniels_next_alarm') | as_datetime, states('input_datetime.graces_next_alarm') | as_datetime] | min).strftime('%H:%M') }}"
      elis_room_next_alarm_time: "{{ (states('input_datetime.elis_next_alarm') | as_datetime).strftime('%H:%M') }}"
      elenas_room_next_alarm_time: "{{ (states('input_datetime.elenas_next_alarm') | as_datetime).strftime('%H:%M') }}"

  - name: Yard Window
    unique_id: binary_sensor.yard_window
    device_class: window
    state: >
      {{ is_state('binary_sensor.yard_window_1', 'on') or 
         is_state('binary_sensor.yard_window_2','on') }}
    attributes:
      total_panes_open: "{{ is_state('binary_sensor.yard_window_1','on') + is_state('binary_sensor.yard_window_2','on') }}/2"
      total_panes: 2
      yard_window_1: "{{ states('binary_sensor.yard_window_1') }}"
      yard_window_2: "{{ states('binary_sensor.yard_window_2') }}"

  - name: Hallway Doors
    unique_id: binary_sensor.hallway_doors
    device_class: door
    state: >
      {{ is_state('binary_sensor.powder_room_door', 'on') or
        is_state('binary_sensor.junior_bathroom_door', 'on') or
        is_state('binary_sensor.elis_room_door', 'on') or
        is_state('binary_sensor.elenas_room_door', 'on')
      }}
    attributes:
      powder_room_door: "{{ states('binary_sensor.powder_room_door') }}"
      junior_bathroom_door: "{{ states('binary_sensor.junior_bathroom_door') }}"
      elis_room_door: "{{ states('binary_sensor.elis_room_door') }}"
      elenas_room_door: "{{ states('binary_sensor.elenas_room_door') }}"
      total_doors_open: "{{ is_state('binary_sensor.powder_room_door', 'on') + is_state('binary_sensor.junior_bathroom_door', 'on') + is_state('binary_sensor.elenas_room_door', 'on') + is_state('binary_sensor.elis_room_door', 'on') }}/4"
      total_doors: "4"

  - name: Parents' Room Doors
    unique_id: binary_sensor.parents_room_doors
    device_class: door
    state: >
      {{ is_state('binary_sensor.parents_room_door', 'on') or
        is_state('binary_sensor.master_bathroom_door', 'on')
      }}
    attributes:
      parents_room_door: "{{ states('binary_sensor.parents_room_door') }}"
      master_bathroom_door: "{{ states('binary_sensor.master_bathroom_door') }}"
      total_doors_open: "{{ is_state('binary_sensor.parents_room_door', 'on') + is_state('binary_sensor.master_bathroom_door', 'on') }}/2"
      total_doors: "2"

  - name: AC On With Doors Open
    unique_id: binary_sensor.ac_on_with_doors_open
    state: >
      {{ is_state('binary_sensor.ac_on_with_door_open_at_elenas_room', 'on') 
         or is_state('binary_sensor.ac_on_with_door_open_at_elis_room', 'on') 
         or is_state('binary_sensor.ac_on_with_door_open_at_powder_room', 'on')
         or is_state('binary_sensor.ac_on_with_door_open_at_junior_bathroom', 'on')
         or is_state('binary_sensor.ac_on_with_door_open_at_dining_room', 'on')
         or is_state('binary_sensor.ac_on_with_doors_open_at_parents_room', 'on') 
         or is_state('binary_sensor.ac_on_with_door_open_at_master_bathroom', 'on') 
         or is_state('binary_sensor.ac_on_with_windows_open_at_elis_room', 'on') 
         or is_state('binary_sensor.ac_on_with_windows_open_at_elenas_room', 'on') 
         or is_state('binary_sensor.ac_on_with_windows_open_at_parents_room', 'on') 
         or is_state('binary_sensor.ac_on_with_window_open_at_yard', 'on') 
         or is_state('binary_sensor.ac_on_with_window_open_at_kitchen', 'on') }}
    attributes:
      elenas_room_door: "{{ states('binary_sensor.elenas_room_door') }}"
      elenas_room_left_window: "{{ states('binary_sensor.elenas_room_left_window') }}"
      elis_room_door: "{{ states('binary_sensor.elis_room_door') }}"
      elis_room_right_window: "{{ states('binary_sensor.elis_room_right_window') }}"
      powder_room_door: "{{ states('binary_sensor.powder_room_door') }}"
      junior_bathroom_door: "{{ states('binary_sensor.junior_bathroom_door') }}"
      main_door: "{{ states('binary_sensor.main_door') }}"
      yard_window: "{{ states('binary_sensor.yard_window') }}"
      parents_room_door: "{{ states('binary_sensor.parents_room_door') }}"
      parents_room_left_window: "{{ states('binary_sensor.parents_room_left_window') }}"
      master_bathroom_door: "{{ states('binary_sensor.master_bathroom_door') }}"
      kitchen_window: "{{ states('binary_sensor.kitchen_window') }}"
      elenas_room_ac: "{{ states('climate.elenas_room_ac') }}"
      elis_room_ac: "{{ states('climate.elis_room_ac') }}"
      dining_room_ac: "{{ states('climate.dining_room_ac') }}"
      living_room_ac: "{{ states('climate.living_room_ac') }}"
      study_room_ac: "{{ states('climate.study_room_ac') }}"
      parents_room_ac: "{{ states('climate.parents_room_ac') }}"

  - name: Sims Drive Market Bus Stop
    unique_id: binary_sensor.sims_drive_market_bus_stop
    state: "{{ states('sensor.sims_drive_market_bus_134') | int(100) < 5 or states('sensor.sims_drive_market_bus_137') | int(100) < 5 or states('sensor.sims_drive_market_bus_64') | int(100) < 5 }}"
    attributes:
      services: "{{ ['64','134','137'] }}"
      comfortable_walk_time: 5
      min_walk_time: 2
      next_buses: >
        {% set next_buses = namespace(output = []) %}
        {% for service_no in this.attributes.services %}
          {% for nextbus in ['NextBus','NextBus2','NextBus3'] %}
            {% if state_attr('sensor.sims_drive_market_bus_' + service_no, nextbus).EstimatedArrival is defined %}
              {% if state_attr('sensor.sims_drive_market_bus_' + service_no, nextbus).EstimatedArrival | length > 0 %}
                {% set next_buses.output = next_buses.output + [dict(state_attr('sensor.sims_drive_market_bus_' + service_no, nextbus), **{'ServiceNo': service_no})] %}
              {% endif %}
            {% endif %}
          {% endfor %}
        {% endfor %}
        {{ next_buses.output | sort(attribute = 'EstimatedArrival') }}
    availability: "{{ is_state('binary_sensor.sims_drive_market_bus_64_operating', 'on') or is_state('binary_sensor.sims_drive_market_bus_134_operating', 'on') or is_state('binary_sensor.sims_drive_market_bus_137_operating', 'on') }}"

  - name: Opposite Aljunied Station Bus Stop
    unique_id: binary_sensor.opposite_aljunied_station_bus_stop
    state: "{{ states('sensor.opposite_aljunied_station_bus_40') | int(100) < 10 or states('sensor.opposite_aljunied_station_bus_125') | int(100) < 10 or states('sensor.sims_drive_market_bus_64') | int(100) < 5 }}"
    attributes:
      services: "{{ ['40','125'] }}"
      comfortable_walk_time: 10
      min_walk_time: 5
      next_buses: >
        {% set next_buses = namespace(output = []) %}
        {% for service_no in this.attributes.services %}
          {% for nextbus in ['NextBus','NextBus2','NextBus3'] %}
            {% if state_attr('sensor.opposite_aljunied_station_bus_' + service_no, nextbus).EstimatedArrival is defined %}
              {% if state_attr('sensor.opposite_aljunied_station_bus_' + service_no, nextbus).EstimatedArrival | length > 0 %}
                {% set next_buses.output = next_buses.output + [dict(state_attr('sensor.opposite_aljunied_station_bus_' + service_no, nextbus), **{'ServiceNo': service_no})] %}
              {% endif %}
            {% endif %}
          {% endfor %}
        {% endfor %}
        {{ next_buses.output | sort(attribute = 'EstimatedArrival') }}
    availability: "{{ is_state('binary_sensor.opposite_aljunied_station_bus_40_operating', 'on') or is_state('binary_sensor.opposite_aljunied_station_bus_125_operating', 'on') }}"

  - name: Aljunied Station Bus Stop
    unique_id: binary_sensor.aljunied_station_bus_stop
    state: "{{ states('sensor.aljunied_station_bus_40') | int(100) < 12 or states('sensor.aljunied_station_bus_80') | int(100) < 12 or states('sensor.aljunied_station_bus_100') | int(100) < 12 }}"
    attributes:
      services: "{{ ['40','80','100'] }}"
      comfortable_walk_time: 12
      min_walk_time: 7
      next_buses: >
        {% set next_buses = namespace(output = []) %}
        {% for service_no in this.attributes.services %}
          {% for nextbus in ['NextBus','NextBus2','NextBus3'] %}
            {% if state_attr('sensor.aljunied_station_bus_' + service_no, nextbus).EstimatedArrival is defined %}
              {% if state_attr('sensor.aljunied_station_bus_' + service_no, nextbus).EstimatedArrival | length > 0 %}
                {% set next_buses.output = next_buses.output + [dict(state_attr('sensor.aljunied_station_bus_' + service_no, nextbus), **{'ServiceNo': service_no})] %}
              {% endif %}
            {% endif %}
          {% endfor %}
        {% endfor %}
        {{ next_buses.output | sort(attribute = 'EstimatedArrival') }}
    availability: "{{ is_state('binary_sensor.aljunied_station_bus_40_operating', 'on') or is_state('binary_sensor.aljunied_station_bus_80_operating', 'on') or is_state('binary_sensor.aljunied_station_bus_100_operating', 'on') }}"

  - name: Before Lorong 23 Geylang Bus Stop
    unique_id: binary_sensor.before_lorong_23_geylang_bus_stop
    state: "{{ states('sensor.before_lorong_23_geylang_bus_2') | int(100) < 10 or states('sensor.before_lorong_23_geylang_bus_13') | int(100) < 10 or states('sensor.before_lorong_23_geylang_bus_26') | int(100) < 10 or states('sensor.before_lorong_23_geylang_bus_67') | int(100) < 10 }}"
    attributes:
      services: "{{ ['2','13','26','67'] }}"
      comfortable_walk_time: 10
      min_walk_time: 5
      next_buses: >
        {% set next_buses = namespace(output = []) %}
        {% for service_no in this.attributes.services %}
          {% for nextbus in ['NextBus','NextBus2','NextBus3'] %}
            {% if state_attr('sensor.before_lorong_23_geylang_bus_' + service_no, nextbus).EstimatedArrival is defined %}
              {% if state_attr('sensor.before_lorong_23_geylang_bus_' + service_no, nextbus).EstimatedArrival | length > 0 %}
                {% set next_buses.output = next_buses.output + [dict(state_attr('sensor.before_lorong_23_geylang_bus_' + service_no, nextbus), **{'ServiceNo': service_no})] %}
              {% endif %}
            {% endif %}
          {% endfor %}
        {% endfor %}
        {{ next_buses.output | sort(attribute = 'EstimatedArrival') }}
    availability: "{{ is_state('binary_sensor.before_lorong_23_geylang_bus_2_operating', 'on') or is_state('binary_sensor.before_lorong_23_geylang_bus_13_operating', 'on') or is_state('binary_sensor.before_lorong_23_geylang_bus_26_operating', 'on') or is_state('binary_sensor.before_lorong_23_geylang_bus_67_operating', 'on') }}"

- sensor:
  - name: Next Alarm Timings
    unique_id: sensor.next_alarm_timings
    state: >
      {% set alarms = namespace({ 'Daniel': as_datetime(states('input_datetime.daniels_next_alarm')).astimezone(now().tzinfo),
                                  'Grace': as_datetime(states('input_datetime.graces_next_alarm')).astimezone(now().tzinfo),
                                  'Eli': as_datetime(states('input_datetime.elis_next_alarm')).astimezone(now().tzinfo),
                                  'Elena': as_datetime(states('input_datetime.elenas_next_alarm')).astimezone(now().tzinfo) }) %}
      {% set alarms_dismissed = namespace({ 'Daniel': alarms['Daniel'] <= alarms['Grace'] and is_state('input_boolean.parents_room_next_alarm_dismissed', 'on'),
                                            'Grace': alarms['Grace'] <= alarms['Daniel'] and is_state('input_boolean.parents_room_next_alarm_dismissed', 'on'),
                                            'Eli': is_state('input_boolean.elis_room_next_alarm_dismissed', 'on'),
                                            'Elena': is_state('input_boolean.elenas_room_next_alarm_dismissed', 'on') }) %}
      {% set alarm_timings = namespace(output = '') %}
      {% for person in ['Daniel','Grace','Eli','Elena'] %}
        {% if alarms[person] - now() > timedelta(hours = 12) %}
          {% set alarm_timings.output = alarm_timings.output + 'A' %}
        {% else %}
          {% if alarms_dismissed[person] %}
            {% set alarm_timings.output = alarm_timings.output + 'E' %}
          {% else %}
            {% if (alarms[person] - alarms['Eli']) <= timedelta(minutes = 10) and (alarms['Eli'] - alarms[person]) <= timedelta(minutes = 10) %}
              {% set alarm_timings.output = alarm_timings.output + 'B' %}
            {% elif (alarms[person] - alarms['Elena']) <= timedelta(minutes = 10) and (alarms['Elena'] - alarms[person]) <= timedelta(minutes = 10) %}
              {% set alarm_timings.output = alarm_timings.output + 'C' %}
            {% else %}
              {% set alarm_timings.output = alarm_timings.output + 'D' %}
            {% endif %}
          {% endif %}
        {% endif %}
      {% endfor %}
      {% for person in ['Daniel','Grace','Eli','Elena'] %}
        {% if alarms[person] - now() <= timedelta(minutes = 15) and alarms[person] - now() > timedelta(seconds = -15) %}
          {% set alarm_timings.output = alarm_timings.output + 'T' %}
        {% else %}
          {% set alarm_timings.output = alarm_timings.output + 'F' %}
        {% endif %}
      {% endfor %}
      {{ alarm_timings.output }}
    attributes:
      Daniel: "{{ states('input_datetime.daniels_next_alarm') }}"
      daniel_next_alarm_imminent: "{{ states('sensor.next_alarm_timings')[0] != 'A' }}"
      daniel_next_alarm_dismissable: "{{ states('sensor.next_alarm_timings')[4] == 'T' }}"
      daniel_next_alarm_dismissed: "{{ states('sensor.next_alarm_timings')[0] == 'E' }}"
      Grace: "{{ states('input_datetime.graces_next_alarm') }}"
      grace_next_alarm_imminent: "{{ states('sensor.next_alarm_timings')[1] != 'A' }}"
      grace_next_alarm_dismissable: "{{ states('sensor.next_alarm_timings')[5] == 'T' }}"
      grace_next_alarm_dismissed: "{{ states('sensor.next_alarm_timings')[1] == 'E' }}"
      parents_room: "{{ [states('input_datetime.daniels_next_alarm') | as_datetime, states('input_datetime.graces_next_alarm') | as_datetime] | min }}"
      parents_room_next_alarm_imminent: "{{ states('sensor.next_alarm_timings')[0] != 'A' or states('sensor.next_alarm_timings')[1] != 'A' }}"
      parents_room_next_alarm_dismissable: "{{ states('sensor.next_alarm_timings')[4] == 'T' or states('sensor.next_alarm_timings')[5] == 'T' }}"
      Eli: "{{ states('input_datetime.elis_next_alarm') }}"
      elis_room_next_alarm_imminent: "{{ states('sensor.next_alarm_timings')[2] != 'A' }}"
      elis_room_next_alarm_dismissable: "{{ states('sensor.next_alarm_timings')[6] == 'T' }}"
      eli_next_alarm_dismissed: "{{ states('sensor.next_alarm_timings')[2] == 'E' }}"
      Elena: "{{ states('input_datetime.elenas_next_alarm') }}"
      elenas_room_next_alarm_imminent: "{{ states('sensor.next_alarm_timings')[3] != 'A' }}"
      elenas_room_next_alarm_dismissable: "{{ states('sensor.next_alarm_timings')[7] == 'T' }}"
      elena_next_alarm_dismissed: "{{ states('sensor.next_alarm_timings')[3] == 'E' }}"

- trigger:
  - platform: time_pattern
    minutes: /10
  sensor:
    name: ZHA Device Issues
    unique_id: sensor.zha_device_issues
    state: >
      {% set zha_batteries = integration_entities('zha') | select('search', '^sensor.*_battery') | list %}
      {% set batteries_with_low_charge = namespace(batteries = 0) %}
      {% for battery in zha_batteries %}
        {% if states(battery) in ['unavailable','unknown'] %}
          {% set batteries_with_low_charge.batteries = batteries_with_low_charge.batteries + 1 %}
        {% elif states(battery) | int(0) <= states('input_number.battery_threshold_low') | int %}
          {% set batteries_with_low_charge.batteries = batteries_with_low_charge.batteries + 1 %}
        {% endif %}
      {% endfor %}
      {{ batteries_with_low_charge.batteries }}
    unit_of_measurement: count
    attributes:
      disconnected: >
        {% set zha_batteries = integration_entities('zha') | select('search', '^sensor.*_battery') | list %}
        {% set batteries = namespace(names = []) %}
        {% for battery in zha_batteries %}
          {% if states(battery) in ['unavailable','unknown'] %}
            {% set batteries.names = batteries.names + [battery] %}
          {% elif states(battery) | int(0) == 0 %}
            {% set batteries.names = batteries.names + [battery] %}
          {% endif %}
        {% endfor %}
        {{ batteries.names }}
      batteries_low: >
        {% set zha_batteries = integration_entities('zha') | select('search', '^sensor.*_battery') | list %}
        {% set batteries = namespace(names = []) %}
        {% for battery in zha_batteries %}
          {% if  states(battery) | int(0) <= states('input_number.battery_threshold_low') | int(10) and states(battery) | int(0) > 0 %}
            {% set batteries.names = batteries.names + [battery] %}
          {% endif %}
        {% endfor %}
        {{ batteries.names }}

- trigger:
    - platform: time
      at: '04:00:00'
  sensor:
    - name: Parents' Room Auto Cooling at Night End Time
      unique_id: sensor.parents_room_auto_cooling_at_night_end_time
      state: >
        {% set alarms = namespace(times = []) %}
        {% for alarm in [states('input_datetime.daniels_next_alarm') | as_datetime | as_local,
                         states('input_datetime.graces_next_alarm') | as_datetime | as_local] %}
          {% if alarm.date() == now().date() %}
            {% set alarms.times = alarms.times + [alarm - timedelta(minutes = 30)] %}
          {% endif %}
        {% endfor %}
        {{ ([alarms.times | max, today_at('10:00')] | min).isoformat() if alarms.times | length > 0 else today_at('10:00') }}
      device_class: timestamp

- trigger:
    - platform: state
      entity_id: binary_sensor.playroom_radar_motion
    - platform: state
      entity_id: binary_sensor.playroom_radar_occupancy
      from: 'off'
      to: 'on'
      for:
        seconds: "{{ states('input_number.radar_occupancy_on_delay') | int(10) }}"
    - platform: state
      entity_id: binary_sensor.playroom_radar_occupancy
      from: 'on'
      to: 'off'
  binary_sensor:
    - name: Playroom Presence
      unique_id: binary_sensor.playroom_presence
      device_class: occupancy
      state: "{{ is_state('binary_sensor.playroom_radar_occupancy', 'on') or is_state('binary_sensor.playroom_radar_motion', 'on') }}"
      attributes:
        playroom_radar_occupancy: "{{ states('binary_sensor.playroom_radar_occupancy') }}"
        playroom_radar_motion: "{{ states('binary_sensor.playroom_radar_motion') }}"

- trigger:
    - platform: state
      entity_id: binary_sensor.elenas_room_motion
    - platform: state
      entity_id: binary_sensor.elenas_room_radar_occupancy
      from: 'off'
      to: 'on'
      for:
        seconds: "{{ states('input_number.radar_occupancy_on_delay') | int(10) }}"
    - platform: state
      entity_id: binary_sensor.elenas_room_radar_occupancy
      from: 'on'
      to: 'off'
  binary_sensor:
    - name: Elena's Room Presence
      unique_id: binary_sensor.elenas_room_presence
      device_class: occupancy
      state: "{{ is_state('binary_sensor.elenas_room_radar_occupancy', 'on') or is_state('binary_sensor.elenas_room_motion', 'on') }}"
      attributes:
        elenas_room_radar_occupancy: "{{ states('binary_sensor.elenas_room_radar_occupancy') }}"
        elenas_room_motion: "{{ states('binary_sensor.elenas_room_motion') }}"

- trigger:
    - platform: state
      entity_id: binary_sensor.elis_room_motion
    - platform: state
      entity_id: binary_sensor.elis_room_radar_occupancy
      from: 'off'
      to: 'on'
      for:
        seconds: "{{ states('input_number.radar_occupancy_on_delay') | int(10) }}"
    - platform: state
      entity_id: binary_sensor.elis_room_radar_occupancy
      from: 'on'
      to: 'off'
  binary_sensor:
    - name: Eli's Room Presence
      unique_id: binary_sensor.elis_room_presence
      device_class: occupancy
      state: "{{ is_state('binary_sensor.elis_room_radar_occupancy', 'on') or is_state('binary_sensor.elis_room_motion', 'on') }}"
      attributes:
        elis_room_radar_occupancy: "{{ states('binary_sensor.elis_room_radar_occupancy') }}"
        elis_room_motion: "{{ states('binary_sensor.elis_room_motion') }}"

- trigger:
    - platform: state
      entity_id: binary_sensor.dining_room_motion
    - platform: state
      entity_id: binary_sensor.dining_room_radar_occupancy
      from: 'off'
      to: 'on'
      for:
        seconds: "{{ states('input_number.radar_occupancy_on_delay') | int(10) }}"
    - platform: state
      entity_id: binary_sensor.dining_room_radar_occupancy
      from: 'on'
      to: 'off'
  binary_sensor:
    - name: Dining Room Presence
      unique_id: binary_sensor.dining_room_presence
      device_class: occupancy
      state: "{{ is_state('binary_sensor.dining_room_radar_occupancy', 'on') or is_state('binary_sensor.dining_room_motion', 'on') }}"
      attributes:
        dining_room_radar_occupancy: "{{ states('binary_sensor.dining_room_radar_occupancy') }}"
        dining_room_motion: "{{ states('binary_sensor.dining_room_motion') }}"

- trigger:
    - platform: state
      entity_id: binary_sensor.living_room_motion
    - platform: state
      entity_id: binary_sensor.living_room_radar_occupancy
      from: 'off'
      to: 'on'
      for:
        seconds: "{{ states('input_number.radar_occupancy_on_delay') | int(10) }}"
    - platform: state
      entity_id: binary_sensor.living_room_radar_occupancy
      from: 'on'
      to: 'off'
  binary_sensor:
    - name: Living Room Presence
      unique_id: binary_sensor.living_room_presence
      device_class: occupancy
      state: "{{ is_state('binary_sensor.living_room_radar_occupancy', 'on') or is_state('binary_sensor.living_room_motion', 'on') }}"
      attributes:
        living_room_radar_occupancy: "{{ states('binary_sensor.living_room_radar_occupancy') }}"
        living_room_motion: "{{ states('binary_sensor.living_room_motion') }}"

- trigger:
    - platform: state
      entity_id: binary_sensor.study_room_radar_motion
    - platform: state
      entity_id: binary_sensor.study_room_radar_occupancy
      from: 'off'
      to: 'on'
      for:
        seconds: "{{ states('input_number.radar_occupancy_on_delay') | int(10) }}"
    - platform: state
      entity_id: binary_sensor.study_room_radar_occupancy
      from: 'on'
      to: 'off'
  binary_sensor:
    - name: Study Room Presence
      unique_id: binary_sensor.study_room_presence
      device_class: occupancy
      state: "{{ is_state('binary_sensor.study_room_radar_occupancy', 'on') or is_state('binary_sensor.study_room_radar_motion', 'on') }}"
      attributes:
        study_room_radar_occupancy: "{{ states('binary_sensor.study_room_radar_occupancy') }}"
        study_room_radar_motion: "{{ states('binary_sensor.study_room_radar_motion') }}"

- trigger:
    - platform: state
      entity_id: binary_sensor.parents_room_motion
    - platform: state
      entity_id: binary_sensor.parents_room_radar_occupancy
      from: 'off'
      to: 'on'
      for:
        seconds: "{{ states('input_number.radar_occupancy_on_delay') | int(10) }}"
    - platform: state
      entity_id: binary_sensor.parents_room_radar_occupancy
      from: 'on'
      to: 'off'
  binary_sensor:
    - name: Parents' Room Presence
      unique_id: binary_sensor.parents_room_presence
      device_class: occupancy
      state: "{{ is_state('binary_sensor.parents_room_radar_occupancy', 'on') or is_state('binary_sensor.parents_room_motion', 'on') }}"
      attributes:
        parents_room_radar_occupancy: "{{ states('binary_sensor.parents_room_radar_occupancy') }}"
        parents_room_motion: "{{ states('binary_sensor.parents_room_motion') }}"

- trigger:
    - platform: state
      entity_id: binary_sensor.kitchen_stove_motion
    - platform: state
      entity_id: binary_sensor.kitchen_radar_motion
    - platform: state
      entity_id: binary_sensor.kitchen_radar_occupancy
      from: 'off'
      to: 'on'
      for:
        seconds: "{{ states('input_number.radar_occupancy_on_delay') | int(10) }}"
    - platform: state
      entity_id: binary_sensor.kitchen_radar_occupancy
      from: 'on'
      to: 'off'
  binary_sensor:
    - name: Kitchen Presence
      unique_id: binary_sensor.kitchen_presence
      device_class: occupancy
      state: "{{ is_state('binary_sensor.kitchen_radar_occupancy', 'on') or is_state('binary_sensor.kitchen_radar_motion', 'on') or is_state('binary_sensor.kitchen_stove_motion', 'on') }}"
      attributes:
        kitchen_radar_occupancy: "{{ states('binary_sensor.kitchen_radar_occupancy') }}"
        kitchen_radar_motion: "{{ states('binary_sensor.kitchen_radar_motion') }}"
        kitchen_stove_motion: "{{ states('binary_sensor.kitchen_stove_motion') }}"

- trigger:
  - platform: state
    entity_id: input_select.dishwasher_status
    from:
      - Standby
      - "Off"
    to: Washing
  sensor:
    - name: Dishwasher Last Run Started
      unique_id: sensor.dishwasher_last_run_started
      state: "{{ now().isoformat() }}"
      device_class: timestamp

- trigger:
  - platform: state
    entity_id: input_select.dishwasher_status
    from: Cooling
    to: "Off"
  sensor:
    - name: Dishwasher Last Run Ended
      unique_id: sensor.dishwasher_last_run_ended
      state: "{{ now().isoformat() }}"
      device_class: timestamp
      
- trigger:
  - platform: state
    entity_id: input_select.dishwasher_status
    from: Cooling
    to: "Off"
    for: 1
  sensor:
    - name: Dishwasher Last Run Duration
      unique_id: sensor.dishwasher_last_run_duration
      state: "{{ states('sensor.dishwasher_last_run_ended') | as_datetime - states('sensor.dishwasher_last_run_started') | as_datetime }}"

- trigger:
  - platform: state
    entity_id: sensor.washer_run_state
    to: Washing
  sensor:
    - name: Washer Last Wash Started
      unique_id: sensor.washer_last_wash_started
      state: "{{ now().isoformat() }}"
      device_class: timestamp

- trigger:
  - platform: state
    entity_id: binary_sensor.washer_wash_completed
    from: "off"
    to: "on"
  sensor:
    - name: Washer Last Wash Completed
      unique_id: sensor.washer_last_wash_completed
      state: "{{ now().isoformat() }}"
      device_class: timestamp

- trigger:
  - platform: state
    entity_id: binary_sensor.washer_wash_completed
    from: "off"
    to: "on"
    for: 1
  sensor:
    - name: Washer Last Wash Duration
      unique_id: sensor.washer_last_wash_duration
      state: "{{ states('sensor.washer_last_wash_completed') | as_datetime - states('sensor.washer_last_wash_started') | as_datetime }}"

- trigger:
  - platform: state
    entity_id: input_select.rice_cooker_status
    from: 
      - "Off"
      - Standby
    to: Cooking
  sensor:
    - name: Rice Cooker Last Run Started
      unique_id: sensor.rice_cooker_last_run_started
      state: "{{ now().isoformat() }}"
      device_class: timestamp

- trigger:
  - platform: state
    entity_id: input_select.rice_cooker_status
    from: Cooking
    to: Warming
  sensor:
    - name: Rice Cooker Last Run Ended
      unique_id: sensor.rice_cooker_last_run_ended
      state: "{{ now().isoformat() }}"
      device_class: timestamp
      
- trigger:
  - platform: state
    entity_id: input_select.rice_cooker_status
    from: Cooking
    to: Warming
    for: 1
  sensor:
    - name: Rice Cooker Last Run Duration
      unique_id: sensor.rice_cooker_last_run_duration
      state: "{{ states('sensor.rice_cooker_last_run_ended') | as_datetime - states('sensor.rice_cooker_last_run_started') | as_datetime }}"

- trigger:
  - platform: state
    entity_id: switch.stove_main_power
    from: 'on'
    to: 'off'
  sensor:
    - name: Stove Last Use
      unique_id: sensor.stove_last_use
      state: "{{ now().isoformat() }}"
      device_class: timestamp

- trigger:
  - platform: state
    entity_id: binary_sensor.yard_window_1_raw
    not_to:
      - unavailable
      - unknown
  binary_sensor:
    - name: Yard Window 1
      unique_id: binary_sensor.yard_window_1
      state: "{{ is_state('binary_sensor.yard_window_1_raw','on') }}"
      device_class: window
      attributes:
        raw: "{{ states('binary_sensor.yard_window_1_raw') }}"

- trigger:
  - platform: state
    entity_id: binary_sensor.junior_bathroom_motion
    not_from:
      - unknown
      - unavailable
    not_to:
      - unknown
      - unavailable
  - platform: state
    entity_id: binary_sensor.junior_shower_motion
    not_from:
      - unknown
      - unavailable
    not_to:
      - unknown
      - unavailable
    for:
      minutes: 1
  binary_sensor:
    - name: Junior Bathroom Motion Sensors
      unique_id: binary_sensor.junior_bathroom_motion_sensors
      state: "{{ is_state('binary_sensor.junior_bathroom_motion','on') or is_state('binary_sensor.junior_shower_motion','on') }}"
      device_class: motion
      attributes:
        junior_bathroom_motion: "{{ states('binary_sensor.junior_bathroom_motion') }}"
        junior_shower_motion: "{{ states('binary_sensor.junior_shower_motion') }}"

- trigger:
  - platform: state
    entity_id: sensor.adguard_home_dns_queries
    not_from:
      - unknown
      - unavailable
    not_to:
      - unknown
      - unavailable
    id: state_changed
  - platform: time_pattern
    minutes: "/1"
    id: stale_check
  sensor:
    - name: DNS Queries within 5min
      unique_id: sensor.dns_queries_within_5min
      state: >
        {% if trigger.id == 'stale_check' %}
          {% if now() - states.sensor.adguard_home_dns_queries.last_changed > timedelta(minutes = 5) %}
            0
          {% else %}
            {{ states('sensor.dns_queries_within_5min') }}
          {% endif %}
        {% elif trigger.to_state.state | int(0) - trigger.from_state.state | int(0) > 0 %}
          {{ trigger.to_state.state | int(0) - trigger.from_state.state | int(0) }}
        {% else %}
          0
        {% endif %}
      unit_of_measurement: queries
      attributes:
        timestamp: "{{ now() }}"

- trigger:
  - platform: state
    entity_id: sensor.adguard_home_dns_queries_blocked
    not_from:
      - unknown
      - unavailable
    not_to:
      - unknown
      - unavailable
    id: state_changed
  - platform: time_pattern
    minutes: "/1"
    id: stale_check
  sensor:
    - name: DNS Queries Blocked by Filters within 5min
      unique_id: sensor.dns_queries_blocked_by_filters_within_5min
      state: >
        {% if trigger.id == 'stale_check' %}
          {% if now() - states.sensor.adguard_home_dns_queries_blocked.last_changed > timedelta(minutes = 5) %}
            0
          {% else %}
            {{ states('sensor.dns_queries_blocked_by_filters_within_5min') }}
          {% endif %}
        {% elif trigger.to_state.state | int(0) - trigger.from_state.state | int(0) > 0%}
          {{ trigger.to_state.state | int(0) - trigger.from_state.state | int(0) }}
        {% else %}
          0
        {% endif %}
      unit_of_measurement: queries
      attributes:
        timestamp: "{{ now() }}"

- trigger:
  - platform: state
    entity_id:
      - sensor.dns_queries_within_5min
      - sensor.dns_queries_blocked_by_filters_within_5min
    not_from:
      - unknown
      - unavailable
    not_to:
      - unknown
      - unavailable
    for:
      minutes: 1
      seconds: 1
  sensor:
    - name: DNS Query Filter Block Rate within 5min
      unique_id: sensor.dns_query_filter_block_rate_within_5min
      state: "{{ ((states('sensor.dns_queries_blocked_by_filters_within_5min') | int(0) / states('sensor.dns_queries_within_5min') | int(1)) * 100) | round(2) if states('sensor.dns_queries_within_5min') | int(1) > 0 else 0 }}"
      unit_of_measurement: '%'

- trigger:
  - platform: state
    entity_id: sensor.qemu_pfsense_100_network_in
    not_from:
      - unknown
      - unavailable
    not_to:
      - unknown
      - unavailable
  sensor:
    - name: pfSense MB In within 1min
      unique_id: sensor.pfsense_mb_in_within_1min
      state: "{{ trigger.to_state.state | float(0) - trigger.from_state.state | float(0) }}"
      unit_of_measurement: MB
      attributes:
        timestamp: "{{ now() }}"

- trigger:
  - platform: state
    entity_id: sensor.qemu_pfsense_100_network_out
    not_from:
      - unknown
      - unavailable
    not_to:
      - unknown
      - unavailable
  sensor:
    - name: pfSense MB Out within 1min
      unique_id: sensor.pfsense_mb_out_within_1min
      state: "{{ trigger.to_state.state | float(0) - trigger.from_state.state | float(0) }}"
      unit_of_measurement: MB
      attributes:
        timestamp: "{{ now() }}"

- trigger:
  - platform: state
    entity_id: sensor.qemu_eloquent_house_101_network_in
    not_from:
      - unknown
      - unavailable
    not_to:
      - unknown
      - unavailable
  sensor:
    - name: Home Assistant MB In within 1min
      unique_id: sensor.home_assistant_mb_in_within_1min
      state: "{{ trigger.to_state.state | float(0) - trigger.from_state.state | float(0) }}"
      unit_of_measurement: MB
      attributes:
        timestamp: "{{ now() }}"

- trigger:
  - platform: state
    entity_id: sensor.qemu_eloquent_house_101_network_out
    not_from:
      - unknown
      - unavailable
    not_to:
      - unknown
      - unavailable
  sensor:
    - name: Home Assistant MB Out within 1min
      unique_id: sensor.home_assistant_mb_out_within_1min
      state: "{{ trigger.to_state.state | float(0) - trigger.from_state.state | float(0) }}"
      unit_of_measurement: MB
      attributes:
        timestamp: "{{ now() }}"
        

- trigger:
    - platform: time_pattern
      hours: /1
  action:
    - service: weather.get_forecasts
      data:
        type: daily
      target:
        entity_id: weather.local_weather
      response_variable: daily
  sensor:
    - name: Local 4-Day Weather Forecast
      unique_id: sensor.local_4_day_weather_forecast
      state: "{{ now() }}"
      attributes:
        forecast: "{{ daily['weather.local_weather'].forecast }}"