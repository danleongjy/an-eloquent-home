- platform: template
  covers:
    kitchen_blind:
      friendly_name: Kitchen Blind
      unique_id: cover.kitchen_blind
      device_class: shutter
      value_template: >
        {% if states('input_select.kitchen_blind_movement') in ['opening','closing'] %}
          {{ states('input_select.kitchen_blind_movement') }}
        {% else %}
          {% if states('input_number.kitchen_blind_position') | int(0) > 0 %}
            open
          {% else %}
            closed
          {% endif %}
        {% endif %}
      position_template: "{{ states('input_number.kitchen_blind_position') | int(0) }}"
      open_cover:
        service: script.kitchen_blind_set_position
        data:
          target_position: 100
      close_cover:
        service: script.kitchen_blind_set_position
        data:
          target_position: 0
      stop_cover:
        service: script.kitchen_blind_set_position
        data:
          target_position: "{{ states('input_number.kitchen_blind_position') | int(0) }}"
      set_cover_position:
        service: script.kitchen_blind_set_position
        data:
          target_position: "{{ position }}"
    dining_room_blinds:
      friendly_name: Dining Room Blinds
      unique_id: cover.dining_room_blinds
      device_class: blind
      position_template: >
        {{ (state_attr('cover.dining_room_left_blind','current_position') + 
            state_attr('cover.dining_room_left_middle_blind','current_position') + 
            state_attr('cover.dining_room_right_middle_blind','current_position') + 
            state_attr('cover.dining_room_right_blind','current_position')) / 4 }}
      availability_template: >
        {{ states('cover.dining_room_left_blind') not in ['unavailable', 'unknown'] and 
           states('cover.dining_room_left_middle_blind') not in ['unavailable', 'unknown'] and 
           states('cover.dining_room_right_middle_blind') not in ['unavailable', 'unknown'] and 
           states('cover.dining_room_right_blind') not in ['unavailable', 'unknown'] }}
      open_cover:
        repeat:
          for_each:
            - cover.dining_room_right_blind
            - cover.dining_room_right_middle_blind
            - cover.dining_room_left_middle_blind
            - cover.dining_room_left_blind
          sequence:
            - service: cover.open_cover
              target:
                entity_id: "{{ repeat.item }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
      close_cover:
        repeat:
          for_each:
            - cover.dining_room_right_blind
            - cover.dining_room_right_middle_blind
            - cover.dining_room_left_middle_blind
            - cover.dining_room_left_blind
          sequence:
            - service: cover.close_cover
              target:
                entity_id: "{{ repeat.item }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
      stop_cover:
        repeat:
          for_each:
            - cover.dining_room_right_blind
            - cover.dining_room_right_middle_blind
            - cover.dining_room_left_middle_blind
            - cover.dining_room_left_blind
          sequence:
            - service: cover.stop_cover
              target:
                entity_id: "{{ repeat.item }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
      set_cover_position:
        repeat:
          for_each:
            - cover.dining_room_right_blind
            - cover.dining_room_right_middle_blind
            - cover.dining_room_left_middle_blind
            - cover.dining_room_left_blind
          sequence:
            - service: cover.set_cover_position
              target:
                entity_id: "{{ repeat.item }}"
              data:
                position: "{{ position }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
    living_room_blinds:
      friendly_name: Living Room Blinds
      unique_id: cover.living_room_blinds
      device_class: blind
      position_template: "{{ (state_attr('cover.living_room_left_blind','current_position') + state_attr('cover.living_room_middle_blind','current_position') + state_attr('cover.living_room_right_blind','current_position')) / 3 }}"
      availability_template: "{{ states('cover.living_room_left_blind') not in ['unavailable', 'unknown'] and states('cover.living_room_middle_blind') not in ['unavailable', 'unknown'] and states('cover.living_room_right_blind') not in ['unavailable', 'unknown'] }}"
      open_cover:
        repeat:
          for_each:
            - cover.living_room_right_blind
            - cover.living_room_middle_blind
            - cover.living_room_left_blind
          sequence:
            - service: cover.open_cover
              target:
                entity_id: "{{ repeat.item }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
      close_cover:
        repeat:
          for_each:
            - cover.living_room_right_blind
            - cover.living_room_middle_blind
            - cover.living_room_left_blind
          sequence:
            - service: cover.close_cover
              target:
                entity_id: "{{ repeat.item }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
      stop_cover:
        repeat:
          for_each:
            - cover.living_room_right_blind
            - cover.living_room_middle_blind
            - cover.living_room_left_blind
          sequence:
            - service: cover.stop_cover
              target:
                entity_id: "{{ repeat.item }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
      set_cover_position:
        repeat:
          for_each:
            - cover.living_room_right_blind
            - cover.living_room_middle_blind
            - cover.living_room_left_blind
          sequence:
            - service: cover.set_cover_position
              target:
                entity_id: "{{ repeat.item }}"
              data:
                position: "{{ position }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
    study_room_blinds:
      friendly_name: Study Room Blinds
      unique_id: cover.study_room_blinds
      device_class: blind
      position_template: "{{ (state_attr('cover.study_room_left_blind','current_position') + state_attr('cover.study_room_right_blind','current_position')) / 2 }}"
      availability_template: "{{ states('cover.study_room_left_blind') not in ['unavailable', 'unknown'] and states('cover.study_room_right_blind') not in ['unavailable', 'unknown'] }}"
      open_cover:
        repeat:
          for_each:
            - cover.study_room_right_blind
            - cover.study_room_left_blind
          sequence:
            - service: cover.open_cover
              target:
                entity_id: "{{ repeat.item }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
      close_cover:
        repeat:
          for_each:
            - cover.study_room_right_blind
            - cover.study_room_left_blind
          sequence:
            - service: cover.close_cover
              target:
                entity_id: "{{ repeat.item }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
      stop_cover:
        repeat:
          for_each:
            - cover.study_room_right_blind
            - cover.study_room_left_blind
          sequence:
            - service: cover.stop_cover
              target:
                entity_id: "{{ repeat.item }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
      set_cover_position:
        repeat:
          for_each:
            - cover.study_room_right_blind
            - cover.study_room_left_blind
          sequence:
            - service: cover.set_cover_position
              target:
                entity_id: "{{ repeat.item }}"
              data:
                position: "{{ position }}"
              continue_on_error: true
            - delay: "{{ states('input_number.blinds_command_deconflict' ) | int(2) }}"
